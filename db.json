{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/AP.png","path":"images/AP.png","modified":0,"renderable":0},{"_id":"source/images/arp.png","path":"images/arp.png","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/bar1.png","path":"images/bar1.png","modified":0,"renderable":0},{"_id":"source/images/date1.png","path":"images/date1.png","modified":0,"renderable":0},{"_id":"source/images/django.jpg","path":"images/django.jpg","modified":0,"renderable":0},{"_id":"source/images/jiexi.jpg","path":"images/jiexi.jpg","modified":0,"renderable":0},{"_id":"source/images/route.png","path":"images/route.png","modified":0,"renderable":0},{"_id":"source/images/title.ico","path":"images/title.ico","modified":0,"renderable":0},{"_id":"source/images/micro.jpg","path":"images/micro.jpg","modified":0,"renderable":0},{"_id":"source/images/vnc1.png","path":"images/vnc1.png","modified":0,"renderable":0},{"_id":"source/images/weibo.png","path":"images/weibo.png","modified":0,"renderable":0},{"_id":"source/images/androidAppIndex.png","path":"images/androidAppIndex.png","modified":0,"renderable":0},{"_id":"source/images/voice.png","path":"images/voice.png","modified":0,"renderable":0},{"_id":"source/images/liangdu.png","path":"images/liangdu.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next1.png","path":"images/favicon-32x32-next1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/esp8266.png","path":"images/esp8266.png","modified":0,"renderable":0},{"_id":"source/images/defender.png","path":"images/defender.png","modified":0,"renderable":0},{"_id":"source/images/touchpad.png","path":"images/touchpad.png","modified":0,"renderable":0},{"_id":"source/images/voiceconfig.png","path":"images/voiceconfig.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/images/finger_gesture.png","path":"images/finger_gesture.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/apple_home.png","path":"images/apple_home.png","modified":0,"renderable":0},{"_id":"source/images/clover1.jpg","path":"images/clover1.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"114d935bb62244d7dc50edf41fa178de5f10ca90","modified":1513175612000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1542683891939},{"_id":"source/favicon.ico","hash":"e0ff7cf3f8ea3f92579339ad26a75fde3fe5fc5f","modified":1538881410000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1538830790000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1538830790000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1538830790000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1538830790000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1538830790000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1538830790000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1538830790000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1538830790000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1538830790000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1538830790000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1538830790000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1538830790000},{"_id":"themes/next/_config.yml","hash":"7174af539de92b855c4b25ec40ae94bbd44cca69","modified":1543395963730},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1538830790000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1538830790000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1538830790000},{"_id":"source/_posts/2017-12-17-Jekyll安装.md","hash":"2b90bdc3af061474f3aa752acfa86c57904a8190","modified":1538874628000},{"_id":"source/_posts/2017-12-16-常用Markdown语法.md","hash":"43ba05a822cae1fd2f879f958006a3ee9554ccec","modified":1538874656000},{"_id":"source/_posts/2017-12-18-JS常见问题及解决办法.md","hash":"c24f52f8392b0797207061ca06e52ad1bd14b59b","modified":1539586422000},{"_id":"source/_posts/2017-12-18-使用Jekyll搭建博客.md","hash":"8cc24a933295fcfd67d03024905e419180634591","modified":1538904030000},{"_id":"source/_posts/2017-12-26-php学习笔记.md","hash":"a410277988aaea0b1401ac5805794f7105ff6362","modified":1538874488000},{"_id":"source/_posts/2017-12-29-Java利用JDBC连接SQLserver数据库.md","hash":"8be11f23169325dd3f9ff11670b9d40bf385320d","modified":1538879056000},{"_id":"source/_posts/2018-01-20-python学习笔记.md","hash":"d5d234c51c53226f2e7268b2bb81ce95a7d2576c","modified":1538874456000},{"_id":"source/_posts/2018-01-30-python爬虫.md","hash":"b10d972fb7a420bb104790d5922cc35689eaa993","modified":1538874450000},{"_id":"source/_posts/2018-02-03-git使用.md","hash":"9b52f3102cfca30dcabf83ddac00f3716e69be74","modified":1542436557773},{"_id":"source/_posts/2018-02-06-python虚拟环境搭建.md","hash":"ec63fe7b24462b4ee85f1901f5744f3f0c9b662e","modified":1538874388000},{"_id":"source/_posts/2018-03-01-MONGODB的安装与使用.md","hash":"88ad7f8c1245b2b1ff516ce2f4fbfcfbb4a9a534","modified":1538874374000},{"_id":"source/_posts/2018-03-01-selenium的使用.md","hash":"28f09d9d858a86af911d652d88c0b7067757d7fb","modified":1538874348000},{"_id":"source/_posts/2018-03-26-matplotlib画柱状图.md","hash":"a196771ea7f2da511bc0b1bc9dcac4ddfcf4c4ba","modified":1538898416000},{"_id":"source/_posts/2018-03-27-统计好友QQ动态词频.md","hash":"186cede9b9bbcc1f0e5aae30ca1da271a3303b59","modified":1538874296000},{"_id":"source/_posts/2018-06-08-Java连接Mysql.md","hash":"3f298d17fd6503df57425f7f2bf8005a6c97a1bd","modified":1538878570000},{"_id":"source/_posts/2018-06-10-Java字符画转换.md","hash":"b553330929aa85fa9c7bef297f075fefc4f937b3","modified":1538874306000},{"_id":"source/_posts/2018-06-18-SSH登录服务器.md","hash":"d35e881287479e96cd550233aad7a9c852032866","modified":1538874182000},{"_id":"source/_posts/2018-07-29-系统、软件及常用工具.md","hash":"fa17d7aea44da3d559e9e1a47a8dd53ea35880d4","modified":1538874154000},{"_id":"source/_posts/2018-08-19-hibernate的基本使用.md","hash":"c749795017af97df33cb9d7a52f62fa63e07a67e","modified":1538874110000},{"_id":"source/_posts/2018-08-19-hibernate常见问题.md","hash":"3c63061a0f86a0256a8cd3e87a1e1c7f2d282124","modified":1538874126000},{"_id":"source/_posts/2018-08-25-python操作excel.md","hash":"3cd08e78593959633060ae90b7f5720c17f6fd84","modified":1538874096000},{"_id":"source/_posts/2018-09-06-使用struts2的拦截器实现权限验证.md","hash":"5247b50b1f1362e5207d3add34e61f4b4742bb1d","modified":1538874074000},{"_id":"source/_posts/2018-09-08-Linux常用操作.md","hash":"9a5c1514334f1cb2aa0ba38a4a0ece60e30d9704","modified":1538874048000},{"_id":"source/_posts/2018-09-16-树莓派爬坑系列（一）电脑连接树莓派.md","hash":"b5d5f9f2d533428ade5789250f34815bba9ba7eb","modified":1538901500000},{"_id":"source/_posts/2018-09-16-树莓派爬坑系列（二）配置WiFi热点.md","hash":"2671d61f378cc3d24cbb293c841451d313a54c36","modified":1538874808000},{"_id":"source/_posts/2018-09-19-树莓派爬坑系列（三）使用USB麦克风进行录音.md","hash":"ab6f234dc01c852ce0038e1ee432f959dcd7e8c6","modified":1538898456000},{"_id":"source/_posts/2018-09-30-树莓派爬坑系列（四）安装浏览器驱动.md","hash":"7136a5fcf2f04165a53461e2ddf12e38e04623d0","modified":1538873960000},{"_id":"source/_posts/2018-10-06-Django框架的快速入门笔记.md","hash":"23dfc6441061d36cbb620239dde1cb2b565cc866","modified":1539523250000},{"_id":"source/_posts/2018-10-06-树莓派爬坑系列（五）使用snowboy做热词唤醒.md","hash":"c352389deeedbe9c4d27c673d898c9fdb3e07509","modified":1538873952000},{"_id":"source/_posts/2018-11-17-Git与GitHub.md","hash":"740e47c69716f0ab0ee0719cb7b93b11722713ac","modified":1543395344268},{"_id":"source/_posts/2018-10-07-hexo入坑小记.md","hash":"74d595d45459e1cb530021f6214e6a43a06452ff","modified":1538916738000},{"_id":"source/_posts/2018-10-08-树莓派爬坑系列（六）Linux下双网卡上网问题.md","hash":"5cd0161449431d09136e5c2fa5838a87ded5d34f","modified":1539011476000},{"_id":"source/_posts/2018-11-28-Android初体验(一)目录结构及左右.md","hash":"b56f2260cccc6eae47be35fb8a7b5bae50fb45e3","modified":1543412123719},{"_id":"source/_posts/2018-11-08-黑苹果折腾手记.md","hash":"f83332404d0233131e0d7efc21fc1e6dc8c59a4d","modified":1542684065730},{"_id":"source/_posts/2018-11-28-Android初体验-二-常用布局.md","hash":"e9d8f442f34291621e7d4be6e8aaa1f0011732d4","modified":1543412114191},{"_id":"source/categories/index.md","hash":"71a640bba0cfc596af38eeb6cbb6c19d78a1591f","modified":1538873708000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1543400849536},{"_id":"source/images/AP.png","hash":"8d6476eb9d68e84f7fc77aa1249369bf8ea60628","modified":1524392100000},{"_id":"source/images/arp.png","hash":"3cee9d2bcd0ed9a21e85a5240fb940f169db1ca6","modified":1537346042000},{"_id":"source/images/avatar.png","hash":"c1c17a560d8e399c609ec048d3bb4c540a7f76e0","modified":1538832548000},{"_id":"source/images/bar1.png","hash":"7dc247d0bd08adcdded86bfcaee3c21a93606f42","modified":1522068756000},{"_id":"source/images/date1.png","hash":"a72caaf8babaa3b89d121d53ffcb8d69d67dcae3","modified":1513565194000},{"_id":"source/images/django.jpg","hash":"0b5757618ebb355e4570cb89954b840b6e9cae6d","modified":1538916882000},{"_id":"source/images/jiexi.jpg","hash":"b94db0332a98bf9a124d10171b4b8e75e7f8c768","modified":1513664788000},{"_id":"source/images/route.png","hash":"0d1d4e67a0783b13246d002c0a3ab87e9a9eb783","modified":1539010178000},{"_id":"source/images/title.ico","hash":"34059b52a4ecb4b7dbc60673ce0d1810bf0b2e78","modified":1514772420000},{"_id":"source/images/micro.jpg","hash":"9430cf0ba03d4ac764193b03200d1d2bfad87a34","modified":1537344090000},{"_id":"source/images/vnc1.png","hash":"6d9fec46d43380ec2e0edda775e8c7346bc04978","modified":1537346680000},{"_id":"source/images/weibo.png","hash":"f8e63189fe8a1341abf795819a1bc22f024d6df8","modified":1514535792000},{"_id":"source/tags/index.md","hash":"65a7c51ecbb48270c39685a24e72b69bf0c9ec77","modified":1538871644000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1538830790000},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1538830790000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1538830774000},{"_id":"themes/next/.git/index","hash":"a4e203a9d418750550da514ebaaff644bba962f0","modified":1538830790000},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1538830790000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1538830790000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1538830790000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1538830790000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1538830790000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1538830790000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1538830790000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1538830790000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1538830790000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1538830790000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1538830790000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1538830790000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1538830790000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1538830790000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1538830790000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1538830790000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1538830790000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1538830790000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1538830790000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1538830790000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1538830790000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1538830790000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1538830790000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1538830790000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1538830790000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1538830790000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1538830790000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1538830790000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1538830790000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1538830790000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1538830790000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1538830790000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1538830790000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1538830790000},{"_id":"source/images/androidAppIndex.png","hash":"9db5c8d3e0072b979264665b73d095977bf84ed0","modified":1543400834336},{"_id":"source/images/voice.png","hash":"607c0dbcac68d284cd0c51f7dfb860b2a3168839","modified":1541419572830},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538830790000},{"_id":"source/images/liangdu.png","hash":"6b8217fd9ecdf85b6ec47c51916a2893bdcd0029","modified":1541422777260},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1538830774000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1538830774000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1538830774000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1538830774000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1538830774000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1538830774000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1538830774000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1538830774000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1538830774000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1538830774000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1538830774000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1538830774000},{"_id":"themes/next/.git/logs/HEAD","hash":"5ce48710a1f4911388b83239086cb5dbb4ddc464","modified":1538830790000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1538830790000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1538830790000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1538830790000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1538830790000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1538830790000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1538830790000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1538830790000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1538830790000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1538830790000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1538830790000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1538830790000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1538830790000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1538830790000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1538830790000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1538830790000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1538830790000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1538830790000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1538830790000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1538830790000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1538830790000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1538830790000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1538830790000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1538830790000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1538830790000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1538830790000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1538830790000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1538830790000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1538830790000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1538830790000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1538830790000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1538830790000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1538830790000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1538830790000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1538830790000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1538830790000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1538830790000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1538830790000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1538830790000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1538830790000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1538830790000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1538830790000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1538830790000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1538830790000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1538830790000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"138afe45be3c1da6f61019df257a6f4ab40c2f5d","modified":1538881360000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1538830790000},{"_id":"themes/next/source/images/favicon-32x32-next1.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1538830790000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1538830790000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538830790000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1538830790000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1538830790000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538830790000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1538830790000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1538830790000},{"_id":"source/images/esp8266.png","hash":"516adbfa1b3e9f02e54a23f2c715d075975aaf24","modified":1524393008000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538830790000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538830790000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538830790000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538830790000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538830790000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538830790000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538830790000},{"_id":"source/images/defender.png","hash":"8ffa18863d537d611d8ead147cf8c41552ab26d4","modified":1539350926000},{"_id":"source/images/touchpad.png","hash":"d8127db667ccb380caad18ffcd272f379ef717d9","modified":1541420979990},{"_id":"source/images/voiceconfig.png","hash":"68173a96737b1f1c70889c5104c6f9679fefcfca","modified":1541420219420},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1538830790000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1538830790000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1538830790000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1538830790000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1538830790000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1538830790000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1538830790000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1538830790000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1538830790000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1538830790000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1538830790000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1538830790000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1538830790000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1538830790000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1538830790000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1538830790000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1538830790000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1538830790000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1538830790000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1538830790000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1538830790000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1538830790000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1538830790000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1538830790000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1538830790000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1538830790000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1538830790000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1538830790000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1538830790000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1538830790000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1538830790000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1538830790000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1538830790000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1538830790000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1538830790000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1538830790000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1538830790000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1538830790000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1538830790000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1538830790000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1538830790000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1538830790000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1538830790000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1538830790000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1538830790000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1538830790000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1538830790000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1538830790000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1538830790000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1538830790000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1538830790000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1538830790000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1538830790000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1538830790000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1538830790000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1538830790000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1538830790000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1538830790000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1538830790000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1538830790000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1538830790000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1538830790000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1538830790000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1538830790000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1538830790000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"5ce48710a1f4911388b83239086cb5dbb4ddc464","modified":1538830790000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1538830790000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1538830790000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1538830790000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1538830790000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1538830790000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1538830790000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1538830790000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1538830790000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1538830790000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1538830790000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1538830790000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1538830790000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1538830790000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1538830790000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538830790000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1538830790000},{"_id":"source/images/finger_gesture.png","hash":"7a0a415da677a3ae623681d3e628b519fbe878c5","modified":1541731622500},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"5ce48710a1f4911388b83239086cb5dbb4ddc464","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1538830790000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1538830790000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1538830790000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1538830790000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1538830790000},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.idx","hash":"be430c584ec6e1499b87f9e416e72d0fbc2e3a26","modified":1538830788000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1538830790000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1538830790000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1538830790000},{"_id":"source/images/apple_home.png","hash":"968d5a9561bb7e7e0896f8365a9945df2416c016","modified":1541404743740},{"_id":"source/images/clover1.jpg","hash":"f61c6850825cfa9af9510c83241a3744fc27e8f4","modified":1541410901100},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.pack","hash":"eee901eb2f4a4df31eaa41634f4e9de643c3fb4e","modified":1538830788000},{"_id":"public/categories/常用的命令行工具/index.html","hash":"c9e003f82f10e0ca8d5dcf8604974853cbe4eb43","modified":1543414726919},{"_id":"public/categories/其它/index.html","hash":"5bf2c3f5d846099895c126cf4e36ea74d9c673a9","modified":1543414726919},{"_id":"public/categories/网页编程常见问题/index.html","hash":"376cc80b918c921954cc807cebb9b733d585032d","modified":1543414726907},{"_id":"public/categories/php学习笔记/index.html","hash":"9c8c4e2d9349d0099813a2f937f1e1ae75b45a68","modified":1543414726907},{"_id":"public/categories/博客建站/index.html","hash":"cd9c699e1e18d38fc05b1e3b429e97ff6527df96","modified":1543414726908},{"_id":"public/categories/操作系统/index.html","hash":"b472fdb82be827e47e36110b0f1f545c9866dcc2","modified":1543414726908},{"_id":"public/tags/Jekyll安装/index.html","hash":"f7e2f1e15df88fa4869cd617b6785c779dcb0f8f","modified":1543414726908},{"_id":"public/tags/Markdown/index.html","hash":"fef8fa50f2779742bdce884aaccfce1230e6e02b","modified":1543414726909},{"_id":"public/tags/Jekyll/index.html","hash":"248df7f61cf8fc78e136e10e6850477e0838f5ed","modified":1543414726909},{"_id":"public/tags/搭建博客/index.html","hash":"0f4c62e297c4f462ab91cfc94c0b1c897ddbb246","modified":1543414726909},{"_id":"public/tags/java/index.html","hash":"712b547f23f2533aae06d04bfe305d74e726113f","modified":1543414726909},{"_id":"public/tags/JDBC/index.html","hash":"a7ffd291f724760e163629ba05188698c0d68b39","modified":1543414726909},{"_id":"public/tags/SQLserver/index.html","hash":"82b344b6ff2191b4899e84f48b920708c7c2f166","modified":1543414726909},{"_id":"public/tags/JS/index.html","hash":"83094d093c7ed0f07c6ed0cf7b40ea7d9c90f227","modified":1543414726909},{"_id":"public/tags/CS/index.html","hash":"a392833c12da5560013c0130deb741dd749c213a","modified":1543414726909},{"_id":"public/tags/爬虫/index.html","hash":"94500b0a3dd440115b149403fcd3e89f2c74413e","modified":1543414726909},{"_id":"public/tags/python虚拟环境/index.html","hash":"bdfc231d6fc8dbb529d5d3e3b6b1aaccaea0791c","modified":1543414726909},{"_id":"public/tags/php/index.html","hash":"812805b80abde24d3cb0544d18c9cd2b63aa77ab","modified":1543414726910},{"_id":"public/tags/数据库/index.html","hash":"c8cadc555110219c992fa2e3221d5345228216b8","modified":1543414726910},{"_id":"public/tags/matplot/index.html","hash":"94ef5a171954ada3a85a9a8df27756761037f375","modified":1543414726910},{"_id":"public/tags/MONGODB/index.html","hash":"b1f4b7a06d856354a2191692e57471eccf35a88e","modified":1543414726910},{"_id":"public/tags/git/index.html","hash":"f273ef1b1c4f953ede6413ec3c8cbe632d8b0fd7","modified":1543414726910},{"_id":"public/tags/selenium/index.html","hash":"d5a62bb42b8329081f620896661ac30b6fc84ec6","modified":1543414726910},{"_id":"public/tags/字符画/index.html","hash":"85d10bdb846952c6b4f3f18a20692ed66a77eae9","modified":1543414726910},{"_id":"public/tags/词频/index.html","hash":"d4c3e89dd0ef92afe18f567ccdafe47ae7087979","modified":1543414726910},{"_id":"public/tags/MySQL/index.html","hash":"4b640a1952c2eaab2dedb5dcaac0561ee09310ee","modified":1543414726910},{"_id":"public/tags/hibernate/index.html","hash":"e09dd7ed4d907c174b4c82f432335d8fb5e5e1f4","modified":1543414726910},{"_id":"public/tags/SSH/index.html","hash":"d1b41943b5569f69106acda1a610a00782d72fef","modified":1543414726910},{"_id":"public/tags/openpyxl/index.html","hash":"48a17538e3d1ad5c11c2dcde07c299eaca74a846","modified":1543414726911},{"_id":"public/tags/struts2/index.html","hash":"7906d221cabcbd9ae4ec2875ea9e01aee1e75e5b","modified":1543414726911},{"_id":"public/tags/Liunx/index.html","hash":"68997f3b53b8b0d50fd1260348f731a1d19701e2","modified":1543414726911},{"_id":"public/tags/重装系统/index.html","hash":"b998e8a4d2ddac3594d386ccd53a8da82a9e337a","modified":1543414726911},{"_id":"public/tags/常用软件/index.html","hash":"87041703fbcf6fb3bd01cbe1b0e5c0081dda6804","modified":1543414726911},{"_id":"public/tags/chromium-chromedriver/index.html","hash":"0d60e82a8fccc9389c1a2c1308f5e822f728c86d","modified":1543414726911},{"_id":"public/tags/网线直连树莓派/index.html","hash":"febeadbe5f1451c84a203f0c0f6dd60976edfad6","modified":1543414726911},{"_id":"public/tags/WiFi热点/index.html","hash":"96674149d6326e6fbca520d29fca7bd077614022","modified":1543414726911},{"_id":"public/tags/Django/index.html","hash":"301de315a859632ca8e6786d038b65d3c3a29817","modified":1543414726912},{"_id":"public/tags/热词唤醒/index.html","hash":"dbd1909885d6fd3aa4bfbace1f609722a2472625","modified":1543414726912},{"_id":"public/tags/博客/index.html","hash":"36609bce15106f3d54f657f15c14c217658486df","modified":1543414726912},{"_id":"public/tags/hackintosh/index.html","hash":"644b506cae95d03e21ef61c9659b0b44c8263a21","modified":1543414726912},{"_id":"public/tags/双网卡/index.html","hash":"145f5798781f8995fbf49ee64fa2361bedc52752","modified":1543414726913},{"_id":"public/archives/2018/07/index.html","hash":"fd54a25fcbe43335259ceda38104504e02c975eb","modified":1543412142541},{"_id":"public/categories/index.html","hash":"c0dbc92c4d823f2fa1e3b5b1df24065748414c4d","modified":1543414726913},{"_id":"public/tags/index.html","hash":"4c8e4b136536291569f6238e56513c76d42525e6","modified":1543414726913},{"_id":"public/2018/11/17/Git与GitHub/index.html","hash":"5852645a1fd8a6e995533cb8f28658a9c493acce","modified":1543412142545},{"_id":"public/2018/11/05/黑苹果折腾手记/index.html","hash":"96ff50c5758da640e78dcd0cd97242470dce88f9","modified":1543412142546},{"_id":"public/2018/10/08/树莓派爬坑系列（六）Linux下双网卡上网问题/index.html","hash":"a3e3246b6b7b4da078a392bca40325cdf9c60115","modified":1543412142546},{"_id":"public/2018/10/07/hexo入坑小记/index.html","hash":"244ab11940cc080a7cb5020d6d1c09f65d02c87d","modified":1543412142546},{"_id":"public/2018/10/06/树莓派爬坑系列（五）使用snowboy做热词唤醒/index.html","hash":"26aee058815aa06e740a78ef076d764ca25d979f","modified":1543412142546},{"_id":"public/2018/10/06/Django框架的快速入门笔记/index.html","hash":"713255757f5601aa74f912eb14ef6b77b1022ac1","modified":1543412142546},{"_id":"public/2018/09/30/树莓派爬坑系列（四）安装浏览器驱动/index.html","hash":"815f0ecfe46d34f51c374e7fc05e36a2a25dac72","modified":1543412142546},{"_id":"public/2018/09/19/树莓派爬坑系列（三）使用USB麦克风进行录音/index.html","hash":"d7d3d9535f3f6737bfbfd5c7bc1cf06794ba282f","modified":1543412142546},{"_id":"public/2018/09/16/树莓派爬坑系列（一）电脑连接树莓派/index.html","hash":"1ac108abfef9b56dcf0d4e4e46a2ac628482599e","modified":1543412142546},{"_id":"public/2018/09/16/树莓派爬坑系列（二）配置WiFi热点/index.html","hash":"1e568694aac0391a256e56eea27e3514c4be1283","modified":1543412142546},{"_id":"public/2018/09/08/Linux常用操作/index.html","hash":"e5023b89f04951e247ee39e2426ae4a38942d66b","modified":1543412142546},{"_id":"public/2018/09/06/使用struts2的拦截器实现权限验证/index.html","hash":"d2ae9b470591ad8b77e490969cfb255232b8dd91","modified":1543412142546},{"_id":"public/2018/08/25/python操作excel/index.html","hash":"44008fefd3df0554bd2512bce16abdb6970ca53a","modified":1543412142546},{"_id":"public/2018/08/19/hibernate的基本使用/index.html","hash":"814b5d2b317cbf45a8ac7e20070c7f7b8e8cfd9f","modified":1543412142546},{"_id":"public/2018/08/19/hibernate常见问题/index.html","hash":"7b07e60d5b85f49de81dac2f6176b88356e2e8eb","modified":1543412142546},{"_id":"public/2018/07/29/系统、软件及常用工具/index.html","hash":"0daf6601e18641545ab488ba065b2110eeb8d7f5","modified":1543412142547},{"_id":"public/2018/06/18/SSH登录服务器/index.html","hash":"ac5c53de536edb04b074dbaf316efe183e5e2672","modified":1543412142547},{"_id":"public/2018/06/10/Java字符画转换/index.html","hash":"42757c1005c4f41850b8180d89de877a4c071a96","modified":1543412142547},{"_id":"public/2018/06/08/Java连接Mysql/index.html","hash":"5ed00789cc387d359be7c0d52a632787f060883b","modified":1543412142547},{"_id":"public/2018/03/27/统计好友QQ动态词频/index.html","hash":"8b3d52594163ddd3a0242b84a9f2ae5ab7832c4d","modified":1543412142547},{"_id":"public/2018/03/26/matplotlib画柱状图/index.html","hash":"3c1c1d0bc748647bad7345a75bc4720a5f5298a5","modified":1543412142547},{"_id":"public/2018/03/01/MONGODB的安装与使用/index.html","hash":"40816b60a84b9c2b0fd29140a3af69ed5ee2561b","modified":1543412142547},{"_id":"public/2018/03/01/selenium的使用/index.html","hash":"fae63af16784662decc20cd1e18603cb1c1ab7db","modified":1543412142547},{"_id":"public/2018/02/06/python虚拟环境搭建/index.html","hash":"a1adb9cf8cd4fbe5a8e46d48ce650ecf5fa96be9","modified":1543412142547},{"_id":"public/2018/02/03/git使用/index.html","hash":"e286d72acb98737bb18265e4a0dfd18c7ea8a109","modified":1543412142547},{"_id":"public/2018/01/30/python爬虫/index.html","hash":"7acdd17b0112f36e5f0d0bf5ff97a39c058b82e4","modified":1543412142547},{"_id":"public/2018/01/20/python学习笔记/index.html","hash":"459eee3ac2fdcd8189b9f9bd300703d3d8ec3234","modified":1543412142547},{"_id":"public/2017/12/29/Java利用JDBC连接SQLserver数据库/index.html","hash":"a85b0a8d050652cd6dba7ecb97b089363adf1fc5","modified":1543412142547},{"_id":"public/2017/12/26/php学习笔记/index.html","hash":"77edb892445b58ce7c1f6d1da2f4539c777d8623","modified":1543412142548},{"_id":"public/2017/12/18/JS常见问题及解决办法/index.html","hash":"abf945509a0bf0822b3310f2bef47c3afee0747b","modified":1543412142548},{"_id":"public/2017/12/18/使用Jekyll搭建博客/index.html","hash":"e10105072e4a0a5a43b1b883197728b1d1e965f4","modified":1543412142548},{"_id":"public/2017/12/17/Jekyll安装/index.html","hash":"0754690e579fa8f9be2371a97dcd4abfe868fffb","modified":1543412142548},{"_id":"public/2017/12/16/常用Markdown语法/index.html","hash":"0804c287e35f480da1fcb63a62739c8a0c47b93a","modified":1543412142548},{"_id":"public/categories/爬坑小项目/index.html","hash":"2974810ba5e38a76a2f52c8d053cb38cdf4678fa","modified":1543414726919},{"_id":"public/categories/Java学习笔记/index.html","hash":"990ec5ffede4f9a435776dd2fa6ab5bae7398e6f","modified":1543414726919},{"_id":"public/categories/python学习笔记/index.html","hash":"d026d0a4571ddaaaff0c4750730f543f934592a1","modified":1543414726919},{"_id":"public/categories/Linux系统相关/index.html","hash":"8dfad4e90cddb0add32a3ebd1915446fbdf2e8f1","modified":1543414726920},{"_id":"public/categories/树莓派爬坑系列/index.html","hash":"731f1fc51d4c368374a31876417731b162c53233","modified":1543414726920},{"_id":"public/index.html","hash":"6446d465e2ec8bbd48a27002d6e9ebc2c892fb41","modified":1543414726920},{"_id":"public/page/2/index.html","hash":"c90df4c4c752cde95eaf95bb8bf4e1e07b6f60ab","modified":1543414726920},{"_id":"public/page/3/index.html","hash":"acab03385eb320de247e2378f641f01107c15f16","modified":1543414726920},{"_id":"public/page/4/index.html","hash":"94c9c47f6a5c178f907257909b050fd7b2ea7416","modified":1543414726921},{"_id":"public/tags/Linux/index.html","hash":"f9870cf68f9dfb536ddc64c6823e4a078fca7820","modified":1543414726920},{"_id":"public/tags/python/index.html","hash":"46046f0917b44dc03c3a2c2bf1d31eb2a4abf31b","modified":1543414726920},{"_id":"public/tags/Java/index.html","hash":"db17b367b349d28a22db25722e2599ac661393e9","modified":1543414726920},{"_id":"public/tags/树莓派/index.html","hash":"d706b16ae10eff44abd4bbcecc0355afbfc70740","modified":1543414726920},{"_id":"public/archives/index.html","hash":"7b2715082c4511ed17668a200068ead7529daa37","modified":1543414726917},{"_id":"public/archives/page/2/index.html","hash":"e39f2eca04347f1cf5b4fd3b6efa1a3e4d858e83","modified":1543414726917},{"_id":"public/archives/page/3/index.html","hash":"292aa33f16d4f0e4a320ee42d15c10bced101fca","modified":1543414726918},{"_id":"public/archives/page/4/index.html","hash":"c5c9923ea71a206397bba14db9f6213070ed95ed","modified":1543414726918},{"_id":"public/archives/2017/index.html","hash":"07ba450dd2989e4a877f9cbc4bfa5f0c2af6d525","modified":1543412142548},{"_id":"public/archives/2017/12/index.html","hash":"88c821ec35290f3b4d923e0b06090a8bda0be90e","modified":1543412142548},{"_id":"public/archives/2018/index.html","hash":"eefc40b7240334eb6f0520a00ae24b58a4941213","modified":1543414726918},{"_id":"public/archives/2018/page/2/index.html","hash":"18b9582bbe7838b5417e52238609ce3db6597ac0","modified":1543414726918},{"_id":"public/archives/2018/page/3/index.html","hash":"910c40057db92527d683d78bf552284c8fb08ef0","modified":1543414726918},{"_id":"public/archives/2018/01/index.html","hash":"44034d23c56a389515822e594d74ea2fd18467eb","modified":1543412142549},{"_id":"public/archives/2018/02/index.html","hash":"03f2d4827ffbea2de2169ef98b111893786f2be7","modified":1543412142549},{"_id":"public/archives/2018/03/index.html","hash":"5da2eb477e2f677fa877fae899622cc3e175f8ce","modified":1543412142549},{"_id":"public/archives/2018/06/index.html","hash":"aedb17b74ea7cbc4455be10871862d46d95e68c0","modified":1543412142549},{"_id":"public/archives/2018/08/index.html","hash":"d54bbdb0252eb613dab0bfe3f87e085033927e2c","modified":1543412142549},{"_id":"public/archives/2018/09/index.html","hash":"a81e7b44a9403109e247f95744b11da215be9c27","modified":1543412142549},{"_id":"public/archives/2018/10/index.html","hash":"0016b70416047cdf01e7495bdf3ba4f07461459b","modified":1543414726918},{"_id":"public/archives/2018/11/index.html","hash":"21cf56dc75082eb7cdcfd96027d81dfa1a7ea7a2","modified":1543414726919},{"_id":"public/tags/Android/index.html","hash":"1a239525579d900e89165f7c9c514aa7d51f1e4d","modified":1543414726920},{"_id":"public/2018/11/28/Android初体验-二-常用布局/index.html","hash":"8ab325d0d261bbeb56b182d2bf8154efabbb25f3","modified":1543412142545},{"_id":"public/2018/11/28/Android初体验(一)目录结构及左右/index.html","hash":"2facc1c36cd15d6f3cb7226e6286a9062c0a2c50","modified":1543412142545},{"_id":"public/CNAME","hash":"114d935bb62244d7dc50edf41fa178de5f10ca90","modified":1543411810459},{"_id":"public/favicon.ico","hash":"e0ff7cf3f8ea3f92579339ad26a75fde3fe5fc5f","modified":1543411810459},{"_id":"public/images/AP.png","hash":"8d6476eb9d68e84f7fc77aa1249369bf8ea60628","modified":1543411810459},{"_id":"public/images/arp.png","hash":"3cee9d2bcd0ed9a21e85a5240fb940f169db1ca6","modified":1543411810459},{"_id":"public/images/avatar.png","hash":"c1c17a560d8e399c609ec048d3bb4c540a7f76e0","modified":1543411810460},{"_id":"public/images/date1.png","hash":"a72caaf8babaa3b89d121d53ffcb8d69d67dcae3","modified":1543411810460},{"_id":"public/images/bar1.png","hash":"7dc247d0bd08adcdded86bfcaee3c21a93606f42","modified":1543411810460},{"_id":"public/images/django.jpg","hash":"0b5757618ebb355e4570cb89954b840b6e9cae6d","modified":1543411810460},{"_id":"public/images/jiexi.jpg","hash":"b94db0332a98bf9a124d10171b4b8e75e7f8c768","modified":1543411810460},{"_id":"public/images/route.png","hash":"0d1d4e67a0783b13246d002c0a3ab87e9a9eb783","modified":1543411810461},{"_id":"public/images/title.ico","hash":"34059b52a4ecb4b7dbc60673ce0d1810bf0b2e78","modified":1543411810461},{"_id":"public/images/micro.jpg","hash":"9430cf0ba03d4ac764193b03200d1d2bfad87a34","modified":1543411810461},{"_id":"public/images/vnc1.png","hash":"6d9fec46d43380ec2e0edda775e8c7346bc04978","modified":1543411810461},{"_id":"public/images/weibo.png","hash":"f8e63189fe8a1341abf795819a1bc22f024d6df8","modified":1543411810461},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1543411810461},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1543411810461},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1543411810462},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1543411810462},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1543411810462},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1543411810462},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1543411810462},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1543411810462},{"_id":"public/images/favicon-32x32-next.png","hash":"138afe45be3c1da6f61019df257a6f4ab40c2f5d","modified":1543411810462},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1543411810462},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1543411810462},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543411810462},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1543411810462},{"_id":"public/images/favicon-32x32-next1.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1543411810462},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1543411810462},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1543411810462},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1543411810463},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1543411810463},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1543411810463},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1543411810464},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1543411810464},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1543411810465},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1543411810465},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1543411810465},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1543411810465},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1543411810465},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1543411810465},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1543411810465},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1543411810465},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1543411810465},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1543411810465},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1543411810466},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1543411810466},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1543411810466},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"1bcf74674566a61fe954e374a231011239b8e5e9","modified":1543411810466},{"_id":"public/images/voice.png","hash":"607c0dbcac68d284cd0c51f7dfb860b2a3168839","modified":1543411811964},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1543411811969},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1543411811980},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"422f4c3882cf8366927333081292a9bed6000124","modified":1543411811980},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"55eaeaf5ecda250f5bed80958a05bef13886eee6","modified":1543411811980},{"_id":"public/images/androidAppIndex.png","hash":"9db5c8d3e0072b979264665b73d095977bf84ed0","modified":1543411811981},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1543411811990},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1543411811990},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1543411811990},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1543411811990},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1543411811990},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1543411811990},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1543411811990},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1543411811990},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1543411811990},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1543411811990},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1543411811990},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1543411811990},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1543411811990},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1543411811991},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1543411811991},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1543411811991},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1543411811991},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1543411811991},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1543411811991},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1543411811991},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1543411811992},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1543411811992},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1543411811992},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1543411811992},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1543411811992},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1543411811992},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1543411811992},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1543411811992},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1543411811992},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1543411811992},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1543411811992},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1543411811992},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1543411811992},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1543411811992},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1543411811993},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1543411811993},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1543411811993},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1543411811993},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1543411811993},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1543411811993},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1543411811993},{"_id":"public/css/main.css","hash":"c811065807779dbb9f13eefd2394aeaa70fbd97a","modified":1543411811993},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1543411811993},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1543411811993},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1543411811993},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1543411811993},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1543411811993},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1543411811993},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1543411811994},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1543411811994},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1543411811994},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1543411811994},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1543411811994},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1543411811994},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1543411811994},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1543411811994},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1543411811995},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1543411811995},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1543411811995},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1543411811995},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1543411811995},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1543411811995},{"_id":"public/images/liangdu.png","hash":"6b8217fd9ecdf85b6ec47c51916a2893bdcd0029","modified":1543411811995},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1543411811996},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1543411811997},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1543411811997},{"_id":"public/images/esp8266.png","hash":"516adbfa1b3e9f02e54a23f2c715d075975aaf24","modified":1543411812010},{"_id":"public/assets/algolia/algoliasearch.js","hash":"f34e955c2112cc6a80b48e48dd240a10817069f9","modified":1543411812010},{"_id":"public/images/touchpad.png","hash":"d8127db667ccb380caad18ffcd272f379ef717d9","modified":1543411812207},{"_id":"public/images/defender.png","hash":"8ffa18863d537d611d8ead147cf8c41552ab26d4","modified":1543411812207},{"_id":"public/images/voiceconfig.png","hash":"68173a96737b1f1c70889c5104c6f9679fefcfca","modified":1543411812208},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1543411812246},{"_id":"public/images/finger_gesture.png","hash":"7a0a415da677a3ae623681d3e628b519fbe878c5","modified":1543411812250},{"_id":"public/images/apple_home.png","hash":"968d5a9561bb7e7e0896f8365a9945df2416c016","modified":1543411812282},{"_id":"public/images/clover1.jpg","hash":"f61c6850825cfa9af9510c83241a3744fc27e8f4","modified":1543411812293},{"_id":"source/_posts/.DS_Store","hash":"a7ede00893ea063ba6a2464bd76242da5d7318ba","modified":1543413814545},{"_id":"source/_posts/2017/2017-12-16-常用Markdown语法.md","hash":"43ba05a822cae1fd2f879f958006a3ee9554ccec","modified":1538874656000},{"_id":"source/_posts/2017/2017-12-17-Jekyll安装.md","hash":"2b90bdc3af061474f3aa752acfa86c57904a8190","modified":1538874628000},{"_id":"source/_posts/2017/2017-12-18-使用Jekyll搭建博客.md","hash":"8cc24a933295fcfd67d03024905e419180634591","modified":1538904030000},{"_id":"source/_posts/2017/2017-12-18-JS常见问题及解决办法.md","hash":"c24f52f8392b0797207061ca06e52ad1bd14b59b","modified":1539586422000},{"_id":"source/_posts/2017/2017-12-26-php学习笔记.md","hash":"a410277988aaea0b1401ac5805794f7105ff6362","modified":1538874488000},{"_id":"source/_posts/2018/2018-01-30-python爬虫.md","hash":"b10d972fb7a420bb104790d5922cc35689eaa993","modified":1538874450000},{"_id":"source/_posts/2017/2017-12-29-Java利用JDBC连接SQLserver数据库.md","hash":"8be11f23169325dd3f9ff11670b9d40bf385320d","modified":1538879056000},{"_id":"source/_posts/2018/2018-01-20-python学习笔记.md","hash":"d5d234c51c53226f2e7268b2bb81ce95a7d2576c","modified":1538874456000},{"_id":"source/_posts/2018/2018-02-03-git使用.md","hash":"9b52f3102cfca30dcabf83ddac00f3716e69be74","modified":1542436557773},{"_id":"source/_posts/2018/2018-02-06-python虚拟环境搭建.md","hash":"ec63fe7b24462b4ee85f1901f5744f3f0c9b662e","modified":1538874388000},{"_id":"source/_posts/2018/2018-03-26-matplotlib画柱状图.md","hash":"a196771ea7f2da511bc0b1bc9dcac4ddfcf4c4ba","modified":1538898416000},{"_id":"source/_posts/2018/2018-03-01-selenium的使用.md","hash":"28f09d9d858a86af911d652d88c0b7067757d7fb","modified":1538874348000},{"_id":"source/_posts/2018/2018-03-01-MONGODB的安装与使用.md","hash":"88ad7f8c1245b2b1ff516ce2f4fbfcfbb4a9a534","modified":1538874374000},{"_id":"source/_posts/2018/2018-03-27-统计好友QQ动态词频.md","hash":"186cede9b9bbcc1f0e5aae30ca1da271a3303b59","modified":1538874296000},{"_id":"source/_posts/2018/2018-06-08-Java连接Mysql.md","hash":"3f298d17fd6503df57425f7f2bf8005a6c97a1bd","modified":1538878570000},{"_id":"source/_posts/2018/2018-06-10-Java字符画转换.md","hash":"b553330929aa85fa9c7bef297f075fefc4f937b3","modified":1538874306000},{"_id":"source/_posts/2018/2018-06-18-SSH登录服务器.md","hash":"d35e881287479e96cd550233aad7a9c852032866","modified":1538874182000},{"_id":"source/_posts/2018/2018-08-19-hibernate常见问题.md","hash":"3c63061a0f86a0256a8cd3e87a1e1c7f2d282124","modified":1538874126000},{"_id":"source/_posts/2018/2018-07-29-系统、软件及常用工具.md","hash":"fa17d7aea44da3d559e9e1a47a8dd53ea35880d4","modified":1538874154000},{"_id":"source/_posts/2018/2018-08-19-hibernate的基本使用.md","hash":"c749795017af97df33cb9d7a52f62fa63e07a67e","modified":1538874110000},{"_id":"source/_posts/2018/2018-08-25-python操作excel.md","hash":"3cd08e78593959633060ae90b7f5720c17f6fd84","modified":1538874096000},{"_id":"source/_posts/2018/2018-09-06-使用struts2的拦截器实现权限验证.md","hash":"5247b50b1f1362e5207d3add34e61f4b4742bb1d","modified":1538874074000},{"_id":"source/_posts/2018/2018-09-08-Linux常用操作.md","hash":"9a5c1514334f1cb2aa0ba38a4a0ece60e30d9704","modified":1538874048000},{"_id":"source/_posts/2018/2018-09-16-树莓派爬坑系列（一）电脑连接树莓派.md","hash":"b5d5f9f2d533428ade5789250f34815bba9ba7eb","modified":1538901500000},{"_id":"source/_posts/2018/2018-09-16-树莓派爬坑系列（二）配置WiFi热点.md","hash":"2671d61f378cc3d24cbb293c841451d313a54c36","modified":1538874808000},{"_id":"source/_posts/2018/2018-09-19-树莓派爬坑系列（三）使用USB麦克风进行录音.md","hash":"ab6f234dc01c852ce0038e1ee432f959dcd7e8c6","modified":1538898456000},{"_id":"source/_posts/2018/2018-09-30-树莓派爬坑系列（四）安装浏览器驱动.md","hash":"7136a5fcf2f04165a53461e2ddf12e38e04623d0","modified":1538873960000},{"_id":"source/_posts/2018/2018-10-06-Django框架的快速入门笔记.md","hash":"23dfc6441061d36cbb620239dde1cb2b565cc866","modified":1539523250000},{"_id":"source/_posts/2018/2018-10-06-树莓派爬坑系列（五）使用snowboy做热词唤醒.md","hash":"c352389deeedbe9c4d27c673d898c9fdb3e07509","modified":1538873952000},{"_id":"source/_posts/2018/2018-10-08-树莓派爬坑系列（六）Linux下双网卡上网问题.md","hash":"5cd0161449431d09136e5c2fa5838a87ded5d34f","modified":1539011476000},{"_id":"source/_posts/2018/2018-10-07-hexo入坑小记.md","hash":"74d595d45459e1cb530021f6214e6a43a06452ff","modified":1538916738000},{"_id":"source/_posts/2018/2018-11-17-Git与GitHub.md","hash":"740e47c69716f0ab0ee0719cb7b93b11722713ac","modified":1543395344268},{"_id":"source/_posts/2018/2018-11-28-Android初体验(一)目录结构及左右.md","hash":"8d5e1b6abb56261f63f73b804c4d8bd03e1f5f2f","modified":1543412435368},{"_id":"source/_posts/2018/2018-11-08-黑苹果折腾手记.md","hash":"f83332404d0233131e0d7efc21fc1e6dc8c59a4d","modified":1542684065730},{"_id":"source/_posts/2018/2018-11-28-Android初体验-二-常用布局.md","hash":"7de6d3529916f352dc0f5944183a6cbbf9d54e5f","modified":1543412501406},{"_id":"public/2018/11/28/2018-2018-11-28-Android初体验-二-常用布局/index.html","hash":"a81ed2df56d1cfa0aed4ac12d3ce8e694dea0e7d","modified":1543414726913},{"_id":"public/2018/11/28/2018-2018-11-28-Android初体验-一-目录结构及左右/index.html","hash":"60a72fc9109450960e9f833fbbae7187cd8057fc","modified":1543414726913},{"_id":"public/2018/11/17/2018-2018-11-17-Git与GitHub/index.html","hash":"ce451ce384652189de01b65bd76594086307441d","modified":1543414726913},{"_id":"public/2018/11/05/2018-2018-11-08-黑苹果折腾手记/index.html","hash":"e9b741b796a30ccf304eba582296ffd3a7cb7c18","modified":1543414726913},{"_id":"public/2018/11/04/2018-2018-08-19-hibernate常见问题/index.html","hash":"ad6ca0816343a8b55442f8f939c07af302e86dc0","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-10-06-树莓派爬坑系列（五）使用snowboy做热词唤醒/index.html","hash":"ac664b39c73d82a4819e86914f12e9d6c9b9c486","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-01-30-python爬虫/index.html","hash":"f71ec6d1ab4eeecccb15c5ffdde94436a447baf6","modified":1543414726913},{"_id":"public/2018/11/04/2018-2018-01-20-python学习笔记/index.html","hash":"6cc45a8feaed58ff60286cae44f5031db0df2ee6","modified":1543414726913},{"_id":"public/2018/11/04/2018-2018-02-03-git使用/index.html","hash":"377585b699e87162ffbe48b46d340fd1d85154f7","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-02-06-python虚拟环境搭建/index.html","hash":"5671be5c70edea1d1cdd4aa492a779596b62424f","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-03-26-matplotlib画柱状图/index.html","hash":"6b506f45f740ffbb692d180f1c7d83a530894b9d","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-03-01-selenium的使用/index.html","hash":"148a1c86d626aa6ec022e659cdb072d4b783cd19","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-03-01-MONGODB的安装与使用/index.html","hash":"1f94ce941060ce5165242cd8bfe03b1f010d88c7","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-03-27-统计好友QQ动态词频/index.html","hash":"0353de21d87830bcf591633ab5681a9536989fa0","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-06-08-Java连接Mysql/index.html","hash":"396644aed7d71d1a0d07393be5a72942d5d277e0","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-06-10-Java字符画转换/index.html","hash":"31068aae231ce6988b8d5b2c93cbd14f68a8e915","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-06-18-SSH登录服务器/index.html","hash":"37d3cb3ec6690850140a0ef8841f76fb3a822309","modified":1543414726914},{"_id":"public/2018/11/04/2018-2018-10-06-Django框架的快速入门笔记/index.html","hash":"5de0fa1102e49cdd5ee1af1669aba681de542aad","modified":1543414726916},{"_id":"public/2018/11/04/2018-2018-07-29-系统、软件及常用工具/index.html","hash":"1309c05bd57921563ddf0ae72dd767f407ed550b","modified":1543414726913},{"_id":"public/2018/11/04/2018-2018-08-19-hibernate的基本使用/index.html","hash":"2c0644f6efe8ff08f88093b7d3e0a2a5e9288eed","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-09-08-Linux常用操作/index.html","hash":"6cffd5d5661f8a303f29fbdb2ef325a0735a8dbb","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-08-25-python操作excel/index.html","hash":"01479a1c4741871eed0894a78571656ab8fbf925","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-09-06-使用struts2的拦截器实现权限验证/index.html","hash":"a85050d09ff236bf6dc53344988e844be2709b5e","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-09-16-树莓派爬坑系列（二）配置WiFi热点/index.html","hash":"123f79fb8406f113c69780dfa1ef2ea90ed3ddae","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-09-16-树莓派爬坑系列（一）电脑连接树莓派/index.html","hash":"9555cc4edb7ea711c219d708db88d28dc692f856","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-09-19-树莓派爬坑系列（三）使用USB麦克风进行录音/index.html","hash":"a774971ece15ad953c28c912db216501de308ee7","modified":1543414726915},{"_id":"public/2018/11/04/2018-2018-09-30-树莓派爬坑系列（四）安装浏览器驱动/index.html","hash":"d202e5b2c3fe41a193a785eb3b031f55a47c4dca","modified":1543414726916},{"_id":"public/2018/11/04/2017-2017-12-17-Jekyll安装/index.html","hash":"faf56d613f738d892c11f535bafca43799eb9a32","modified":1543414726916},{"_id":"public/2018/11/04/2017-2017-12-29-Java利用JDBC连接SQLserver数据库/index.html","hash":"742d017e2f9d9fda13849c786572913150d90c27","modified":1543414726916},{"_id":"public/2018/11/04/2017-2017-12-26-php学习笔记/index.html","hash":"17c874d8fde7155f6649a077a704e200138d88e6","modified":1543414726916},{"_id":"public/2018/11/04/2017-2017-12-18-JS常见问题及解决办法/index.html","hash":"113aa008b7aa774806b2cfac785b432d8b512115","modified":1543414726916},{"_id":"public/2018/11/04/2017-2017-12-18-使用Jekyll搭建博客/index.html","hash":"d742fd3d32e156e0e3026c89aaa010f7c098ae0f","modified":1543414726917},{"_id":"public/2018/11/04/2017-2017-12-16-常用Markdown语法/index.html","hash":"1e756fdb5e6d56e4364bd63164b46bdf5a7ff6ac","modified":1543414726917},{"_id":"public/2018/10/08/2018-2018-10-08-树莓派爬坑系列（六）Linux下双网卡上网问题/index.html","hash":"e63c5f5414b3a9dada04b9369a8799d444741f11","modified":1543414726917},{"_id":"public/2018/10/07/2018-2018-10-07-hexo入坑小记/index.html","hash":"32ccba68c4679ff37d9e0d2abff8d05d0b09456f","modified":1543414726917},{"_id":"public/archives/2018/page/4/index.html","hash":"5a7e7875738e35c9ee0ed0e79a0a54ed12d26c8c","modified":1543414726918},{"_id":"public/archives/2018/11/page/2/index.html","hash":"1e68e2aee7594c1591f2f2b42f06e495811d581f","modified":1543414726919},{"_id":"public/archives/2018/11/page/3/index.html","hash":"5eb0346e90637c64173666a495897222c6710298","modified":1543414726919},{"_id":"public/archives/2018/11/page/4/index.html","hash":"cf41d115884cd2961afef4dec633cc6ee3e7813b","modified":1543414726919},{"_id":"source/_posts/2018/2018-11-28-test.md","hash":"cae5b400b7a5ab3cc85f4a2217fb05603ca0c57b","modified":1543414648836},{"_id":"public/2018/11/28/2018-2018-11-28-test/index.html","hash":"3da742bd5fd4b793956191f7a6e510cb60fde5ca","modified":1543414726933}],"Category":[{"name":"常用的命令行工具","_id":"cjp17j8g1000331fo72v8gprd"},{"name":"其它","_id":"cjp17j8g7000831foqbmkoeer"},{"name":"爬坑小项目","_id":"cjp17j8ga000e31fo41r545fe"},{"name":"Java学习笔记","_id":"cjp17j8ge000k31fooe14e9mv"},{"name":"网页编程常见问题","_id":"cjp17j8gj000p31fo83pzalbt"},{"name":"python学习笔记","_id":"cjp17j8gn000x31fod0lus1xp"},{"name":"php学习笔记","_id":"cjp17j8gz001g31foojik1ix3"},{"name":"Linux系统相关","_id":"cjp17j8h6001v31folp7jlcyu"},{"name":"树莓派爬坑系列","_id":"cjp17j8i4002n31foxbhnq79t"},{"name":"博客建站","_id":"cjp17j8ie003b31fo01of0inx"},{"name":"操作系统","_id":"cjp17j8ie003f31fomjuy76zo"}],"Data":[],"Page":[{"title":"分类","date":"2018-10-07T00:53:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-10-07 08:53:37\ntype: \"categories\"\n---\n","updated":"2018-10-07T00:55:08.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjp17j8fw000131fog60muxi2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-10-07T00:19:33.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-10-07 08:19:33\ntype: \"tags\"\n---\n","updated":"2018-10-07T00:20:44.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjp17j8pe005n31fodb3m1qyq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"posts","title":"常用Markdown语法","_content":"## <span>一、标题</span>\n语法：\n```\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n```\n   \n## <span>二、列表</span>\n无序列表：\n```\n* one\n* two\n* three\n```\n有序列表：\n```\n1. one\n2. two\n3. three\n```\n\n## <span>三、代码</span>\n一段代码:写在两个反引号\\` this is a code segement\\`之间    \n多段代码：写在6个反引号之间\\`\\`\\`this is a code segement\\`\\`\\`效果如图：\n```\nfist code\nsecond code\nthird code\n```\n\n## <span>四、链接</span>\n语法：`[点击文字](这里放链接\"这里放鼠标停留的显示文字\")`\n```\n[an example](http://example.com/ \"Title\").\n```\n效果如图：\n[an example](http://example.com/ \"Title\").\n## <span>五、图片</span>\n语法：！`[加载失败时显示的文字](图片链接\"hover文字\")`\n```\n![图片](http://img3.imgtn.bdimg.com/it/u=2386421788,3830689113&fm=27&gp=0.jpg \"图片测试\")\n```\n![图片](http://img3.imgtn.bdimg.com/it/u=2386421788,3830689113&fm=27&gp=0.jpg \"图片测试\")\n## <span>几点注意事项</span>\n　　1.markdown标记与文章内容要用空格隔开，否则不解析。   \n　　2.markdown语法兼容HTML,所以可以在md文件中用HTML标签。   \n　　3.图片只支持网络地址。  \n　　4.首行缩进没有专门的符号，可以将输入法切换到全角然后按两次空格实现缩进。  \n　　5.换行，段落后面敲两次以上空格回车。\n\t6.代码高亮[使用highlightjs](https://highlightjs.org/usage/)\n\n","source":"_posts/2017/2017-12-16-常用Markdown语法.md","raw":"---\nlayout: posts\ntitle: 常用Markdown语法\ncategories: 其它\ntags:\n    - Markdown\n---\n## <span>一、标题</span>\n语法：\n```\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n```\n   \n## <span>二、列表</span>\n无序列表：\n```\n* one\n* two\n* three\n```\n有序列表：\n```\n1. one\n2. two\n3. three\n```\n\n## <span>三、代码</span>\n一段代码:写在两个反引号\\` this is a code segement\\`之间    \n多段代码：写在6个反引号之间\\`\\`\\`this is a code segement\\`\\`\\`效果如图：\n```\nfist code\nsecond code\nthird code\n```\n\n## <span>四、链接</span>\n语法：`[点击文字](这里放链接\"这里放鼠标停留的显示文字\")`\n```\n[an example](http://example.com/ \"Title\").\n```\n效果如图：\n[an example](http://example.com/ \"Title\").\n## <span>五、图片</span>\n语法：！`[加载失败时显示的文字](图片链接\"hover文字\")`\n```\n![图片](http://img3.imgtn.bdimg.com/it/u=2386421788,3830689113&fm=27&gp=0.jpg \"图片测试\")\n```\n![图片](http://img3.imgtn.bdimg.com/it/u=2386421788,3830689113&fm=27&gp=0.jpg \"图片测试\")\n## <span>几点注意事项</span>\n　　1.markdown标记与文章内容要用空格隔开，否则不解析。   \n　　2.markdown语法兼容HTML,所以可以在md文件中用HTML标签。   \n　　3.图片只支持网络地址。  \n　　4.首行缩进没有专门的符号，可以将输入法切换到全角然后按两次空格实现缩进。  \n　　5.换行，段落后面敲两次以上空格回车。\n\t6.代码高亮[使用highlightjs](https://highlightjs.org/usage/)\n\n","slug":"2017-2017-12-16-常用Markdown语法","published":1,"date":"2018-11-04T03:19:28.000Z","updated":"2018-10-07T01:10:56.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u8t0000d3fo2clcz7l0","content":"<h2 id=\"一、标题\"><a href=\"#一、标题\" class=\"headerlink\" title=\"一、标题\"></a><span>一、标题</span></h2><p>语法：<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是一级标题</span><br><span class=\"line\">## 这是二级标题</span><br><span class=\"line\">### 这是三级标题</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、列表\"><a href=\"#二、列表\" class=\"headerlink\" title=\"二、列表\"></a><span>二、列表</span></h2><p>无序列表：<br><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">* </span>one</span><br><span class=\"line\"><span class=\"bullet\">* </span>two</span><br><span class=\"line\"><span class=\"bullet\">* </span>three</span><br></pre></td></tr></table></figure></p>\n<p>有序列表：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>one</span><br><span class=\"line\"><span class=\"bullet\">2. </span>two</span><br><span class=\"line\"><span class=\"bullet\">3. </span>three</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、代码\"><a href=\"#三、代码\" class=\"headerlink\" title=\"三、代码\"></a><span>三、代码</span></h2><p>一段代码:写在两个反引号` this is a code segement`之间<br>多段代码：写在6个反引号之间```this is a code segement```效果如图：<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fist <span class=\"built_in\">code</span></span><br><span class=\"line\"><span class=\"built_in\">second</span> <span class=\"built_in\">code</span></span><br><span class=\"line\">third <span class=\"built_in\">code</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、链接\"><a href=\"#四、链接\" class=\"headerlink\" title=\"四、链接\"></a><span>四、链接</span></h2><p>语法：<code>[点击文字](这里放链接&quot;这里放鼠标停留的显示文字&quot;)</code><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">an example</span>](<span class=\"link\">http://example.com/ \"Title\"</span>).</span><br></pre></td></tr></table></figure></p>\n<p>效果如图：<br><a href=\"http://example.com/\" title=\"Title\" target=\"_blank\" rel=\"noopener\">an example</a>.</p>\n<h2 id=\"五、图片\"><a href=\"#五、图片\" class=\"headerlink\" title=\"五、图片\"></a><span>五、图片</span></h2><p>语法：！<code>[加载失败时显示的文字](图片链接&quot;hover文字&quot;)</code><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片</span>](<span class=\"link\">http://img3.imgtn.bdimg.com/it/u=2386421788,3830689113&amp;fm=27&amp;gp=0.jpg \"图片测试\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img3.imgtn.bdimg.com/it/u=2386421788,3830689113&amp;fm=27&amp;gp=0.jpg\" alt=\"图片\" title=\"图片测试\"></p>\n<h2 id=\"几点注意事项\"><a href=\"#几点注意事项\" class=\"headerlink\" title=\"几点注意事项\"></a><span>几点注意事项</span></h2><p>　　1.markdown标记与文章内容要用空格隔开，否则不解析。<br>　　2.markdown语法兼容HTML,所以可以在md文件中用HTML标签。<br>　　3.图片只支持网络地址。<br>　　4.首行缩进没有专门的符号，可以将输入法切换到全角然后按两次空格实现缩进。<br>　　5.换行，段落后面敲两次以上空格回车。<br>    6.代码高亮<a href=\"https://highlightjs.org/usage/\" target=\"_blank\" rel=\"noopener\">使用highlightjs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、标题\"><a href=\"#一、标题\" class=\"headerlink\" title=\"一、标题\"></a><span>一、标题</span></h2><p>语法：<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是一级标题</span><br><span class=\"line\">## 这是二级标题</span><br><span class=\"line\">### 这是三级标题</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、列表\"><a href=\"#二、列表\" class=\"headerlink\" title=\"二、列表\"></a><span>二、列表</span></h2><p>无序列表：<br><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">* </span>one</span><br><span class=\"line\"><span class=\"bullet\">* </span>two</span><br><span class=\"line\"><span class=\"bullet\">* </span>three</span><br></pre></td></tr></table></figure></p>\n<p>有序列表：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>one</span><br><span class=\"line\"><span class=\"bullet\">2. </span>two</span><br><span class=\"line\"><span class=\"bullet\">3. </span>three</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三、代码\"><a href=\"#三、代码\" class=\"headerlink\" title=\"三、代码\"></a><span>三、代码</span></h2><p>一段代码:写在两个反引号` this is a code segement`之间<br>多段代码：写在6个反引号之间```this is a code segement```效果如图：<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fist <span class=\"built_in\">code</span></span><br><span class=\"line\"><span class=\"built_in\">second</span> <span class=\"built_in\">code</span></span><br><span class=\"line\">third <span class=\"built_in\">code</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、链接\"><a href=\"#四、链接\" class=\"headerlink\" title=\"四、链接\"></a><span>四、链接</span></h2><p>语法：<code>[点击文字](这里放链接&quot;这里放鼠标停留的显示文字&quot;)</code><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">an example</span>](<span class=\"link\">http://example.com/ \"Title\"</span>).</span><br></pre></td></tr></table></figure></p>\n<p>效果如图：<br><a href=\"http://example.com/\" title=\"Title\" target=\"_blank\" rel=\"noopener\">an example</a>.</p>\n<h2 id=\"五、图片\"><a href=\"#五、图片\" class=\"headerlink\" title=\"五、图片\"></a><span>五、图片</span></h2><p>语法：！<code>[加载失败时显示的文字](图片链接&quot;hover文字&quot;)</code><br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片</span>](<span class=\"link\">http://img3.imgtn.bdimg.com/it/u=2386421788,3830689113&amp;fm=27&amp;gp=0.jpg \"图片测试\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img3.imgtn.bdimg.com/it/u=2386421788,3830689113&amp;fm=27&amp;gp=0.jpg\" alt=\"图片\" title=\"图片测试\"></p>\n<h2 id=\"几点注意事项\"><a href=\"#几点注意事项\" class=\"headerlink\" title=\"几点注意事项\"></a><span>几点注意事项</span></h2><p>　　1.markdown标记与文章内容要用空格隔开，否则不解析。<br>　　2.markdown语法兼容HTML,所以可以在md文件中用HTML标签。<br>　　3.图片只支持网络地址。<br>　　4.首行缩进没有专门的符号，可以将输入法切换到全角然后按两次空格实现缩进。<br>　　5.换行，段落后面敲两次以上空格回车。<br>    6.代码高亮<a href=\"https://highlightjs.org/usage/\" target=\"_blank\" rel=\"noopener\">使用highlightjs</a></p>\n"},{"layout":"posts","title":"Windows上安装Jekyll","_content":"　　简单三步实现本地博客可进行Jekyll解析，从而可以在本地预览博客。\n### 一、安装Ruby  \n　　1. 前往[Ruby官网](http://rubyinstaller.org/downloads/)  \n　　2. 下载与自己电脑对应的版本  \n　　3. 下载后点击安装。  \n　　　* 安装的路劲不要使用有空格的文件夹。  \n　　　* 勾选\"Add Ruby excutables to your PATH\"。  \n　　4. 打开cmd检测是否安装成功。  \n```\nruby -v\n```\n输出示例：\n```    \nruby 2.4.2p198 (2017-09-14 revision 59899) [x64-mingw32]\n```\t\t\n### 二、安装Jekyll  \n　　1. 确保gem已经正确安装cmd输入以下内容。\n```\ngem -v\n```\n输出示例：\n```\n2.6.13\n```\n　　2. 安装Jekyll gem\n```\ngem install jekyll\n```\n### 三、启动Jekyll\n　　1. 找到项目文件夹    \n　　2. 按住shift键点击右键选择\"在此处打开命令窗口\"(也可以直接打开cmd切换到该目录)   \n　　3. 输入以下内容就可以在localhost:4000上浏览你的博客了  \n```\njekyll serve\n```\n\n\n\n\n","source":"_posts/2017/2017-12-17-Jekyll安装.md","raw":"---\nlayout: posts\ntitle: Windows上安装Jekyll\ncategories: 常用的命令行工具\ntags: \n    - Jekyll安装\n---\n　　简单三步实现本地博客可进行Jekyll解析，从而可以在本地预览博客。\n### 一、安装Ruby  \n　　1. 前往[Ruby官网](http://rubyinstaller.org/downloads/)  \n　　2. 下载与自己电脑对应的版本  \n　　3. 下载后点击安装。  \n　　　* 安装的路劲不要使用有空格的文件夹。  \n　　　* 勾选\"Add Ruby excutables to your PATH\"。  \n　　4. 打开cmd检测是否安装成功。  \n```\nruby -v\n```\n输出示例：\n```    \nruby 2.4.2p198 (2017-09-14 revision 59899) [x64-mingw32]\n```\t\t\n### 二、安装Jekyll  \n　　1. 确保gem已经正确安装cmd输入以下内容。\n```\ngem -v\n```\n输出示例：\n```\n2.6.13\n```\n　　2. 安装Jekyll gem\n```\ngem install jekyll\n```\n### 三、启动Jekyll\n　　1. 找到项目文件夹    \n　　2. 按住shift键点击右键选择\"在此处打开命令窗口\"(也可以直接打开cmd切换到该目录)   \n　　3. 输入以下内容就可以在localhost:4000上浏览你的博客了  \n```\njekyll serve\n```\n\n\n\n\n","slug":"2017-2017-12-17-Jekyll安装","published":1,"date":"2018-11-04T03:19:28.000Z","updated":"2018-10-07T01:10:28.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u8x0001d3fokxlfkudc","content":"<p>　　简单三步实现本地博客可进行Jekyll解析，从而可以在本地预览博客。</p>\n<h3 id=\"一、安装Ruby\"><a href=\"#一、安装Ruby\" class=\"headerlink\" title=\"一、安装Ruby\"></a>一、安装Ruby</h3><p>　　1. 前往<a href=\"http://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">Ruby官网</a><br>　　2. 下载与自己电脑对应的版本<br>　　3. 下载后点击安装。<br>　　　<em> 安装的路劲不要使用有空格的文件夹。  \n　　　</em> 勾选”Add Ruby excutables to your PATH”。<br>　　4. 打开cmd检测是否安装成功。<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ruby -v</span></span><br></pre></td></tr></table></figure></p>\n<p>输出示例：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby <span class=\"number\">2.4</span><span class=\"number\">.2</span>p198 (<span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-14</span> revision <span class=\"number\">59899</span>) [x64-mingw32]</span><br><span class=\"line\">```\t\t</span><br><span class=\"line\">### 二、安装Jekyll  </span><br><span class=\"line\">　　<span class=\"number\">1.</span> 确保gem已经正确安装cmd输入以下内容。</span><br></pre></td></tr></table></figure></p>\n<p>gem -v<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出示例：</span><br></pre></td></tr></table></figure></p>\n<p>2.6.13<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"number\">2.</span> 安装Jekyll gem</span><br></pre></td></tr></table></figure></p>\n<p>gem install jekyll<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 三、启动Jekyll</span><br><span class=\"line\">　　<span class=\"number\">1.</span> 找到项目文件夹    </span><br><span class=\"line\">　　<span class=\"number\">2.</span> 按住shift键点击右键选择<span class=\"string\">\"在此处打开命令窗口\"</span>(也可以直接打开cmd切换到该目录)   </span><br><span class=\"line\">　　<span class=\"number\">3.</span> 输入以下内容就可以在localhost:<span class=\"number\">4000</span>上浏览你的博客了</span><br></pre></td></tr></table></figure></p>\n<p>jekyll serve<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>　　简单三步实现本地博客可进行Jekyll解析，从而可以在本地预览博客。</p>\n<h3 id=\"一、安装Ruby\"><a href=\"#一、安装Ruby\" class=\"headerlink\" title=\"一、安装Ruby\"></a>一、安装Ruby</h3><p>　　1. 前往<a href=\"http://rubyinstaller.org/downloads/\" target=\"_blank\" rel=\"noopener\">Ruby官网</a><br>　　2. 下载与自己电脑对应的版本<br>　　3. 下载后点击安装。<br>　　　<em> 安装的路劲不要使用有空格的文件夹。  \n　　　</em> 勾选”Add Ruby excutables to your PATH”。<br>　　4. 打开cmd检测是否安装成功。<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ruby -v</span></span><br></pre></td></tr></table></figure></p>\n<p>输出示例：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby <span class=\"number\">2.4</span><span class=\"number\">.2</span>p198 (<span class=\"number\">2017</span><span class=\"number\">-09</span><span class=\"number\">-14</span> revision <span class=\"number\">59899</span>) [x64-mingw32]</span><br><span class=\"line\">```\t\t</span><br><span class=\"line\">### 二、安装Jekyll  </span><br><span class=\"line\">　　<span class=\"number\">1.</span> 确保gem已经正确安装cmd输入以下内容。</span><br></pre></td></tr></table></figure></p>\n<p>gem -v<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出示例：</span><br></pre></td></tr></table></figure></p>\n<p>2.6.13<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"number\">2.</span> 安装Jekyll gem</span><br></pre></td></tr></table></figure></p>\n<p>gem install jekyll<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 三、启动Jekyll</span><br><span class=\"line\">　　<span class=\"number\">1.</span> 找到项目文件夹    </span><br><span class=\"line\">　　<span class=\"number\">2.</span> 按住shift键点击右键选择<span class=\"string\">\"在此处打开命令窗口\"</span>(也可以直接打开cmd切换到该目录)   </span><br><span class=\"line\">　　<span class=\"number\">3.</span> 输入以下内容就可以在localhost:<span class=\"number\">4000</span>上浏览你的博客了</span><br></pre></td></tr></table></figure></p>\n<p>jekyll serve<br><code>`</code></p>\n"},{"layout":"posts","title":"利用Jekyll搭建自己的GitHub博客","_content":"## 写在前面  \n　　GitHub提供一种功能叫做GitHub Pages,可以利用它来搭建自己博客或者网站(只支持静态站点的搭建)。不仅如此，GitHub还\n支持Jekyll解析。所以只要按照Jekyll的规则来建立文件，然后把它push到GitHub上就能搭建出自己的博客。\n当然，最方便的方式就是到[Jekyll Themes](http://jekyllthemes.org/)clone别人做好的主题。但如果有一定的前端知识，也可以自己一行一行代码敲出自己独一无二的博客来。下面\n主要说的是用Jekyll搭建博客的总体思路。  \n## 开始搭建　　\n### 一、到GitHub官网注册一个账号  \n### 二、点击绿色的`new repository`按钮新建一个代码仓库，这里假定新建了一个叫做`blogDemo`的仓库。  \n### 三、把仓库克隆到本地进行编辑  \n### 四、创建配置文件\n　　在项目的根目录下创建一个名为`_config.yml`的文件，打开输入以下内容：  \n```\nbaseurl:/blogDemo\n```\n<!-- more -->\n### 五、创建模板文件。  \n　　1. 在项目根目录下创建一个`_layouts`的目录，用来存放模板文件。  \n　　2. 进入该目录，创建一个`posts.html`文件，用来作为博客文章的模板文件。并在该文件中输入以下内容。\n```\n`<!DOCTYPE html>`  \n`<html>`  \n`<head>`  \n　　`<meta http-equiv=\"content-type\" content=\"text/html;` `charset=utf-8\" />`  \n　　`<title>`{\\{page.title}}`</title>`   \n`</head>`   \n`<body>`   \n　　{\\{content}}   \n`</body>`   \n`</html>`   \n```\n\nJekyll使用Liquid模板语言，\\{\\{page.title\\}\\}表示文章标题，\\{\\{content\\}\\}表示文章内容。这只是一个比较简单的文章展示页举例，具体要做成什么样式还要自己进一步敲代码完成。  \n### 六、创建文章\n　　1. 回到项目根目录，创建一个`_posts`目录用于存放博客文章。  \n　　2. 进入该目录，创建一篇文章。文章可以是用HTML文件，也可以是markdown文件。但文件名有严格要求必须是`年-月-日-标题.后缀名`。比如这里新建一个`2017-12-18-Hello-World.md`的文件。  \n　　3. 在该文件中填入以下内容。  \n```\n---\nlayouts: posts\ntitle: Hello-World  \n---\n<h2>{{ page.title }}</h2>   \n<p>我的第一篇文章</p> \n<p>{{ post.date | date:'%Y-%m-%d' }}</p>  \n```\n　　yaml文件头：每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线\"---\"，标记开始和结束，里面每一行设置一种元数据。三根短划线前面，是不能有空格的！需要注意的是，yaml文件头中变量与变量值之间要用空格隔开,如`title: Hello-World`\n冒号后面有空格。\n\n　　\"layout: posts\"，表示该文章的模板使用_layouts目录下的posts.html文件；  \n　　\"title: 你好，世界\"，表示该文章的标题是\"你好，世界\"，如果不设置这个值，默认使用嵌入文件名的标题，即\"Hello World\".  \n　　在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。\\{\\{ page.title \\}\\}就是文件头中设置的\"你好，世界\"，\\{\\{ page.date }}则是嵌入文件名的日期（也可以在文件头重新定义date变量），\"| date:'%Y-%m-%d' \"表示将page.date变量输出格式为：年-月-日。  \n### 七、创建博客首页\n　　回到根目录，创建一个index.html的文件，输入以下内容。  \n```\n---\nlayout: posts\ntitle: 我的Blog  \n`---`  \n`<h2>`{\\{ page.title }}`</h2>`  \n`<p>最新文章</p>`  \n`<ul>`  \n　　`{`% for post in site.posts %}  \n　　　　`<li>`{\\{ post.date | date_to_string }}   \n\t`<a href=\"`{\\{ site.baseurl }}{\\{ post.url }}`\">`{\\{ post.title }}`</a></li>`  \n　　`{`% endfor %}     \n`</ul>`  \n```\n 　　它的Yaml文件头表示，首页使用posts模板，标题为\"我的Blog\"。然后，首页使用了`{`% for post in site.posts %}，表示对所有帖子进行一个遍历。这里要注意的是，Liquid模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于\\{\\{site.baseurl\\}\\}就是_config.yml中设置的baseurl变量。 首页模板也可以自己在`_layouts`中自己定义喜欢的布局，然后再引入进来，这里只是一个简单的举例。  \n 　　至此，一个简单的博客就搭建完成了。整个项目的目录结构如下：  \n```\n /blogDemo\n 　　|--_config.yml  \n 　　|--_layouts  \n 　　|　　|--posts.html\n 　　|--_posts  \n 　　|　　|--2017-12-19-HelloWord.html\n 　　|--index.html\n```\n### 八、把代码上传到GitHub仓库\n　　1. 上传完文件后，到GitHub官网进入该项目找到`settings`这个选项。  \n　　2. 往下拉找到`GitHub Pages`，把`source`选为`master branch`  \n　　3. 稍等一会就通过https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。\n　　4. \n### 九、域名解析到博客\n　　1. 在项目根目录下新建一个名为`CNAME`的文件，文件内容为你的域名如：\n```\nwww.example.com\n```\n\n   2. 进入域名管理，在域名解析里添加如下两条记录  \n![图片]({{ site.baseurl }}/assets/jiexi.jpg)   \n　　　* 主机记录：@；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。  \n　　　* 主机记录：www；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。  \n　　3. 需要等待一会才能通过域名访问。   \n\n## 参考链接：  \n#### [Jekyll官方文档](https://www.jekyll.com.cn/)  \n#### [GitHub Pages tutorial](https://pages.github.com/)\n\n\n\n\n","source":"_posts/2017/2017-12-18-使用Jekyll搭建博客.md","raw":"---\nlayout: posts\ntitle: 利用Jekyll搭建自己的GitHub博客\ncategories: 爬坑小项目\ntags: \n    - Jekyll\n    - 搭建博客\n---\n## 写在前面  \n　　GitHub提供一种功能叫做GitHub Pages,可以利用它来搭建自己博客或者网站(只支持静态站点的搭建)。不仅如此，GitHub还\n支持Jekyll解析。所以只要按照Jekyll的规则来建立文件，然后把它push到GitHub上就能搭建出自己的博客。\n当然，最方便的方式就是到[Jekyll Themes](http://jekyllthemes.org/)clone别人做好的主题。但如果有一定的前端知识，也可以自己一行一行代码敲出自己独一无二的博客来。下面\n主要说的是用Jekyll搭建博客的总体思路。  \n## 开始搭建　　\n### 一、到GitHub官网注册一个账号  \n### 二、点击绿色的`new repository`按钮新建一个代码仓库，这里假定新建了一个叫做`blogDemo`的仓库。  \n### 三、把仓库克隆到本地进行编辑  \n### 四、创建配置文件\n　　在项目的根目录下创建一个名为`_config.yml`的文件，打开输入以下内容：  \n```\nbaseurl:/blogDemo\n```\n<!-- more -->\n### 五、创建模板文件。  \n　　1. 在项目根目录下创建一个`_layouts`的目录，用来存放模板文件。  \n　　2. 进入该目录，创建一个`posts.html`文件，用来作为博客文章的模板文件。并在该文件中输入以下内容。\n```\n`<!DOCTYPE html>`  \n`<html>`  \n`<head>`  \n　　`<meta http-equiv=\"content-type\" content=\"text/html;` `charset=utf-8\" />`  \n　　`<title>`{\\{page.title}}`</title>`   \n`</head>`   \n`<body>`   \n　　{\\{content}}   \n`</body>`   \n`</html>`   \n```\n\nJekyll使用Liquid模板语言，\\{\\{page.title\\}\\}表示文章标题，\\{\\{content\\}\\}表示文章内容。这只是一个比较简单的文章展示页举例，具体要做成什么样式还要自己进一步敲代码完成。  \n### 六、创建文章\n　　1. 回到项目根目录，创建一个`_posts`目录用于存放博客文章。  \n　　2. 进入该目录，创建一篇文章。文章可以是用HTML文件，也可以是markdown文件。但文件名有严格要求必须是`年-月-日-标题.后缀名`。比如这里新建一个`2017-12-18-Hello-World.md`的文件。  \n　　3. 在该文件中填入以下内容。  \n```\n---\nlayouts: posts\ntitle: Hello-World  \n---\n<h2>{{ page.title }}</h2>   \n<p>我的第一篇文章</p> \n<p>{{ post.date | date:'%Y-%m-%d' }}</p>  \n```\n　　yaml文件头：每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线\"---\"，标记开始和结束，里面每一行设置一种元数据。三根短划线前面，是不能有空格的！需要注意的是，yaml文件头中变量与变量值之间要用空格隔开,如`title: Hello-World`\n冒号后面有空格。\n\n　　\"layout: posts\"，表示该文章的模板使用_layouts目录下的posts.html文件；  \n　　\"title: 你好，世界\"，表示该文章的标题是\"你好，世界\"，如果不设置这个值，默认使用嵌入文件名的标题，即\"Hello World\".  \n　　在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。\\{\\{ page.title \\}\\}就是文件头中设置的\"你好，世界\"，\\{\\{ page.date }}则是嵌入文件名的日期（也可以在文件头重新定义date变量），\"| date:'%Y-%m-%d' \"表示将page.date变量输出格式为：年-月-日。  \n### 七、创建博客首页\n　　回到根目录，创建一个index.html的文件，输入以下内容。  \n```\n---\nlayout: posts\ntitle: 我的Blog  \n`---`  \n`<h2>`{\\{ page.title }}`</h2>`  \n`<p>最新文章</p>`  \n`<ul>`  \n　　`{`% for post in site.posts %}  \n　　　　`<li>`{\\{ post.date | date_to_string }}   \n\t`<a href=\"`{\\{ site.baseurl }}{\\{ post.url }}`\">`{\\{ post.title }}`</a></li>`  \n　　`{`% endfor %}     \n`</ul>`  \n```\n 　　它的Yaml文件头表示，首页使用posts模板，标题为\"我的Blog\"。然后，首页使用了`{`% for post in site.posts %}，表示对所有帖子进行一个遍历。这里要注意的是，Liquid模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于\\{\\{site.baseurl\\}\\}就是_config.yml中设置的baseurl变量。 首页模板也可以自己在`_layouts`中自己定义喜欢的布局，然后再引入进来，这里只是一个简单的举例。  \n 　　至此，一个简单的博客就搭建完成了。整个项目的目录结构如下：  \n```\n /blogDemo\n 　　|--_config.yml  \n 　　|--_layouts  \n 　　|　　|--posts.html\n 　　|--_posts  \n 　　|　　|--2017-12-19-HelloWord.html\n 　　|--index.html\n```\n### 八、把代码上传到GitHub仓库\n　　1. 上传完文件后，到GitHub官网进入该项目找到`settings`这个选项。  \n　　2. 往下拉找到`GitHub Pages`，把`source`选为`master branch`  \n　　3. 稍等一会就通过https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。\n　　4. \n### 九、域名解析到博客\n　　1. 在项目根目录下新建一个名为`CNAME`的文件，文件内容为你的域名如：\n```\nwww.example.com\n```\n\n   2. 进入域名管理，在域名解析里添加如下两条记录  \n![图片]({{ site.baseurl }}/assets/jiexi.jpg)   \n　　　* 主机记录：@；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。  \n　　　* 主机记录：www；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。  \n　　3. 需要等待一会才能通过域名访问。   \n\n## 参考链接：  \n#### [Jekyll官方文档](https://www.jekyll.com.cn/)  \n#### [GitHub Pages tutorial](https://pages.github.com/)\n\n\n\n\n","slug":"2017-2017-12-18-使用Jekyll搭建博客","published":1,"date":"2018-11-04T03:19:28.000Z","updated":"2018-10-07T09:20:30.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u900003d3fofo1u8hgr","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>　　GitHub提供一种功能叫做GitHub Pages,可以利用它来搭建自己博客或者网站(只支持静态站点的搭建)。不仅如此，GitHub还<br>支持Jekyll解析。所以只要按照Jekyll的规则来建立文件，然后把它push到GitHub上就能搭建出自己的博客。<br>当然，最方便的方式就是到<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll Themes</a>clone别人做好的主题。但如果有一定的前端知识，也可以自己一行一行代码敲出自己独一无二的博客来。下面<br>主要说的是用Jekyll搭建博客的总体思路。  </p>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建　　\"></a>开始搭建　　</h2><h3 id=\"一、到GitHub官网注册一个账号\"><a href=\"#一、到GitHub官网注册一个账号\" class=\"headerlink\" title=\"一、到GitHub官网注册一个账号\"></a>一、到GitHub官网注册一个账号</h3><h3 id=\"二、点击绿色的new-repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\"><a href=\"#二、点击绿色的new-repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\" class=\"headerlink\" title=\"二、点击绿色的new repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\"></a>二、点击绿色的<code>new repository</code>按钮新建一个代码仓库，这里假定新建了一个叫做<code>blogDemo</code>的仓库。</h3><h3 id=\"三、把仓库克隆到本地进行编辑\"><a href=\"#三、把仓库克隆到本地进行编辑\" class=\"headerlink\" title=\"三、把仓库克隆到本地进行编辑\"></a>三、把仓库克隆到本地进行编辑</h3><h3 id=\"四、创建配置文件\"><a href=\"#四、创建配置文件\" class=\"headerlink\" title=\"四、创建配置文件\"></a>四、创建配置文件</h3><p>　　在项目的根目录下创建一个名为<code>_config.yml</code>的文件，打开输入以下内容：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">baseurl:</span>/blogDemo</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"五、创建模板文件。\"><a href=\"#五、创建模板文件。\" class=\"headerlink\" title=\"五、创建模板文件。\"></a>五、创建模板文件。</h3><p>　　1. 在项目根目录下创建一个<code>_layouts</code>的目录，用来存放模板文件。<br>　　2. 进入该目录，创建一个<code>posts.html</code>文件，用来作为博客文章的模板文件。并在该文件中输入以下内容。<br><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;!DOCTYPE html&gt;`  </span><br><span class=\"line\">`&lt;html&gt;`  </span><br><span class=\"line\">`&lt;head&gt;`  </span><br><span class=\"line\">　　`&lt;meta http-equiv=<span class=\"string\">\"content-type\"</span> content=<span class=\"string\">\"text/html;` `charset=utf-8\"</span> /&gt;`  </span><br><span class=\"line\">　　`&lt;title&gt;`&#123;\\&#123;page.title&#125;&#125;`&lt;/title&gt;`   </span><br><span class=\"line\">`&lt;/head&gt;`   </span><br><span class=\"line\">`&lt;body&gt;`   </span><br><span class=\"line\">　　&#123;\\&#123;content&#125;&#125;   </span><br><span class=\"line\">`&lt;/body&gt;`   </span><br><span class=\"line\">`&lt;/html&gt;`</span><br></pre></td></tr></table></figure></p>\n<p>Jekyll使用Liquid模板语言，表示文章标题，</p><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>　　GitHub提供一种功能叫做GitHub Pages,可以利用它来搭建自己博客或者网站(只支持静态站点的搭建)。不仅如此，GitHub还<br>支持Jekyll解析。所以只要按照Jekyll的规则来建立文件，然后把它push到GitHub上就能搭建出自己的博客。<br>当然，最方便的方式就是到<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll Themes</a>clone别人做好的主题。但如果有一定的前端知识，也可以自己一行一行代码敲出自己独一无二的博客来。下面<br>主要说的是用Jekyll搭建博客的总体思路。  </p>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建　　\"></a>开始搭建　　</h2><h3 id=\"一、到GitHub官网注册一个账号\"><a href=\"#一、到GitHub官网注册一个账号\" class=\"headerlink\" title=\"一、到GitHub官网注册一个账号\"></a>一、到GitHub官网注册一个账号</h3><h3 id=\"二、点击绿色的new-repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\"><a href=\"#二、点击绿色的new-repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\" class=\"headerlink\" title=\"二、点击绿色的new repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\"></a>二、点击绿色的<code>new repository</code>按钮新建一个代码仓库，这里假定新建了一个叫做<code>blogDemo</code>的仓库。</h3><h3 id=\"三、把仓库克隆到本地进行编辑\"><a href=\"#三、把仓库克隆到本地进行编辑\" class=\"headerlink\" title=\"三、把仓库克隆到本地进行编辑\"></a>三、把仓库克隆到本地进行编辑</h3><h3 id=\"四、创建配置文件\"><a href=\"#四、创建配置文件\" class=\"headerlink\" title=\"四、创建配置文件\"></a>四、创建配置文件</h3><p>　　在项目的根目录下创建一个名为<code>_config.yml</code>的文件，打开输入以下内容：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">baseurl:</span>/blogDemo</span><br></pre></td></tr></table></figure></p>\n<!-- more -->\n<h3 id=\"五、创建模板文件。\"><a href=\"#五、创建模板文件。\" class=\"headerlink\" title=\"五、创建模板文件。\"></a>五、创建模板文件。</h3><p>　　1. 在项目根目录下创建一个<code>_layouts</code>的目录，用来存放模板文件。<br>　　2. 进入该目录，创建一个<code>posts.html</code>文件，用来作为博客文章的模板文件。并在该文件中输入以下内容。<br><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;!DOCTYPE html&gt;`  </span><br><span class=\"line\">`&lt;html&gt;`  </span><br><span class=\"line\">`&lt;head&gt;`  </span><br><span class=\"line\">　　`&lt;meta http-equiv=<span class=\"string\">\"content-type\"</span> content=<span class=\"string\">\"text/html;` `charset=utf-8\"</span> /&gt;`  </span><br><span class=\"line\">　　`&lt;title&gt;`&#123;\\&#123;page.title&#125;&#125;`&lt;/title&gt;`   </span><br><span class=\"line\">`&lt;/head&gt;`   </span><br><span class=\"line\">`&lt;body&gt;`   </span><br><span class=\"line\">　　&#123;\\&#123;content&#125;&#125;   </span><br><span class=\"line\">`&lt;/body&gt;`   </span><br><span class=\"line\">`&lt;/html&gt;`</span><br></pre></td></tr></table></figure></p>\n<p>Jekyll使用Liquid模板语言，{{page.title}}表示文章标题，{{content}}表示文章内容。这只是一个比较简单的文章展示页举例，具体要做成什么样式还要自己进一步敲代码完成。  </p>\n<h3 id=\"六、创建文章\"><a href=\"#六、创建文章\" class=\"headerlink\" title=\"六、创建文章\"></a>六、创建文章</h3><p>　　1. 回到项目根目录，创建一个<code>_posts</code>目录用于存放博客文章。<br>　　2. 进入该目录，创建一篇文章。文章可以是用HTML文件，也可以是markdown文件。但文件名有严格要求必须是<code>年-月-日-标题.后缀名</code>。比如这里新建一个<code>2017-12-18-Hello-World.md</code>的文件。<br>　　3. 在该文件中填入以下内容。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layouts:</span> <span class=\"string\">posts</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello-World</span>  </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">&lt;h2&gt;&#123;&#123;</span> <span class=\"string\">page.title</span> <span class=\"string\">&#125;&#125;&lt;/h2&gt;</span>   </span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;我的第一篇文章&lt;/p&gt;</span> </span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;&#123;&#123;</span> <span class=\"string\">post.date</span> <span class=\"string\">| date:'%Y-%m-%d' &#125;&#125;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　yaml文件头：每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线”—“，标记开始和结束，里面每一行设置一种元数据。三根短划线前面，是不能有空格的！需要注意的是，yaml文件头中变量与变量值之间要用空格隔开,如<code>title: Hello-World</code><br>冒号后面有空格。</p>\n<p>　　“layout: posts”，表示该文章的模板使用_layouts目录下的posts.html文件；<br>　　“title: 你好，世界”，表示该文章的标题是”你好，世界”，如果不设置这个值，默认使用嵌入文件名的标题，即”Hello World”.<br>　　在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。{{ page.title }}就是文件头中设置的”你好，世界”，{{ page.date }}则是嵌入文件名的日期（也可以在文件头重新定义date变量），”| date:’%Y-%m-%d’ “表示将page.date变量输出格式为：年-月-日。  </p>\n<h3 id=\"七、创建博客首页\"><a href=\"#七、创建博客首页\" class=\"headerlink\" title=\"七、创建博客首页\"></a>七、创建博客首页</h3><p>　　回到根目录，创建一个index.html的文件，输入以下内容。<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: posts</span><br><span class=\"line\">title: 我的Blog  </span><br><span class=\"line\">`---`  </span><br><span class=\"line\">`&lt;h2&gt;`&#123;\\&#123; page.title &#125;&#125;`&lt;/h2&gt;`  </span><br><span class=\"line\">`&lt;p&gt;最新文章&lt;/p&gt;`  </span><br><span class=\"line\">`&lt;ul&gt;`  </span><br><span class=\"line\">　　`&#123;`% for post <span class=\"keyword\">in</span> site.posts %&#125;  </span><br><span class=\"line\">　　　　`&lt;li&gt;`&#123;\\&#123; post.date | date_to_string &#125;&#125;   </span><br><span class=\"line\">\t`&lt;a href=<span class=\"string\">\"`&#123;\\&#123; site.baseurl &#125;&#125;&#123;\\&#123; post.url &#125;&#125;`\"</span>&gt;`&#123;\\&#123; post.title &#125;&#125;`&lt;/a&gt;&lt;/li&gt;`  </span><br><span class=\"line\">　　`&#123;`% endfor %&#125;     </span><br><span class=\"line\">`&lt;/ul&gt;`</span><br></pre></td></tr></table></figure></p>\n<p> 　　它的Yaml文件头表示，首页使用posts模板，标题为”我的Blog”。然后，首页使用了<code>{</code>% for post in site.posts %}，表示对所有帖子进行一个遍历。这里要注意的是，Liquid模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于{{site.baseurl}}就是_config.yml中设置的baseurl变量。 首页模板也可以自己在<code>_layouts</code>中自己定义喜欢的布局，然后再引入进来，这里只是一个简单的举例。<br> 　　至此，一个简单的博客就搭建完成了。整个项目的目录结构如下：<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/blogDemo</span><br><span class=\"line\">　　|<span class=\"string\">--_config.yml  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--_layouts  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">　　</span>|<span class=\"string\">--posts.html</span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--_posts  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">　　</span>|<span class=\"string\">--2017-12-19-HelloWord.html</span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--index.html</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"八、把代码上传到GitHub仓库\"><a href=\"#八、把代码上传到GitHub仓库\" class=\"headerlink\" title=\"八、把代码上传到GitHub仓库\"></a>八、把代码上传到GitHub仓库</h3><p>　　1. 上传完文件后，到GitHub官网进入该项目找到<code>settings</code>这个选项。<br>　　2. 往下拉找到<code>GitHub Pages</code>，把<code>source</code>选为<code>master branch</code><br>　　3. 稍等一会就通过<a href=\"https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。\" target=\"_blank\" rel=\"noopener\">https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。</a><br>　　4. </p>\n<h3 id=\"九、域名解析到博客\"><a href=\"#九、域名解析到博客\" class=\"headerlink\" title=\"九、域名解析到博客\"></a>九、域名解析到博客</h3><p>　　1. 在项目根目录下新建一个名为<code>CNAME</code>的文件，文件内容为你的域名如：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>进入域名管理，在域名解析里添加如下两条记录<br><img src=\"!--￼6--&gt;/assets/jiexi.jpg\" alt=\"图片\"><br>　　　<em> 主机记录：@；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。  \n　　　</em> 主机记录：www；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。<br>　　3. 需要等待一会才能通过域名访问。   </li>\n</ol>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><h4 id=\"Jekyll官方文档\"><a href=\"#Jekyll官方文档\" class=\"headerlink\" title=\"Jekyll官方文档\"></a><a href=\"https://www.jekyll.com.cn/\" target=\"_blank\" rel=\"noopener\">Jekyll官方文档</a></h4><h4 id=\"GitHub-Pages-tutorial\"><a href=\"#GitHub-Pages-tutorial\" class=\"headerlink\" title=\"GitHub Pages tutorial\"></a><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages tutorial</a></h4>表示文章内容。这只是一个比较简单的文章展示页举例，具体要做成什么样式还要自己进一步敲代码完成。  <p></p>\n<h3 id=\"六、创建文章\"><a href=\"#六、创建文章\" class=\"headerlink\" title=\"六、创建文章\"></a>六、创建文章</h3><p>　　1. 回到项目根目录，创建一个<code>_posts</code>目录用于存放博客文章。<br>　　2. 进入该目录，创建一篇文章。文章可以是用HTML文件，也可以是markdown文件。但文件名有严格要求必须是<code>年-月-日-标题.后缀名</code>。比如这里新建一个<code>2017-12-18-Hello-World.md</code>的文件。<br>　　3. 在该文件中填入以下内容。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layouts:</span> <span class=\"string\">posts</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello-World</span>  </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">&lt;h2&gt;&#123;&#123;</span> <span class=\"string\">page.title</span> <span class=\"string\">&#125;&#125;&lt;/h2&gt;</span>   </span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;我的第一篇文章&lt;/p&gt;</span> </span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;&#123;&#123;</span> <span class=\"string\">post.date</span> <span class=\"string\">| date:'%Y-%m-%d' &#125;&#125;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　yaml文件头：每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线”—“，标记开始和结束，里面每一行设置一种元数据。三根短划线前面，是不能有空格的！需要注意的是，yaml文件头中变量与变量值之间要用空格隔开,如<code>title: Hello-World</code><br>冒号后面有空格。</p>\n<p>　　“layout: posts”，表示该文章的模板使用_layouts目录下的posts.html文件；<br>　　“title: 你好，世界”，表示该文章的标题是”你好，世界”，如果不设置这个值，默认使用嵌入文件名的标题，即”Hello World”.<br>　　在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。就是文件头中设置的”你好，世界”，则是嵌入文件名的日期（也可以在文件头重新定义date变量），”| date:’%Y-%m-%d’ “表示将page.date变量输出格式为：年-月-日。  </p>\n<h3 id=\"七、创建博客首页\"><a href=\"#七、创建博客首页\" class=\"headerlink\" title=\"七、创建博客首页\"></a>七、创建博客首页</h3><p>　　回到根目录，创建一个index.html的文件，输入以下内容。<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: posts</span><br><span class=\"line\">title: 我的Blog  </span><br><span class=\"line\">`---`  </span><br><span class=\"line\">`&lt;h2&gt;`&#123;\\&#123; page.title &#125;&#125;`&lt;/h2&gt;`  </span><br><span class=\"line\">`&lt;p&gt;最新文章&lt;/p&gt;`  </span><br><span class=\"line\">`&lt;ul&gt;`  </span><br><span class=\"line\">　　`&#123;`% for post <span class=\"keyword\">in</span> site.posts %&#125;  </span><br><span class=\"line\">　　　　`&lt;li&gt;`&#123;\\&#123; post.date | date_to_string &#125;&#125;   </span><br><span class=\"line\">\t`&lt;a href=<span class=\"string\">\"`&#123;\\&#123; site.baseurl &#125;&#125;&#123;\\&#123; post.url &#125;&#125;`\"</span>&gt;`&#123;\\&#123; post.title &#125;&#125;`&lt;/a&gt;&lt;/li&gt;`  </span><br><span class=\"line\">　　`&#123;`% endfor %&#125;     </span><br><span class=\"line\">`&lt;/ul&gt;`</span><br></pre></td></tr></table></figure></p>\n<p> 　　它的Yaml文件头表示，首页使用posts模板，标题为”我的Blog”。然后，首页使用了<code>{</code>% for post in site.posts %}，表示对所有帖子进行一个遍历。这里要注意的是，Liquid模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于就是_config.yml中设置的baseurl变量。 首页模板也可以自己在<code>_layouts</code>中自己定义喜欢的布局，然后再引入进来，这里只是一个简单的举例。<br> 　　至此，一个简单的博客就搭建完成了。整个项目的目录结构如下：<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/blogDemo</span><br><span class=\"line\">　　|<span class=\"string\">--_config.yml  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--_layouts  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">　　</span>|<span class=\"string\">--posts.html</span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--_posts  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">　　</span>|<span class=\"string\">--2017-12-19-HelloWord.html</span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--index.html</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"八、把代码上传到GitHub仓库\"><a href=\"#八、把代码上传到GitHub仓库\" class=\"headerlink\" title=\"八、把代码上传到GitHub仓库\"></a>八、把代码上传到GitHub仓库</h3><p>　　1. 上传完文件后，到GitHub官网进入该项目找到<code>settings</code>这个选项。<br>　　2. 往下拉找到<code>GitHub Pages</code>，把<code>source</code>选为<code>master branch</code><br>　　3. 稍等一会就通过<a href=\"https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。\" target=\"_blank\" rel=\"noopener\">https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。</a><br>　　4. </p>\n<h3 id=\"九、域名解析到博客\"><a href=\"#九、域名解析到博客\" class=\"headerlink\" title=\"九、域名解析到博客\"></a>九、域名解析到博客</h3><p>　　1. 在项目根目录下新建一个名为<code>CNAME</code>的文件，文件内容为你的域名如：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>进入域名管理，在域名解析里添加如下两条记录<br><img src=\"!--￼6--&gt;/assets/jiexi.jpg\" alt=\"图片\"><br>　　　<em> 主机记录：@；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。  \n　　　</em> 主机记录：www；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。<br>　　3. 需要等待一会才能通过域名访问。   </li>\n</ol>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><h4 id=\"Jekyll官方文档\"><a href=\"#Jekyll官方文档\" class=\"headerlink\" title=\"Jekyll官方文档\"></a><a href=\"https://www.jekyll.com.cn/\" target=\"_blank\" rel=\"noopener\">Jekyll官方文档</a></h4><h4 id=\"GitHub-Pages-tutorial\"><a href=\"#GitHub-Pages-tutorial\" class=\"headerlink\" title=\"GitHub Pages tutorial\"></a><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages tutorial</a></h4>","site":{"data":{}},"excerpt":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>　　GitHub提供一种功能叫做GitHub Pages,可以利用它来搭建自己博客或者网站(只支持静态站点的搭建)。不仅如此，GitHub还<br>支持Jekyll解析。所以只要按照Jekyll的规则来建立文件，然后把它push到GitHub上就能搭建出自己的博客。<br>当然，最方便的方式就是到<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll Themes</a>clone别人做好的主题。但如果有一定的前端知识，也可以自己一行一行代码敲出自己独一无二的博客来。下面<br>主要说的是用Jekyll搭建博客的总体思路。  </p>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建　　\"></a>开始搭建　　</h2><h3 id=\"一、到GitHub官网注册一个账号\"><a href=\"#一、到GitHub官网注册一个账号\" class=\"headerlink\" title=\"一、到GitHub官网注册一个账号\"></a>一、到GitHub官网注册一个账号</h3><h3 id=\"二、点击绿色的new-repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\"><a href=\"#二、点击绿色的new-repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\" class=\"headerlink\" title=\"二、点击绿色的new repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\"></a>二、点击绿色的<code>new repository</code>按钮新建一个代码仓库，这里假定新建了一个叫做<code>blogDemo</code>的仓库。</h3><h3 id=\"三、把仓库克隆到本地进行编辑\"><a href=\"#三、把仓库克隆到本地进行编辑\" class=\"headerlink\" title=\"三、把仓库克隆到本地进行编辑\"></a>三、把仓库克隆到本地进行编辑</h3><h3 id=\"四、创建配置文件\"><a href=\"#四、创建配置文件\" class=\"headerlink\" title=\"四、创建配置文件\"></a>四、创建配置文件</h3><p>　　在项目的根目录下创建一个名为<code>_config.yml</code>的文件，打开输入以下内容：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">baseurl:</span>/blogDemo</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"五、创建模板文件。\"><a href=\"#五、创建模板文件。\" class=\"headerlink\" title=\"五、创建模板文件。\"></a>五、创建模板文件。</h3><p>　　1. 在项目根目录下创建一个<code>_layouts</code>的目录，用来存放模板文件。<br>　　2. 进入该目录，创建一个<code>posts.html</code>文件，用来作为博客文章的模板文件。并在该文件中输入以下内容。<br><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;!DOCTYPE html&gt;`  </span><br><span class=\"line\">`&lt;html&gt;`  </span><br><span class=\"line\">`&lt;head&gt;`  </span><br><span class=\"line\">　　`&lt;meta http-equiv=<span class=\"string\">\"content-type\"</span> content=<span class=\"string\">\"text/html;` `charset=utf-8\"</span> /&gt;`  </span><br><span class=\"line\">　　`&lt;title&gt;`&#123;\\&#123;page.title&#125;&#125;`&lt;/title&gt;`   </span><br><span class=\"line\">`&lt;/head&gt;`   </span><br><span class=\"line\">`&lt;body&gt;`   </span><br><span class=\"line\">　　&#123;\\&#123;content&#125;&#125;   </span><br><span class=\"line\">`&lt;/body&gt;`   </span><br><span class=\"line\">`&lt;/html&gt;`</span><br></pre></td></tr></table></figure></p>\n<p>Jekyll使用Liquid模板语言，表示文章标题，</p><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>　　GitHub提供一种功能叫做GitHub Pages,可以利用它来搭建自己博客或者网站(只支持静态站点的搭建)。不仅如此，GitHub还<br>支持Jekyll解析。所以只要按照Jekyll的规则来建立文件，然后把它push到GitHub上就能搭建出自己的博客。<br>当然，最方便的方式就是到<a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">Jekyll Themes</a>clone别人做好的主题。但如果有一定的前端知识，也可以自己一行一行代码敲出自己独一无二的博客来。下面<br>主要说的是用Jekyll搭建博客的总体思路。  </p>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建　　\"></a>开始搭建　　</h2><h3 id=\"一、到GitHub官网注册一个账号\"><a href=\"#一、到GitHub官网注册一个账号\" class=\"headerlink\" title=\"一、到GitHub官网注册一个账号\"></a>一、到GitHub官网注册一个账号</h3><h3 id=\"二、点击绿色的new-repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\"><a href=\"#二、点击绿色的new-repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\" class=\"headerlink\" title=\"二、点击绿色的new repository按钮新建一个代码仓库，这里假定新建了一个叫做blogDemo的仓库。\"></a>二、点击绿色的<code>new repository</code>按钮新建一个代码仓库，这里假定新建了一个叫做<code>blogDemo</code>的仓库。</h3><h3 id=\"三、把仓库克隆到本地进行编辑\"><a href=\"#三、把仓库克隆到本地进行编辑\" class=\"headerlink\" title=\"三、把仓库克隆到本地进行编辑\"></a>三、把仓库克隆到本地进行编辑</h3><h3 id=\"四、创建配置文件\"><a href=\"#四、创建配置文件\" class=\"headerlink\" title=\"四、创建配置文件\"></a>四、创建配置文件</h3><p>　　在项目的根目录下创建一个名为<code>_config.yml</code>的文件，打开输入以下内容：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">baseurl:</span>/blogDemo</span><br></pre></td></tr></table></figure></p>\n<!-- more -->\n<h3 id=\"五、创建模板文件。\"><a href=\"#五、创建模板文件。\" class=\"headerlink\" title=\"五、创建模板文件。\"></a>五、创建模板文件。</h3><p>　　1. 在项目根目录下创建一个<code>_layouts</code>的目录，用来存放模板文件。<br>　　2. 进入该目录，创建一个<code>posts.html</code>文件，用来作为博客文章的模板文件。并在该文件中输入以下内容。<br><figure class=\"highlight autohotkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`&lt;!DOCTYPE html&gt;`  </span><br><span class=\"line\">`&lt;html&gt;`  </span><br><span class=\"line\">`&lt;head&gt;`  </span><br><span class=\"line\">　　`&lt;meta http-equiv=<span class=\"string\">\"content-type\"</span> content=<span class=\"string\">\"text/html;` `charset=utf-8\"</span> /&gt;`  </span><br><span class=\"line\">　　`&lt;title&gt;`&#123;\\&#123;page.title&#125;&#125;`&lt;/title&gt;`   </span><br><span class=\"line\">`&lt;/head&gt;`   </span><br><span class=\"line\">`&lt;body&gt;`   </span><br><span class=\"line\">　　&#123;\\&#123;content&#125;&#125;   </span><br><span class=\"line\">`&lt;/body&gt;`   </span><br><span class=\"line\">`&lt;/html&gt;`</span><br></pre></td></tr></table></figure></p>\n<p>Jekyll使用Liquid模板语言，{{page.title}}表示文章标题，{{content}}表示文章内容。这只是一个比较简单的文章展示页举例，具体要做成什么样式还要自己进一步敲代码完成。  </p>\n<h3 id=\"六、创建文章\"><a href=\"#六、创建文章\" class=\"headerlink\" title=\"六、创建文章\"></a>六、创建文章</h3><p>　　1. 回到项目根目录，创建一个<code>_posts</code>目录用于存放博客文章。<br>　　2. 进入该目录，创建一篇文章。文章可以是用HTML文件，也可以是markdown文件。但文件名有严格要求必须是<code>年-月-日-标题.后缀名</code>。比如这里新建一个<code>2017-12-18-Hello-World.md</code>的文件。<br>　　3. 在该文件中填入以下内容。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layouts:</span> <span class=\"string\">posts</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello-World</span>  </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">&lt;h2&gt;&#123;&#123;</span> <span class=\"string\">page.title</span> <span class=\"string\">&#125;&#125;&lt;/h2&gt;</span>   </span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;我的第一篇文章&lt;/p&gt;</span> </span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;&#123;&#123;</span> <span class=\"string\">post.date</span> <span class=\"string\">| date:'%Y-%m-%d' &#125;&#125;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　yaml文件头：每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线”—“，标记开始和结束，里面每一行设置一种元数据。三根短划线前面，是不能有空格的！需要注意的是，yaml文件头中变量与变量值之间要用空格隔开,如<code>title: Hello-World</code><br>冒号后面有空格。</p>\n<p>　　“layout: posts”，表示该文章的模板使用_layouts目录下的posts.html文件；<br>　　“title: 你好，世界”，表示该文章的标题是”你好，世界”，如果不设置这个值，默认使用嵌入文件名的标题，即”Hello World”.<br>　　在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。{{ page.title }}就是文件头中设置的”你好，世界”，{{ page.date }}则是嵌入文件名的日期（也可以在文件头重新定义date变量），”| date:’%Y-%m-%d’ “表示将page.date变量输出格式为：年-月-日。  </p>\n<h3 id=\"七、创建博客首页\"><a href=\"#七、创建博客首页\" class=\"headerlink\" title=\"七、创建博客首页\"></a>七、创建博客首页</h3><p>　　回到根目录，创建一个index.html的文件，输入以下内容。<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: posts</span><br><span class=\"line\">title: 我的Blog  </span><br><span class=\"line\">`---`  </span><br><span class=\"line\">`&lt;h2&gt;`&#123;\\&#123; page.title &#125;&#125;`&lt;/h2&gt;`  </span><br><span class=\"line\">`&lt;p&gt;最新文章&lt;/p&gt;`  </span><br><span class=\"line\">`&lt;ul&gt;`  </span><br><span class=\"line\">　　`&#123;`% for post <span class=\"keyword\">in</span> site.posts %&#125;  </span><br><span class=\"line\">　　　　`&lt;li&gt;`&#123;\\&#123; post.date | date_to_string &#125;&#125;   </span><br><span class=\"line\">\t`&lt;a href=<span class=\"string\">\"`&#123;\\&#123; site.baseurl &#125;&#125;&#123;\\&#123; post.url &#125;&#125;`\"</span>&gt;`&#123;\\&#123; post.title &#125;&#125;`&lt;/a&gt;&lt;/li&gt;`  </span><br><span class=\"line\">　　`&#123;`% endfor %&#125;     </span><br><span class=\"line\">`&lt;/ul&gt;`</span><br></pre></td></tr></table></figure></p>\n<p> 　　它的Yaml文件头表示，首页使用posts模板，标题为”我的Blog”。然后，首页使用了<code>{</code>% for post in site.posts %}，表示对所有帖子进行一个遍历。这里要注意的是，Liquid模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于{{site.baseurl}}就是_config.yml中设置的baseurl变量。 首页模板也可以自己在<code>_layouts</code>中自己定义喜欢的布局，然后再引入进来，这里只是一个简单的举例。<br> 　　至此，一个简单的博客就搭建完成了。整个项目的目录结构如下：<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/blogDemo</span><br><span class=\"line\">　　|<span class=\"string\">--_config.yml  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--_layouts  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">　　</span>|<span class=\"string\">--posts.html</span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--_posts  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">　　</span>|<span class=\"string\">--2017-12-19-HelloWord.html</span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--index.html</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"八、把代码上传到GitHub仓库\"><a href=\"#八、把代码上传到GitHub仓库\" class=\"headerlink\" title=\"八、把代码上传到GitHub仓库\"></a>八、把代码上传到GitHub仓库</h3><p>　　1. 上传完文件后，到GitHub官网进入该项目找到<code>settings</code>这个选项。<br>　　2. 往下拉找到<code>GitHub Pages</code>，把<code>source</code>选为<code>master branch</code><br>　　3. 稍等一会就通过<a href=\"https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。\" target=\"_blank\" rel=\"noopener\">https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。</a><br>　　4. </p>\n<h3 id=\"九、域名解析到博客\"><a href=\"#九、域名解析到博客\" class=\"headerlink\" title=\"九、域名解析到博客\"></a>九、域名解析到博客</h3><p>　　1. 在项目根目录下新建一个名为<code>CNAME</code>的文件，文件内容为你的域名如：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>进入域名管理，在域名解析里添加如下两条记录<br><img src=\"!--￼6--&gt;/assets/jiexi.jpg\" alt=\"图片\"><br>　　　<em> 主机记录：@；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。  \n　　　</em> 主机记录：www；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。<br>　　3. 需要等待一会才能通过域名访问。   </li>\n</ol>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><h4 id=\"Jekyll官方文档\"><a href=\"#Jekyll官方文档\" class=\"headerlink\" title=\"Jekyll官方文档\"></a><a href=\"https://www.jekyll.com.cn/\" target=\"_blank\" rel=\"noopener\">Jekyll官方文档</a></h4><h4 id=\"GitHub-Pages-tutorial\"><a href=\"#GitHub-Pages-tutorial\" class=\"headerlink\" title=\"GitHub Pages tutorial\"></a><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages tutorial</a></h4>表示文章内容。这只是一个比较简单的文章展示页举例，具体要做成什么样式还要自己进一步敲代码完成。  <p></p>\n<h3 id=\"六、创建文章\"><a href=\"#六、创建文章\" class=\"headerlink\" title=\"六、创建文章\"></a>六、创建文章</h3><p>　　1. 回到项目根目录，创建一个<code>_posts</code>目录用于存放博客文章。<br>　　2. 进入该目录，创建一篇文章。文章可以是用HTML文件，也可以是markdown文件。但文件名有严格要求必须是<code>年-月-日-标题.后缀名</code>。比如这里新建一个<code>2017-12-18-Hello-World.md</code>的文件。<br>　　3. 在该文件中填入以下内容。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">layouts:</span> <span class=\"string\">posts</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">Hello-World</span>  </span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">&lt;h2&gt;&#123;&#123;</span> <span class=\"string\">page.title</span> <span class=\"string\">&#125;&#125;&lt;/h2&gt;</span>   </span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;我的第一篇文章&lt;/p&gt;</span> </span><br><span class=\"line\"><span class=\"string\">&lt;p&gt;&#123;&#123;</span> <span class=\"string\">post.date</span> <span class=\"string\">| date:'%Y-%m-%d' &#125;&#125;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>　　yaml文件头：每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线”—“，标记开始和结束，里面每一行设置一种元数据。三根短划线前面，是不能有空格的！需要注意的是，yaml文件头中变量与变量值之间要用空格隔开,如<code>title: Hello-World</code><br>冒号后面有空格。</p>\n<p>　　“layout: posts”，表示该文章的模板使用_layouts目录下的posts.html文件；<br>　　“title: 你好，世界”，表示该文章的标题是”你好，世界”，如果不设置这个值，默认使用嵌入文件名的标题，即”Hello World”.<br>　　在yaml文件头后面，就是文章的正式内容，里面可以使用模板变量。就是文件头中设置的”你好，世界”，则是嵌入文件名的日期（也可以在文件头重新定义date变量），”| date:’%Y-%m-%d’ “表示将page.date变量输出格式为：年-月-日。  </p>\n<h3 id=\"七、创建博客首页\"><a href=\"#七、创建博客首页\" class=\"headerlink\" title=\"七、创建博客首页\"></a>七、创建博客首页</h3><p>　　回到根目录，创建一个index.html的文件，输入以下内容。<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: posts</span><br><span class=\"line\">title: 我的Blog  </span><br><span class=\"line\">`---`  </span><br><span class=\"line\">`&lt;h2&gt;`&#123;\\&#123; page.title &#125;&#125;`&lt;/h2&gt;`  </span><br><span class=\"line\">`&lt;p&gt;最新文章&lt;/p&gt;`  </span><br><span class=\"line\">`&lt;ul&gt;`  </span><br><span class=\"line\">　　`&#123;`% for post <span class=\"keyword\">in</span> site.posts %&#125;  </span><br><span class=\"line\">　　　　`&lt;li&gt;`&#123;\\&#123; post.date | date_to_string &#125;&#125;   </span><br><span class=\"line\">\t`&lt;a href=<span class=\"string\">\"`&#123;\\&#123; site.baseurl &#125;&#125;&#123;\\&#123; post.url &#125;&#125;`\"</span>&gt;`&#123;\\&#123; post.title &#125;&#125;`&lt;/a&gt;&lt;/li&gt;`  </span><br><span class=\"line\">　　`&#123;`% endfor %&#125;     </span><br><span class=\"line\">`&lt;/ul&gt;`</span><br></pre></td></tr></table></figure></p>\n<p> 　　它的Yaml文件头表示，首页使用posts模板，标题为”我的Blog”。然后，首页使用了<code>{</code>% for post in site.posts %}，表示对所有帖子进行一个遍历。这里要注意的是，Liquid模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于就是_config.yml中设置的baseurl变量。 首页模板也可以自己在<code>_layouts</code>中自己定义喜欢的布局，然后再引入进来，这里只是一个简单的举例。<br> 　　至此，一个简单的博客就搭建完成了。整个项目的目录结构如下：<br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/blogDemo</span><br><span class=\"line\">　　|<span class=\"string\">--_config.yml  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--_layouts  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">　　</span>|<span class=\"string\">--posts.html</span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--_posts  </span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">　　</span>|<span class=\"string\">--2017-12-19-HelloWord.html</span></span><br><span class=\"line\"><span class=\"string\">　　</span>|<span class=\"string\">--index.html</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"八、把代码上传到GitHub仓库\"><a href=\"#八、把代码上传到GitHub仓库\" class=\"headerlink\" title=\"八、把代码上传到GitHub仓库\"></a>八、把代码上传到GitHub仓库</h3><p>　　1. 上传完文件后，到GitHub官网进入该项目找到<code>settings</code>这个选项。<br>　　2. 往下拉找到<code>GitHub Pages</code>，把<code>source</code>选为<code>master branch</code><br>　　3. 稍等一会就通过<a href=\"https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。\" target=\"_blank\" rel=\"noopener\">https://username.github.io/blogDemo,比如我这里是[https://fishrong.github.io/blogDem](https://fishrong.github.io/blogDemo)。当然如果你把博客直接写在了username.github.io这个仓库下就可以直接访问https://username.github.io/。</a><br>　　4. </p>\n<h3 id=\"九、域名解析到博客\"><a href=\"#九、域名解析到博客\" class=\"headerlink\" title=\"九、域名解析到博客\"></a>九、域名解析到博客</h3><p>　　1. 在项目根目录下新建一个名为<code>CNAME</code>的文件，文件内容为你的域名如：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">www<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>进入域名管理，在域名解析里添加如下两条记录<br><img src=\"!--￼6--&gt;/assets/jiexi.jpg\" alt=\"图片\"><br>　　　<em> 主机记录：@；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。  \n　　　</em> 主机记录：www；记录类型：CNAME;记录值：username.github.io/blogDemo(也就是博客首页地址)。<br>　　3. 需要等待一会才能通过域名访问。   </li>\n</ol>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><h4 id=\"Jekyll官方文档\"><a href=\"#Jekyll官方文档\" class=\"headerlink\" title=\"Jekyll官方文档\"></a><a href=\"https://www.jekyll.com.cn/\" target=\"_blank\" rel=\"noopener\">Jekyll官方文档</a></h4><h4 id=\"GitHub-Pages-tutorial\"><a href=\"#GitHub-Pages-tutorial\" class=\"headerlink\" title=\"GitHub Pages tutorial\"></a><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages tutorial</a></h4>"},{"layout":"posts","title":"网页编程常见问题及解决办法","_content":"## 一、JS方面\n### 屏蔽移动端弹出菜单\n```\nnode.addEventListener('contextmenu', function(e){\n  e.preventDefault();\n});\n```\n### js实现移动端长按\n移动端有`ontouchstart`、`ontouchmove`、`ontouchend`三个属性来对点击事件控制。\nontouchstart：点击时触发。  \nontouchmove：手指移动后触发。  \nontouchend：手指离开时触发。\n**只对移动端生效**\n长按实现思路：\n  当手指点击时触发`ontouchstart`,开始计时，如果到了定时时间则判断为长按，执行相应长按函数，否则清除定时。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>长按测试</title>\n</head>\n<body>\n   <div id=\"hit\" style=\"width:100%; height:100px; background-color:#CCC;\" ontouchstart=\"gtouchstart()\" ontouchmove=\"gtouchmove()\" ontouchend=\"gtouchend()\" onclick=\"\">测试区域</div>    \n<script>  \n    //以下判断语句用来处理手机端出现两次点击问题\n    if ((window.screen.availHeight)>710) {\n            var a = document.getElementById(\"hit\");\n            a.setAttribute(\"onclick\", \"myclick()\");\n    }\n    function myclick(){\n        alert(\"电脑点击\");\n    };\n\n    var timeOutEvent=0;//定时器   \n    //开始按   \n    function gtouchstart(){   \n        timeOutEvent = setTimeout(\"longPress()\",500);//这里设置定时器，定义长按500毫秒触发长按事件，时间可以自己改，个人感觉500毫秒非常合适   \n        return false;   \n    };   \n    //手释放，如果在500毫秒内就释放，则取消长按事件，此时可以执行onclick应该执行的事件   \n    function gtouchend(){   \n        clearTimeout(timeOutEvent);//清除定时器   \n        if(timeOutEvent!=0){   \n            //这里写要执行的内容（尤如onclick事件）   \n            alert(\"点击事件触发\");\n\n        }  \n        else{\n            alert(\"长按事件结束\");\n        }\n\n\n        return false;   \n    };   \n    //如果手指有移动，则取消所有事件，此时说明用户只是要移动而不是长按   \n    function gtouchmove(){   \n        clearTimeout(timeOutEvent);//清除定时器   \n        timeOutEvent = 0;\n        document.getElementById(\"sum\").innerHTML = \"end...\";  \n\n    };   \n    var i = 0;  \n    //真正长按后应该执行的内容   \n    function longPress(){   \n        timeOutEvent = 0;   \n        //执行长按要执行的内容，如弹出菜单  \n        alert(\"长按事件触发\");\n\n    };\n\n\n</script>   \n</body>\n</html>\n```\n<!--more-->\n### js实现网页录音\n参考Github中两个例子\n* [https://github.com/mattdiamond/Recorderjs](https://github.com/mattdiamond/Recorderjs)\n* [https://github.com/xiangyuecn/Recorder](https://github.com/xiangyuecn/Recorder)\n\n### 使用XMLHttpRequest上传blob数据\n* 构建Form表单，如果是Django必须添加一个csrfmiddlewaretoken字段。\nhtml需包含以下内容：\n```\n<form name=\"myform\">\n\t\t\t{% csrf_token %}\n</form>\n```\n\nJS内容：\n```\nvar fd = new FormData();\n//csrf校验\nvar csrf = myform.csrfmiddlewaretoken.value;\nfd.append('csrfmiddlewaretoken',csrf);\n\nfd.append(\"file\", this.getBlob());\nvar xhr = new XMLHttpRequest();\n//设置xhr请求的超时时间\nxhr.timeout = 3000;\n//设置响应返回的数据格式\nxhr.responseType = \"text\";\n//创建一个 post 请求，采用异步\nxhr.open('POST', url, true);\n//注册相关事件回调处理函数\nxhr.onload = function(e) {\n   if(this.status == 200||this.status == 304){\n   alert(xhr.responseText);\n  }\n};\n//发送数据\nxhr.send(fd);\n```\n### 引用外部的js文件\n```\n<script src=\"script.js\"></script>\n```\n\n### 作用域问题\n　　1. 放在`<head>`部分\n\thead部分的代码会先于其余部分解析，所以如果要获取元素节点需要在js中加入`window.onload=function(){}`这个函数(加载完所有资源后执行)并把代码写在function中，这样才能获取到html定义的节点。  \n　　2. 放在`<body>`部分  \n\tJavaScript代码在网页读取到该语句的时候就会执行。\n### 全局变量与局部变量\n　　1. 局部变量定义在function内部，格式为var+变量名  \n　　2. 全局变量两种常用的声明方式：  \n　　　１.定义在函数外部  \n　　　２.函数内部的变量上升为全局变量：不用var直接给变量赋值\n## 二、CSS方面  \n### `div`元素居中问题\n\t\t* 1、使用`margin`居中  \n\t\t```\n\t\tmargin-left:50%;\n\t\tmargin-rigth:50%;\n\t\t```\n\t\t* 2、使用`inline-block`居中  \n\t\t将元素设为`inline-block`,然后将父类元素设为`text-align:center;`\n### CSS设置鼠标悬浮样式  \n```\nth:hover{\n\tbackground-color:blue;\n}\n```\n### 同一行解决图片文字不对齐\n设置图片的`margin-bottom:-10px`可使文字上移\n\n　　\n","source":"_posts/2017/2017-12-18-JS常见问题及解决办法.md","raw":"---\nlayout: posts\ntitle: 网页编程常见问题及解决办法\ncategories: 网页编程常见问题\ntags:\n  - JS\n  - CS\n---\n## 一、JS方面\n### 屏蔽移动端弹出菜单\n```\nnode.addEventListener('contextmenu', function(e){\n  e.preventDefault();\n});\n```\n### js实现移动端长按\n移动端有`ontouchstart`、`ontouchmove`、`ontouchend`三个属性来对点击事件控制。\nontouchstart：点击时触发。  \nontouchmove：手指移动后触发。  \nontouchend：手指离开时触发。\n**只对移动端生效**\n长按实现思路：\n  当手指点击时触发`ontouchstart`,开始计时，如果到了定时时间则判断为长按，执行相应长按函数，否则清除定时。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>长按测试</title>\n</head>\n<body>\n   <div id=\"hit\" style=\"width:100%; height:100px; background-color:#CCC;\" ontouchstart=\"gtouchstart()\" ontouchmove=\"gtouchmove()\" ontouchend=\"gtouchend()\" onclick=\"\">测试区域</div>    \n<script>  \n    //以下判断语句用来处理手机端出现两次点击问题\n    if ((window.screen.availHeight)>710) {\n            var a = document.getElementById(\"hit\");\n            a.setAttribute(\"onclick\", \"myclick()\");\n    }\n    function myclick(){\n        alert(\"电脑点击\");\n    };\n\n    var timeOutEvent=0;//定时器   \n    //开始按   \n    function gtouchstart(){   \n        timeOutEvent = setTimeout(\"longPress()\",500);//这里设置定时器，定义长按500毫秒触发长按事件，时间可以自己改，个人感觉500毫秒非常合适   \n        return false;   \n    };   \n    //手释放，如果在500毫秒内就释放，则取消长按事件，此时可以执行onclick应该执行的事件   \n    function gtouchend(){   \n        clearTimeout(timeOutEvent);//清除定时器   \n        if(timeOutEvent!=0){   \n            //这里写要执行的内容（尤如onclick事件）   \n            alert(\"点击事件触发\");\n\n        }  \n        else{\n            alert(\"长按事件结束\");\n        }\n\n\n        return false;   \n    };   \n    //如果手指有移动，则取消所有事件，此时说明用户只是要移动而不是长按   \n    function gtouchmove(){   \n        clearTimeout(timeOutEvent);//清除定时器   \n        timeOutEvent = 0;\n        document.getElementById(\"sum\").innerHTML = \"end...\";  \n\n    };   \n    var i = 0;  \n    //真正长按后应该执行的内容   \n    function longPress(){   \n        timeOutEvent = 0;   \n        //执行长按要执行的内容，如弹出菜单  \n        alert(\"长按事件触发\");\n\n    };\n\n\n</script>   \n</body>\n</html>\n```\n<!--more-->\n### js实现网页录音\n参考Github中两个例子\n* [https://github.com/mattdiamond/Recorderjs](https://github.com/mattdiamond/Recorderjs)\n* [https://github.com/xiangyuecn/Recorder](https://github.com/xiangyuecn/Recorder)\n\n### 使用XMLHttpRequest上传blob数据\n* 构建Form表单，如果是Django必须添加一个csrfmiddlewaretoken字段。\nhtml需包含以下内容：\n```\n<form name=\"myform\">\n\t\t\t{% csrf_token %}\n</form>\n```\n\nJS内容：\n```\nvar fd = new FormData();\n//csrf校验\nvar csrf = myform.csrfmiddlewaretoken.value;\nfd.append('csrfmiddlewaretoken',csrf);\n\nfd.append(\"file\", this.getBlob());\nvar xhr = new XMLHttpRequest();\n//设置xhr请求的超时时间\nxhr.timeout = 3000;\n//设置响应返回的数据格式\nxhr.responseType = \"text\";\n//创建一个 post 请求，采用异步\nxhr.open('POST', url, true);\n//注册相关事件回调处理函数\nxhr.onload = function(e) {\n   if(this.status == 200||this.status == 304){\n   alert(xhr.responseText);\n  }\n};\n//发送数据\nxhr.send(fd);\n```\n### 引用外部的js文件\n```\n<script src=\"script.js\"></script>\n```\n\n### 作用域问题\n　　1. 放在`<head>`部分\n\thead部分的代码会先于其余部分解析，所以如果要获取元素节点需要在js中加入`window.onload=function(){}`这个函数(加载完所有资源后执行)并把代码写在function中，这样才能获取到html定义的节点。  \n　　2. 放在`<body>`部分  \n\tJavaScript代码在网页读取到该语句的时候就会执行。\n### 全局变量与局部变量\n　　1. 局部变量定义在function内部，格式为var+变量名  \n　　2. 全局变量两种常用的声明方式：  \n　　　１.定义在函数外部  \n　　　２.函数内部的变量上升为全局变量：不用var直接给变量赋值\n## 二、CSS方面  \n### `div`元素居中问题\n\t\t* 1、使用`margin`居中  \n\t\t```\n\t\tmargin-left:50%;\n\t\tmargin-rigth:50%;\n\t\t```\n\t\t* 2、使用`inline-block`居中  \n\t\t将元素设为`inline-block`,然后将父类元素设为`text-align:center;`\n### CSS设置鼠标悬浮样式  \n```\nth:hover{\n\tbackground-color:blue;\n}\n```\n### 同一行解决图片文字不对齐\n设置图片的`margin-bottom:-10px`可使文字上移\n\n　　\n","slug":"2017-2017-12-18-JS常见问题及解决办法","published":1,"date":"2018-11-04T03:19:28.000Z","updated":"2018-10-15T06:53:42.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u950005d3fo04nw4k1y","content":"<h2 id=\"一、JS方面\"><a href=\"#一、JS方面\" class=\"headerlink\" title=\"一、JS方面\"></a>一、JS方面</h2><h3 id=\"屏蔽移动端弹出菜单\"><a href=\"#屏蔽移动端弹出菜单\" class=\"headerlink\" title=\"屏蔽移动端弹出菜单\"></a>屏蔽移动端弹出菜单</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.addEventListener(<span class=\"string\">'contextmenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span></span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"js实现移动端长按\"><a href=\"#js实现移动端长按\" class=\"headerlink\" title=\"js实现移动端长按\"></a>js实现移动端长按</h3><p>移动端有<code>ontouchstart</code>、<code>ontouchmove</code>、<code>ontouchend</code>三个属性来对点击事件控制。<br>ontouchstart：点击时触发。<br>ontouchmove：手指移动后触发。<br>ontouchend：手指离开时触发。<br><strong>只对移动端生效</strong><br>长按实现思路：<br>  当手指点击时触发<code>ontouchstart</code>,开始计时，如果到了定时时间则判断为长按，执行相应长按函数，否则清除定时。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>长按测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hit\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%; height:100px; background-color:#CCC;\"</span> <span class=\"attr\">ontouchstart</span>=<span class=\"string\">\"gtouchstart()\"</span> <span class=\"attr\">ontouchmove</span>=<span class=\"string\">\"gtouchmove()\"</span> <span class=\"attr\">ontouchend</span>=<span class=\"string\">\"gtouchend()\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"\"</span>&gt;</span>测试区域<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">  </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//以下判断语句用来处理手机端出现两次点击问题</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.screen.availHeight)&gt;<span class=\"number\">710</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"hit\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            a.setAttribute(<span class=\"string\">\"onclick\"</span>, <span class=\"string\">\"myclick()\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myclick</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        alert(<span class=\"string\">\"电脑点击\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> timeOutEvent=<span class=\"number\">0</span>;<span class=\"comment\">//定时器   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//开始按   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gtouchstart</span><span class=\"params\">()</span></span>&#123;   </span></span><br><span class=\"line\"><span class=\"actionscript\">        timeOutEvent = setTimeout(<span class=\"string\">\"longPress()\"</span>,<span class=\"number\">500</span>);<span class=\"comment\">//这里设置定时器，定义长按500毫秒触发长按事件，时间可以自己改，个人感觉500毫秒非常合适   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;   </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//手释放，如果在500毫秒内就释放，则取消长按事件，此时可以执行onclick应该执行的事件   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gtouchend</span><span class=\"params\">()</span></span>&#123;   </span></span><br><span class=\"line\"><span class=\"actionscript\">        clearTimeout(timeOutEvent);<span class=\"comment\">//清除定时器   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span>(timeOutEvent!=<span class=\"number\">0</span>)&#123;   </span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//这里写要执行的内容（尤如onclick事件）   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"点击事件触发\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;  </span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"长按事件结束\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;   </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//如果手指有移动，则取消所有事件，此时说明用户只是要移动而不是长按   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gtouchmove</span><span class=\"params\">()</span></span>&#123;   </span></span><br><span class=\"line\"><span class=\"actionscript\">        clearTimeout(timeOutEvent);<span class=\"comment\">//清除定时器   </span></span></span><br><span class=\"line\"><span class=\"undefined\">        timeOutEvent = 0;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"sum\"</span>).innerHTML = <span class=\"string\">\"end...\"</span>;  </span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;   </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;  </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//真正长按后应该执行的内容   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">longPress</span><span class=\"params\">()</span></span>&#123;   </span></span><br><span class=\"line\"><span class=\"undefined\">        timeOutEvent = 0;   </span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//执行长按要执行的内容，如弹出菜单  </span></span></span><br><span class=\"line\"><span class=\"actionscript\">        alert(<span class=\"string\">\"长按事件触发\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"js实现网页录音\"><a href=\"#js实现网页录音\" class=\"headerlink\" title=\"js实现网页录音\"></a>js实现网页录音</h3><p>参考Github中两个例子</p>\n<ul>\n<li><a href=\"https://github.com/mattdiamond/Recorderjs\" target=\"_blank\" rel=\"noopener\">https://github.com/mattdiamond/Recorderjs</a></li>\n<li><a href=\"https://github.com/xiangyuecn/Recorder\" target=\"_blank\" rel=\"noopener\">https://github.com/xiangyuecn/Recorder</a></li>\n</ul>\n<h3 id=\"使用XMLHttpRequest上传blob数据\"><a href=\"#使用XMLHttpRequest上传blob数据\" class=\"headerlink\" title=\"使用XMLHttpRequest上传blob数据\"></a>使用XMLHttpRequest上传blob数据</h3><ul>\n<li>构建Form表单，如果是Django必须添加一个csrfmiddlewaretoken字段。<br>html需包含以下内容：<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myform\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t</span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">csrf_token</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JS内容：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"type\">FormData</span>();</span><br><span class=\"line\"><span class=\"comment\">//csrf校验</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> csrf = myform.csrfmiddlewaretoken.value;</span><br><span class=\"line\">fd.append(<span class=\"string\">'csrfmiddlewaretoken'</span>,csrf);</span><br><span class=\"line\"></span><br><span class=\"line\">fd.append(<span class=\"string\">\"file\"</span>, <span class=\"built_in\">this</span>.getBlob());</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"type\">XMLHttpRequest</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置xhr请求的超时时间</span></span><br><span class=\"line\">xhr.timeout = <span class=\"number\">3000</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置响应返回的数据格式</span></span><br><span class=\"line\">xhr.responseType = <span class=\"string\">\"text\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//创建一个 post 请求，采用异步</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//注册相关事件回调处理函数</span></span><br><span class=\"line\">xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span></span>(e) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.status == <span class=\"number\">200</span>||<span class=\"built_in\">this</span>.status == <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">   alert(xhr.responseText);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//发送数据</span></span><br><span class=\"line\">xhr.send(fd);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"引用外部的js文件\"><a href=\"#引用外部的js文件\" class=\"headerlink\" title=\"引用外部的js文件\"></a>引用外部的js文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域问题\"><a href=\"#作用域问题\" class=\"headerlink\" title=\"作用域问题\"></a>作用域问题</h3><p>　　1. 放在<code>&lt;head&gt;</code>部分<br>    head部分的代码会先于其余部分解析，所以如果要获取元素节点需要在js中加入<code>window.onload=function(){}</code>这个函数(加载完所有资源后执行)并把代码写在function中，这样才能获取到html定义的节点。<br>　　2. 放在<code>&lt;body&gt;</code>部分<br>    JavaScript代码在网页读取到该语句的时候就会执行。</p>\n<h3 id=\"全局变量与局部变量\"><a href=\"#全局变量与局部变量\" class=\"headerlink\" title=\"全局变量与局部变量\"></a>全局变量与局部变量</h3><p>　　1. 局部变量定义在function内部，格式为var+变量名<br>　　2. 全局变量两种常用的声明方式：<br>　　　１.定义在函数外部<br>　　　２.函数内部的变量上升为全局变量：不用var直接给变量赋值</p>\n<h2 id=\"二、CSS方面\"><a href=\"#二、CSS方面\" class=\"headerlink\" title=\"二、CSS方面\"></a>二、CSS方面</h2><h3 id=\"div元素居中问题\"><a href=\"#div元素居中问题\" class=\"headerlink\" title=\"div元素居中问题\"></a><code>div</code>元素居中问题</h3><pre><code>* 1、使用`margin`居中  \n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">margin-left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>-rigth:<span class=\"number\">50%</span>;</span><br></pre></td></tr></table></figure>\n\n* 2、使用`inline-block`居中  \n将元素设为`inline-block`,然后将父类元素设为`text-align:center;`\n</code></pre><h3 id=\"CSS设置鼠标悬浮样式\"><a href=\"#CSS设置鼠标悬浮样式\" class=\"headerlink\" title=\"CSS设置鼠标悬浮样式\"></a>CSS设置鼠标悬浮样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">th</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>:blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"同一行解决图片文字不对齐\"><a href=\"#同一行解决图片文字不对齐\" class=\"headerlink\" title=\"同一行解决图片文字不对齐\"></a>同一行解决图片文字不对齐</h3><p>设置图片的<code>margin-bottom:-10px</code>可使文字上移</p>\n<p>　　</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、JS方面\"><a href=\"#一、JS方面\" class=\"headerlink\" title=\"一、JS方面\"></a>一、JS方面</h2><h3 id=\"屏蔽移动端弹出菜单\"><a href=\"#屏蔽移动端弹出菜单\" class=\"headerlink\" title=\"屏蔽移动端弹出菜单\"></a>屏蔽移动端弹出菜单</h3><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.addEventListener(<span class=\"string\">'contextmenu'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span></span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"js实现移动端长按\"><a href=\"#js实现移动端长按\" class=\"headerlink\" title=\"js实现移动端长按\"></a>js实现移动端长按</h3><p>移动端有<code>ontouchstart</code>、<code>ontouchmove</code>、<code>ontouchend</code>三个属性来对点击事件控制。<br>ontouchstart：点击时触发。<br>ontouchmove：手指移动后触发。<br>ontouchend：手指离开时触发。<br><strong>只对移动端生效</strong><br>长按实现思路：<br>  当手指点击时触发<code>ontouchstart</code>,开始计时，如果到了定时时间则判断为长按，执行相应长按函数，否则清除定时。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>长按测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hit\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:100%; height:100px; background-color:#CCC;\"</span> <span class=\"attr\">ontouchstart</span>=<span class=\"string\">\"gtouchstart()\"</span> <span class=\"attr\">ontouchmove</span>=<span class=\"string\">\"gtouchmove()\"</span> <span class=\"attr\">ontouchend</span>=<span class=\"string\">\"gtouchend()\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"\"</span>&gt;</span>测试区域<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>    </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\">  </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//以下判断语句用来处理手机端出现两次点击问题</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.screen.availHeight)&gt;<span class=\"number\">710</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"hit\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            a.setAttribute(<span class=\"string\">\"onclick\"</span>, <span class=\"string\">\"myclick()\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myclick</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        alert(<span class=\"string\">\"电脑点击\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> timeOutEvent=<span class=\"number\">0</span>;<span class=\"comment\">//定时器   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//开始按   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gtouchstart</span><span class=\"params\">()</span></span>&#123;   </span></span><br><span class=\"line\"><span class=\"actionscript\">        timeOutEvent = setTimeout(<span class=\"string\">\"longPress()\"</span>,<span class=\"number\">500</span>);<span class=\"comment\">//这里设置定时器，定义长按500毫秒触发长按事件，时间可以自己改，个人感觉500毫秒非常合适   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;   </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//手释放，如果在500毫秒内就释放，则取消长按事件，此时可以执行onclick应该执行的事件   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gtouchend</span><span class=\"params\">()</span></span>&#123;   </span></span><br><span class=\"line\"><span class=\"actionscript\">        clearTimeout(timeOutEvent);<span class=\"comment\">//清除定时器   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span>(timeOutEvent!=<span class=\"number\">0</span>)&#123;   </span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">//这里写要执行的内容（尤如onclick事件）   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"点击事件触发\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;  </span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"长按事件结束\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;   </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//如果手指有移动，则取消所有事件，此时说明用户只是要移动而不是长按   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gtouchmove</span><span class=\"params\">()</span></span>&#123;   </span></span><br><span class=\"line\"><span class=\"actionscript\">        clearTimeout(timeOutEvent);<span class=\"comment\">//清除定时器   </span></span></span><br><span class=\"line\"><span class=\"undefined\">        timeOutEvent = 0;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"sum\"</span>).innerHTML = <span class=\"string\">\"end...\"</span>;  </span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;   </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;  </span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">//真正长按后应该执行的内容   </span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">longPress</span><span class=\"params\">()</span></span>&#123;   </span></span><br><span class=\"line\"><span class=\"undefined\">        timeOutEvent = 0;   </span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">//执行长按要执行的内容，如弹出菜单  </span></span></span><br><span class=\"line\"><span class=\"actionscript\">        alert(<span class=\"string\">\"长按事件触发\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"js实现网页录音\"><a href=\"#js实现网页录音\" class=\"headerlink\" title=\"js实现网页录音\"></a>js实现网页录音</h3><p>参考Github中两个例子</p>\n<ul>\n<li><a href=\"https://github.com/mattdiamond/Recorderjs\" target=\"_blank\" rel=\"noopener\">https://github.com/mattdiamond/Recorderjs</a></li>\n<li><a href=\"https://github.com/xiangyuecn/Recorder\" target=\"_blank\" rel=\"noopener\">https://github.com/xiangyuecn/Recorder</a></li>\n</ul>\n<h3 id=\"使用XMLHttpRequest上传blob数据\"><a href=\"#使用XMLHttpRequest上传blob数据\" class=\"headerlink\" title=\"使用XMLHttpRequest上传blob数据\"></a>使用XMLHttpRequest上传blob数据</h3><ul>\n<li>构建Form表单，如果是Django必须添加一个csrfmiddlewaretoken字段。<br>html需包含以下内容：<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myform\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t</span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">csrf_token</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JS内容：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"type\">FormData</span>();</span><br><span class=\"line\"><span class=\"comment\">//csrf校验</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> csrf = myform.csrfmiddlewaretoken.value;</span><br><span class=\"line\">fd.append(<span class=\"string\">'csrfmiddlewaretoken'</span>,csrf);</span><br><span class=\"line\"></span><br><span class=\"line\">fd.append(<span class=\"string\">\"file\"</span>, <span class=\"built_in\">this</span>.getBlob());</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"type\">XMLHttpRequest</span>();</span><br><span class=\"line\"><span class=\"comment\">//设置xhr请求的超时时间</span></span><br><span class=\"line\">xhr.timeout = <span class=\"number\">3000</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置响应返回的数据格式</span></span><br><span class=\"line\">xhr.responseType = <span class=\"string\">\"text\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//创建一个 post 请求，采用异步</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">'POST'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//注册相关事件回调处理函数</span></span><br><span class=\"line\">xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span></span>(e) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.status == <span class=\"number\">200</span>||<span class=\"built_in\">this</span>.status == <span class=\"number\">304</span>)&#123;</span><br><span class=\"line\">   alert(xhr.responseText);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//发送数据</span></span><br><span class=\"line\">xhr.send(fd);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"引用外部的js文件\"><a href=\"#引用外部的js文件\" class=\"headerlink\" title=\"引用外部的js文件\"></a>引用外部的js文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域问题\"><a href=\"#作用域问题\" class=\"headerlink\" title=\"作用域问题\"></a>作用域问题</h3><p>　　1. 放在<code>&lt;head&gt;</code>部分<br>    head部分的代码会先于其余部分解析，所以如果要获取元素节点需要在js中加入<code>window.onload=function(){}</code>这个函数(加载完所有资源后执行)并把代码写在function中，这样才能获取到html定义的节点。<br>　　2. 放在<code>&lt;body&gt;</code>部分<br>    JavaScript代码在网页读取到该语句的时候就会执行。</p>\n<h3 id=\"全局变量与局部变量\"><a href=\"#全局变量与局部变量\" class=\"headerlink\" title=\"全局变量与局部变量\"></a>全局变量与局部变量</h3><p>　　1. 局部变量定义在function内部，格式为var+变量名<br>　　2. 全局变量两种常用的声明方式：<br>　　　１.定义在函数外部<br>　　　２.函数内部的变量上升为全局变量：不用var直接给变量赋值</p>\n<h2 id=\"二、CSS方面\"><a href=\"#二、CSS方面\" class=\"headerlink\" title=\"二、CSS方面\"></a>二、CSS方面</h2><h3 id=\"div元素居中问题\"><a href=\"#div元素居中问题\" class=\"headerlink\" title=\"div元素居中问题\"></a><code>div</code>元素居中问题</h3><pre><code>* 1、使用`margin`居中  \n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">margin-left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>-rigth:<span class=\"number\">50%</span>;</span><br></pre></td></tr></table></figure>\n\n* 2、使用`inline-block`居中  \n将元素设为`inline-block`,然后将父类元素设为`text-align:center;`\n</code></pre><h3 id=\"CSS设置鼠标悬浮样式\"><a href=\"#CSS设置鼠标悬浮样式\" class=\"headerlink\" title=\"CSS设置鼠标悬浮样式\"></a>CSS设置鼠标悬浮样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">th</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>:blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"同一行解决图片文字不对齐\"><a href=\"#同一行解决图片文字不对齐\" class=\"headerlink\" title=\"同一行解决图片文字不对齐\"></a>同一行解决图片文字不对齐</h3><p>设置图片的<code>margin-bottom:-10px</code>可使文字上移</p>\n<p>　　</p>"},{"layout":"posts","title":"PHP学习笔记","_content":"### 1.定义常量  \n```\n<?php\n\theader(\"Content-type:text/html;charset=utf-8\");\n\tdefine('HOST', '127.0.0.1');\n\tdefine('USERNAME', 'root');\n\tdefine('PASSWORD', '1111');\n?>\n```\n\n### 2.引用其它页面  \n```\n<?php \n\trequire_once('config.php');\n?>\n```\n\n### 3.连接MySQL数据库并设定数据库字符集 \n```\n<?php \n\n\trequire_once('config.php');\n    $con=mysqli_connect(HOST,USERNAME,PASSWORD,\"mydb\"); //mydb为数据库名\n    mysqli_set_charset($con,\"utf8\");\n\n?>\n```\n<!-- more -->\n### 4.获取POST请求的变量\n```\n<?php\n\trequire_once('../connect.php');//连接数据库\n\tprint_r($_POST);//输出表单提交的数据\n\tif (!(isset($_POST['title'])&&(!empty($_POST['title'])))) {//判断变量是否设置以及是否为空\n\t\techo \"<script>alert('标题不能为空');window.location.href='xxxx.html'</script>\";//执行js代码\n\t}\n\t$title=$_POST['title'];//获取表单中name对应的value\n\tdate_default_timezone_set('Asia/Shanghai');//设置时区\t\n\t$Date=date('Y-m-d H:i:s');//获取系统时间\n?>\n<!-- more -->\n```\n\n\n### 5.MySQL插入语句  \n```\n<?php\n\trequire_once('../connect.php');//连接数据库\n\t$title=$_POST['title'];\n\t$insertsql=\"insert into test(title) values('$title')\";//其中test为表名\n\techo $insertsql;//打印sql语句，可以复制到客户端执行检查是否正确\n\tif(mysqli_query($con,$insertsql)){\n\t\techo \"<script>alert('插入成功')</script>\";\n\t\n\t}\n\telse {\techo \"<script>alert('插入失败')\";\n\t}\n?>\n```\n\n### 6.MySQL查询(实现登录实例)\n```\n<?php\n\trequire_once('../connect.php');\n\t$name=$_POST['name'];\n\t$password=$_POST['password'];\n\t$sql=\"select * from user where name='$name'\";//从user的表中查询name为'$name'的全部属性\n\t $query=mysqli_query($con,$sql);//执行sql语句\n\t $pass=mysqli_fetch_assoc($query);//结果转化为关联数组\n\t $temp=$pass['password'];\n\t if ($temp==$password) {\n\t \tsetcookie(\"username\",$name,time()+3600*3);//设置cookie\n\t \techo \"<script>\n\t \talert('登录成功');window.location.href='xxx.html'\n\t \t</script>\";\n\t }\n\telse echo \"<script>alert('用户名或密码错误，请重试');window.location.href='login.html'</script>\";\n?>\n```\n\n### 7.MySQL删除\n```\n{% highlight php %}\n<?php\n\trequire_once('../connect.php');\n\t$id=$_GET['id'];\n\t$deletsql=\"delete from test where id=$id\";\n\tif (mysqli_query($con,$deletsql)) {\n\t\techo \"<script>alert('删除成功')</script>\";}\n\telse{echo \"<script>alert('删除失败')</script>\";}\n?>\n{% endhighlight %}\n```\n\n### 8.设置及获取cookie\n```\nsetcookie(\"username\",$name,time()+3600*3);//设置cookie\n<?php echo $_COOKIE[\"username\"]?>;//获取cookie\n```\n\n### 注：\n#### 1.php是在服务端解析的，所以需要在服务端配置php环境。  \n#### 2.html可以嵌套php语句但文件后缀需命名为.php,否则不解析。  \n#### 3.php5版本以后连数据库用的是mysqli和PDO,需要在配置文件中打开相应扩展。\n","source":"_posts/2017/2017-12-26-php学习笔记.md","raw":"---\nlayout: posts\ntitle: PHP学习笔记\ncategories: php学习笔记\ntags: \n\t- php\n\t- 数据库\n---\n### 1.定义常量  \n```\n<?php\n\theader(\"Content-type:text/html;charset=utf-8\");\n\tdefine('HOST', '127.0.0.1');\n\tdefine('USERNAME', 'root');\n\tdefine('PASSWORD', '1111');\n?>\n```\n\n### 2.引用其它页面  \n```\n<?php \n\trequire_once('config.php');\n?>\n```\n\n### 3.连接MySQL数据库并设定数据库字符集 \n```\n<?php \n\n\trequire_once('config.php');\n    $con=mysqli_connect(HOST,USERNAME,PASSWORD,\"mydb\"); //mydb为数据库名\n    mysqli_set_charset($con,\"utf8\");\n\n?>\n```\n<!-- more -->\n### 4.获取POST请求的变量\n```\n<?php\n\trequire_once('../connect.php');//连接数据库\n\tprint_r($_POST);//输出表单提交的数据\n\tif (!(isset($_POST['title'])&&(!empty($_POST['title'])))) {//判断变量是否设置以及是否为空\n\t\techo \"<script>alert('标题不能为空');window.location.href='xxxx.html'</script>\";//执行js代码\n\t}\n\t$title=$_POST['title'];//获取表单中name对应的value\n\tdate_default_timezone_set('Asia/Shanghai');//设置时区\t\n\t$Date=date('Y-m-d H:i:s');//获取系统时间\n?>\n<!-- more -->\n```\n\n\n### 5.MySQL插入语句  \n```\n<?php\n\trequire_once('../connect.php');//连接数据库\n\t$title=$_POST['title'];\n\t$insertsql=\"insert into test(title) values('$title')\";//其中test为表名\n\techo $insertsql;//打印sql语句，可以复制到客户端执行检查是否正确\n\tif(mysqli_query($con,$insertsql)){\n\t\techo \"<script>alert('插入成功')</script>\";\n\t\n\t}\n\telse {\techo \"<script>alert('插入失败')\";\n\t}\n?>\n```\n\n### 6.MySQL查询(实现登录实例)\n```\n<?php\n\trequire_once('../connect.php');\n\t$name=$_POST['name'];\n\t$password=$_POST['password'];\n\t$sql=\"select * from user where name='$name'\";//从user的表中查询name为'$name'的全部属性\n\t $query=mysqli_query($con,$sql);//执行sql语句\n\t $pass=mysqli_fetch_assoc($query);//结果转化为关联数组\n\t $temp=$pass['password'];\n\t if ($temp==$password) {\n\t \tsetcookie(\"username\",$name,time()+3600*3);//设置cookie\n\t \techo \"<script>\n\t \talert('登录成功');window.location.href='xxx.html'\n\t \t</script>\";\n\t }\n\telse echo \"<script>alert('用户名或密码错误，请重试');window.location.href='login.html'</script>\";\n?>\n```\n\n### 7.MySQL删除\n```\n{% highlight php %}\n<?php\n\trequire_once('../connect.php');\n\t$id=$_GET['id'];\n\t$deletsql=\"delete from test where id=$id\";\n\tif (mysqli_query($con,$deletsql)) {\n\t\techo \"<script>alert('删除成功')</script>\";}\n\telse{echo \"<script>alert('删除失败')</script>\";}\n?>\n{% endhighlight %}\n```\n\n### 8.设置及获取cookie\n```\nsetcookie(\"username\",$name,time()+3600*3);//设置cookie\n<?php echo $_COOKIE[\"username\"]?>;//获取cookie\n```\n\n### 注：\n#### 1.php是在服务端解析的，所以需要在服务端配置php环境。  \n#### 2.html可以嵌套php语句但文件后缀需命名为.php,否则不解析。  \n#### 3.php5版本以后连数据库用的是mysqli和PDO,需要在配置文件中打开相应扩展。\n","slug":"2017-2017-12-26-php学习笔记","published":1,"date":"2018-11-04T03:19:28.000Z","updated":"2018-10-07T01:08:08.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u960008d3fokuoihscz","content":"<h3 id=\"1-定义常量\"><a href=\"#1-定义常量\" class=\"headerlink\" title=\"1.定义常量\"></a>1.定义常量</h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\t<span class=\"keyword\">header</span>(<span class=\"string\">\"Content-type:text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">define</span></span>(<span class=\"string\">'HOST'</span>, <span class=\"string\">'127.0.0.1'</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">define</span></span>(<span class=\"string\">'USERNAME'</span>, <span class=\"string\">'root'</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">define</span></span>(<span class=\"string\">'PASSWORD'</span>, <span class=\"string\">'1111'</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-引用其它页面\"><a href=\"#2-引用其它页面\" class=\"headerlink\" title=\"2.引用其它页面\"></a>2.引用其它页面</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span> </span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'config.php'</span>);</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-连接MySQL数据库并设定数据库字符集\"><a href=\"#3-连接MySQL数据库并设定数据库字符集\" class=\"headerlink\" title=\"3.连接MySQL数据库并设定数据库字符集\"></a>3.连接MySQL数据库并设定数据库字符集</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span> </span></span><br><span class=\"line\"><span class=\"php\"></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'config.php'</span>);</span></span><br><span class=\"line\"><span class=\"php\">    $con=mysqli_connect(HOST,USERNAME,PASSWORD,<span class=\"string\">\"mydb\"</span>); <span class=\"comment\">//mydb为数据库名</span></span></span><br><span class=\"line\"><span class=\"php\">    mysqli_set_charset($con,<span class=\"string\">\"utf8\"</span>);</span></span><br><span class=\"line\"><span class=\"php\"></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"4-获取POST请求的变量\"><a href=\"#4-获取POST请求的变量\" class=\"headerlink\" title=\"4.获取POST请求的变量\"></a>4.获取POST请求的变量</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'../connect.php'</span>);<span class=\"comment\">//连接数据库</span></span></span><br><span class=\"line\"><span class=\"php\">\tprint_r($_POST);<span class=\"comment\">//输出表单提交的数据</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">if</span> (!(<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'title'</span>])&amp;&amp;(!<span class=\"keyword\">empty</span>($_POST[<span class=\"string\">'title'</span>])))) &#123;<span class=\"comment\">//判断变量是否设置以及是否为空</span></span></span><br><span class=\"line\"><span class=\"php\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;script&gt;alert('标题不能为空');window.location.href='xxxx.html'&lt;/script&gt;\"</span>;<span class=\"comment\">//执行js代码</span></span></span><br><span class=\"line\"><span class=\"php\">\t&#125;</span></span><br><span class=\"line\"><span class=\"php\">\t$title=$_POST[<span class=\"string\">'title'</span>];<span class=\"comment\">//获取表单中name对应的value</span></span></span><br><span class=\"line\"><span class=\"php\">\tdate_default_timezone_set(<span class=\"string\">'Asia/Shanghai'</span>);<span class=\"comment\">//设置时区\t</span></span></span><br><span class=\"line\"><span class=\"php\">\t$Date=date(<span class=\"string\">'Y-m-d H:i:s'</span>);<span class=\"comment\">//获取系统时间</span></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-MySQL插入语句\"><a href=\"#5-MySQL插入语句\" class=\"headerlink\" title=\"5.MySQL插入语句\"></a>5.MySQL插入语句</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'../connect.php'</span>);<span class=\"comment\">//连接数据库</span></span></span><br><span class=\"line\"><span class=\"php\">\t$title=$_POST[<span class=\"string\">'title'</span>];</span></span><br><span class=\"line\"><span class=\"php\">\t$insertsql=<span class=\"string\">\"insert into test(title) values('$title')\"</span>;<span class=\"comment\">//其中test为表名</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">echo</span> $insertsql;<span class=\"comment\">//打印sql语句，可以复制到客户端执行检查是否正确</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">if</span>(mysqli_query($con,$insertsql))&#123;</span></span><br><span class=\"line\"><span class=\"php\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;script&gt;alert('插入成功')&lt;/script&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"php\">\t</span></span><br><span class=\"line\"><span class=\"php\">\t&#125;</span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">else</span> &#123;\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;script&gt;alert('插入失败')\"</span>;</span></span><br><span class=\"line\"><span class=\"php\">\t&#125;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-MySQL查询-实现登录实例\"><a href=\"#6-MySQL查询-实现登录实例\" class=\"headerlink\" title=\"6.MySQL查询(实现登录实例)\"></a>6.MySQL查询(实现登录实例)</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'../connect.php'</span>);</span></span><br><span class=\"line\"><span class=\"php\">\t$name=$_POST[<span class=\"string\">'name'</span>];</span></span><br><span class=\"line\"><span class=\"php\">\t$password=$_POST[<span class=\"string\">'password'</span>];</span></span><br><span class=\"line\"><span class=\"php\">\t$sql=<span class=\"string\">\"select * from user where name='$name'\"</span>;<span class=\"comment\">//从user的表中查询name为'$name'的全部属性</span></span></span><br><span class=\"line\"><span class=\"php\">\t $query=mysqli_query($con,$sql);<span class=\"comment\">//执行sql语句</span></span></span><br><span class=\"line\"><span class=\"php\">\t $pass=mysqli_fetch_assoc($query);<span class=\"comment\">//结果转化为关联数组</span></span></span><br><span class=\"line\"><span class=\"php\">\t $temp=$pass[<span class=\"string\">'password'</span>];</span></span><br><span class=\"line\"><span class=\"php\">\t <span class=\"keyword\">if</span> ($temp==$password) &#123;</span></span><br><span class=\"line\"><span class=\"php\">\t \tsetcookie(<span class=\"string\">\"username\"</span>,$name,time()+<span class=\"number\">3600</span>*<span class=\"number\">3</span>);<span class=\"comment\">//设置cookie</span></span></span><br><span class=\"line\">\t \techo \"&lt;script&gt;</span><br><span class=\"line\">\t \talert('登录成功');window.location.href='xxx.html'</span><br><span class=\"line\"><span class=\"php\">\t \t&lt;/script&gt;<span class=\"string\">\";</span></span></span><br><span class=\"line\"><span class=\"php\">\t &#125;</span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;script&gt;alert('用户名或密码错误，请重试');window.location.href='login.html'&lt;/script&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-MySQL删除\"><a href=\"#7-MySQL删除\" class=\"headerlink\" title=\"7.MySQL删除\"></a>7.MySQL删除</h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">highlight</span> php %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span></span><br><span class=\"line\"><span class=\"xml\">\trequire_once('../connect.php');</span></span><br><span class=\"line\"><span class=\"xml\">\t$id=$_GET['id'];</span></span><br><span class=\"line\"><span class=\"xml\">\t$deletsql=\"delete from test where id=$id\";</span></span><br><span class=\"line\"><span class=\"xml\">\tif (mysqli_query($con,$deletsql)) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">\t\techo \"<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\">alert(<span class=\"string\">'删除成功'</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\";&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\telse&#123;echo \"<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\">alert(<span class=\"string\">'删除失败'</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\";&#125;</span></span><br><span class=\"line\"><span class=\"xml\">?&gt;</span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">endhighlight</span> %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-设置及获取cookie\"><a href=\"#8-设置及获取cookie\" class=\"headerlink\" title=\"8.设置及获取cookie\"></a>8.设置及获取cookie</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setcookie(<span class=\"string\">\"username\"</span>,$name,time()+<span class=\"number\">3600</span>*<span class=\"number\">3</span>);<span class=\"comment\">//设置cookie</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> $_COOKIE[<span class=\"string\">\"username\"</span>]<span class=\"meta\">?&gt;</span>;<span class=\"comment\">//获取cookie</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h3><h4 id=\"1-php是在服务端解析的，所以需要在服务端配置php环境。\"><a href=\"#1-php是在服务端解析的，所以需要在服务端配置php环境。\" class=\"headerlink\" title=\"1.php是在服务端解析的，所以需要在服务端配置php环境。\"></a>1.php是在服务端解析的，所以需要在服务端配置php环境。</h4><h4 id=\"2-html可以嵌套php语句但文件后缀需命名为-php-否则不解析。\"><a href=\"#2-html可以嵌套php语句但文件后缀需命名为-php-否则不解析。\" class=\"headerlink\" title=\"2.html可以嵌套php语句但文件后缀需命名为.php,否则不解析。\"></a>2.html可以嵌套php语句但文件后缀需命名为.php,否则不解析。</h4><h4 id=\"3-php5版本以后连数据库用的是mysqli和PDO-需要在配置文件中打开相应扩展。\"><a href=\"#3-php5版本以后连数据库用的是mysqli和PDO-需要在配置文件中打开相应扩展。\" class=\"headerlink\" title=\"3.php5版本以后连数据库用的是mysqli和PDO,需要在配置文件中打开相应扩展。\"></a>3.php5版本以后连数据库用的是mysqli和PDO,需要在配置文件中打开相应扩展。</h4>","site":{"data":{}},"excerpt":"<h3 id=\"1-定义常量\"><a href=\"#1-定义常量\" class=\"headerlink\" title=\"1.定义常量\"></a>1.定义常量</h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\t<span class=\"keyword\">header</span>(<span class=\"string\">\"Content-type:text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">define</span></span>(<span class=\"string\">'HOST'</span>, <span class=\"string\">'127.0.0.1'</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">define</span></span>(<span class=\"string\">'USERNAME'</span>, <span class=\"string\">'root'</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">define</span></span>(<span class=\"string\">'PASSWORD'</span>, <span class=\"string\">'1111'</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-引用其它页面\"><a href=\"#2-引用其它页面\" class=\"headerlink\" title=\"2.引用其它页面\"></a>2.引用其它页面</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span> </span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'config.php'</span>);</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-连接MySQL数据库并设定数据库字符集\"><a href=\"#3-连接MySQL数据库并设定数据库字符集\" class=\"headerlink\" title=\"3.连接MySQL数据库并设定数据库字符集\"></a>3.连接MySQL数据库并设定数据库字符集</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span> </span></span><br><span class=\"line\"><span class=\"php\"></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'config.php'</span>);</span></span><br><span class=\"line\"><span class=\"php\">    $con=mysqli_connect(HOST,USERNAME,PASSWORD,<span class=\"string\">\"mydb\"</span>); <span class=\"comment\">//mydb为数据库名</span></span></span><br><span class=\"line\"><span class=\"php\">    mysqli_set_charset($con,<span class=\"string\">\"utf8\"</span>);</span></span><br><span class=\"line\"><span class=\"php\"></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"4-获取POST请求的变量\"><a href=\"#4-获取POST请求的变量\" class=\"headerlink\" title=\"4.获取POST请求的变量\"></a>4.获取POST请求的变量</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'../connect.php'</span>);<span class=\"comment\">//连接数据库</span></span></span><br><span class=\"line\"><span class=\"php\">\tprint_r($_POST);<span class=\"comment\">//输出表单提交的数据</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">if</span> (!(<span class=\"keyword\">isset</span>($_POST[<span class=\"string\">'title'</span>])&amp;&amp;(!<span class=\"keyword\">empty</span>($_POST[<span class=\"string\">'title'</span>])))) &#123;<span class=\"comment\">//判断变量是否设置以及是否为空</span></span></span><br><span class=\"line\"><span class=\"php\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;script&gt;alert('标题不能为空');window.location.href='xxxx.html'&lt;/script&gt;\"</span>;<span class=\"comment\">//执行js代码</span></span></span><br><span class=\"line\"><span class=\"php\">\t&#125;</span></span><br><span class=\"line\"><span class=\"php\">\t$title=$_POST[<span class=\"string\">'title'</span>];<span class=\"comment\">//获取表单中name对应的value</span></span></span><br><span class=\"line\"><span class=\"php\">\tdate_default_timezone_set(<span class=\"string\">'Asia/Shanghai'</span>);<span class=\"comment\">//设置时区\t</span></span></span><br><span class=\"line\"><span class=\"php\">\t$Date=date(<span class=\"string\">'Y-m-d H:i:s'</span>);<span class=\"comment\">//获取系统时间</span></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-MySQL插入语句\"><a href=\"#5-MySQL插入语句\" class=\"headerlink\" title=\"5.MySQL插入语句\"></a>5.MySQL插入语句</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'../connect.php'</span>);<span class=\"comment\">//连接数据库</span></span></span><br><span class=\"line\"><span class=\"php\">\t$title=$_POST[<span class=\"string\">'title'</span>];</span></span><br><span class=\"line\"><span class=\"php\">\t$insertsql=<span class=\"string\">\"insert into test(title) values('$title')\"</span>;<span class=\"comment\">//其中test为表名</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">echo</span> $insertsql;<span class=\"comment\">//打印sql语句，可以复制到客户端执行检查是否正确</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">if</span>(mysqli_query($con,$insertsql))&#123;</span></span><br><span class=\"line\"><span class=\"php\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;script&gt;alert('插入成功')&lt;/script&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"php\">\t</span></span><br><span class=\"line\"><span class=\"php\">\t&#125;</span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">else</span> &#123;\t<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;script&gt;alert('插入失败')\"</span>;</span></span><br><span class=\"line\"><span class=\"php\">\t&#125;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-MySQL查询-实现登录实例\"><a href=\"#6-MySQL查询-实现登录实例\" class=\"headerlink\" title=\"6.MySQL查询(实现登录实例)\"></a>6.MySQL查询(实现登录实例)</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">require_once</span>(<span class=\"string\">'../connect.php'</span>);</span></span><br><span class=\"line\"><span class=\"php\">\t$name=$_POST[<span class=\"string\">'name'</span>];</span></span><br><span class=\"line\"><span class=\"php\">\t$password=$_POST[<span class=\"string\">'password'</span>];</span></span><br><span class=\"line\"><span class=\"php\">\t$sql=<span class=\"string\">\"select * from user where name='$name'\"</span>;<span class=\"comment\">//从user的表中查询name为'$name'的全部属性</span></span></span><br><span class=\"line\"><span class=\"php\">\t $query=mysqli_query($con,$sql);<span class=\"comment\">//执行sql语句</span></span></span><br><span class=\"line\"><span class=\"php\">\t $pass=mysqli_fetch_assoc($query);<span class=\"comment\">//结果转化为关联数组</span></span></span><br><span class=\"line\"><span class=\"php\">\t $temp=$pass[<span class=\"string\">'password'</span>];</span></span><br><span class=\"line\"><span class=\"php\">\t <span class=\"keyword\">if</span> ($temp==$password) &#123;</span></span><br><span class=\"line\"><span class=\"php\">\t \tsetcookie(<span class=\"string\">\"username\"</span>,$name,time()+<span class=\"number\">3600</span>*<span class=\"number\">3</span>);<span class=\"comment\">//设置cookie</span></span></span><br><span class=\"line\">\t \techo \"&lt;script&gt;</span><br><span class=\"line\">\t \talert('登录成功');window.location.href='xxx.html'</span><br><span class=\"line\"><span class=\"php\">\t \t&lt;/script&gt;<span class=\"string\">\";</span></span></span><br><span class=\"line\"><span class=\"php\">\t &#125;</span></span><br><span class=\"line\"><span class=\"php\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;script&gt;alert('用户名或密码错误，请重试');window.location.href='login.html'&lt;/script&gt;\"</span>;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"meta\">?&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-MySQL删除\"><a href=\"#7-MySQL删除\" class=\"headerlink\" title=\"7.MySQL删除\"></a>7.MySQL删除</h3><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">highlight</span> php %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span></span><br><span class=\"line\"><span class=\"xml\">\trequire_once('../connect.php');</span></span><br><span class=\"line\"><span class=\"xml\">\t$id=$_GET['id'];</span></span><br><span class=\"line\"><span class=\"xml\">\t$deletsql=\"delete from test where id=$id\";</span></span><br><span class=\"line\"><span class=\"xml\">\tif (mysqli_query($con,$deletsql)) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">\t\techo \"<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\">alert(<span class=\"string\">'删除成功'</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\";&#125;</span></span><br><span class=\"line\"><span class=\"xml\">\telse&#123;echo \"<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"actionscript\">alert(<span class=\"string\">'删除失败'</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>\";&#125;</span></span><br><span class=\"line\"><span class=\"xml\">?&gt;</span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">endhighlight</span> %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-设置及获取cookie\"><a href=\"#8-设置及获取cookie\" class=\"headerlink\" title=\"8.设置及获取cookie\"></a>8.设置及获取cookie</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setcookie(<span class=\"string\">\"username\"</span>,$name,time()+<span class=\"number\">3600</span>*<span class=\"number\">3</span>);<span class=\"comment\">//设置cookie</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">echo</span> $_COOKIE[<span class=\"string\">\"username\"</span>]<span class=\"meta\">?&gt;</span>;<span class=\"comment\">//获取cookie</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"注：\"><a href=\"#注：\" class=\"headerlink\" title=\"注：\"></a>注：</h3><h4 id=\"1-php是在服务端解析的，所以需要在服务端配置php环境。\"><a href=\"#1-php是在服务端解析的，所以需要在服务端配置php环境。\" class=\"headerlink\" title=\"1.php是在服务端解析的，所以需要在服务端配置php环境。\"></a>1.php是在服务端解析的，所以需要在服务端配置php环境。</h4><h4 id=\"2-html可以嵌套php语句但文件后缀需命名为-php-否则不解析。\"><a href=\"#2-html可以嵌套php语句但文件后缀需命名为-php-否则不解析。\" class=\"headerlink\" title=\"2.html可以嵌套php语句但文件后缀需命名为.php,否则不解析。\"></a>2.html可以嵌套php语句但文件后缀需命名为.php,否则不解析。</h4><h4 id=\"3-php5版本以后连数据库用的是mysqli和PDO-需要在配置文件中打开相应扩展。\"><a href=\"#3-php5版本以后连数据库用的是mysqli和PDO-需要在配置文件中打开相应扩展。\" class=\"headerlink\" title=\"3.php5版本以后连数据库用的是mysqli和PDO,需要在配置文件中打开相应扩展。\"></a>3.php5版本以后连数据库用的是mysqli和PDO,需要在配置文件中打开相应扩展。</h4>"},{"layout":"posts","title":"Java利用JDBC连接SQLserver数据库及简单的增删改操作","_content":"## 准备工作  \n#### 1.下载JDBC驱动包。[sqljdbc4.jar](https://pan.baidu.com/s/1kU9JoLD),也可以从官网下载[https://www.microsoft.com/zh-cn/download/details.aspx?id=11774](https://www.microsoft.com/zh-cn/download/details.aspx?id=11774)。  \n#### 2.用sql server身份验证方式连接数据库。\n如果安装sql server时是以windows身份验证安装的，没有为sql server添加sql sever身份用户，需要首先添加用户：\n打开Microsoft SQL Server Management Studio并以windows验证方式登录，左侧的对象资源管理器->安全性->登录名，右击sa->属性，为sa用户添加密码，选择sql server身份验证，在“状态”项中授予连接到数据库和登录启用;\n#### 3.以下代码是基于新建了一个名为`test`的数据库，在该库下的建了一个`student`表。  \n　　1.表的结构如下：   \n![](http://onkin31ah.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171229135531.jpg)   \n　　2.可以先在表中增加一些值。右键`dbo.student`这个表->编辑前200行。    \n![](http://onkin31ah.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE.jpg)\n## 开始编程  \n#### 1.打开Eclipse新建一个项目。\n<!-- more -->\n#### 2.在项目目录下右键`src`->Build Path->Configure Build Path->Libraries->Add External JARs->找到之前下载的JDBC驱动包，添加即可。\n#### 3.在项目下添加以下三个class。  \n##### Student.java  \n```java\npublic class Student {\n\tString No;//学号\n\tString Name;//姓名\n\tpublic Student(String sNo,String sName){\n\t\tNo=sNo;//成员变量初始化\n\t\tName=sName;\n\t}\n}\n\n```\n##### StudentSystem.java  \n```\nimport java.sql.*;//导入包\npublic class StudentSystem {\n\tConnection conn; //数据库连接对象\n    Statement stmt;//执行简单的SQL语句\n    PreparedStatement pstm;//执行带参数的SQL语句\n   ResultSet rs;//保存查询结果\n   String url = \"jdbc:sqlserver://localhost:1433;DatabaseName=test;\";//本地数据库地址及数据库名（DatabaseName是自己建立的数据库名）\n   StudentSystem()throws Exception{\n\t   conn = DriverManager.getConnection(url, \"sa\", \"123456\");//加载驱动并连接数据库（其中第一个参数为数据库地址，第二、三个参数分别为数据库用户名和密码）\n   }\n   //查询并显示全部学生信息\n   void selectAll()throws SQLException{\n\t   stmt = conn.createStatement();//创建Statement对象\n\t   rs = stmt.executeQuery(\"select * from student\");//执行SQL语句\n\t   while(rs.next()){\n           String name = rs.getString(\"Name\");\n           String No = rs.getString(\"No\");\n           System.out.println(\"No:\" + No + \"\\tName:\" + name);\n\t   }\n   }\n   //查找特定学生信息\n   void selectNo(String No)throws SQLException{\n\t   stmt = conn.createStatement();\n\t   rs = stmt.executeQuery(\"select * from student where No='\"+No+\"'\");\n\t   if(rs.next()){\n\t\t   String name = rs.getString(\"Name\");\n           String No1 = rs.getString(\"No\");\n           System.out.println(\"No:\" + No1 + \"\\tName:\" + name);\n\t   }\n   }\n //插入学生信息\n   void insertStudent(Student s)throws SQLException{\n\t   pstm=conn.prepareStatement(\"insert into student values(?,?)\");\n\t   pstm.setString(1,s.No);//插入values的第一个参数；\n\t   pstm.setString(2, s.Name);\n\t   \n\t   pstm.executeUpdate();\n\t   pstm.close();\n   }\n   //删除指定学生信息\n   void deleteNo(String No)throws SQLException{\n\t   pstm=conn.prepareStatement(\"delete from student where No=?\");\n\t   pstm.setString(1, No);\n\t   pstm.executeUpdate();\n\t   pstm.close();\n   }\n   //修改学生信息\n   void updateStudent(Student s)throws SQLException{\n\t   pstm=conn.prepareStatement(\"update student set Name=? where No=?\");\n\t   pstm.setString(1,s.Name);//插入values的第一个参数；\n\t   pstm.setString(2, s.No);\n\t   pstm.executeUpdate();\n\t   pstm.close();\n   }\n   void closeConn()throws SQLException{conn.close();}\n  \n}\n\n```\n##### MainStudent.java  \n```\npublic class MainStudent {\n\n\tpublic static void main(String[] args)throws Exception {\n\t\t\n\t\tStudentSystem ss=new StudentSystem();//创建数据库操作实例\n\t\tStudent s=new Student(\"2017\",\"st1\");//创建学生对象\n//\t\tss.insertStudent(s);//将学生信息插入到数据库\n//\t\tss.deleteNo(\"001\");//删除学号为001学生的信息\n//\t\tss.updateStudent(s);//修改学号为s.No学生的姓名\n//以上三条语句根据需要选择打开\n\t\tss.selectAll();//查询并显示所有学生信息\n\t\tss.closeConn();//关闭数据库连接\n\t}\n}\n\n```\n以上程序运行后会输出数据库中的所有信息。","source":"_posts/2017/2017-12-29-Java利用JDBC连接SQLserver数据库.md","raw":"---\nlayout: posts\ntitle: Java利用JDBC连接SQLserver数据库及简单的增删改操作\ncategories: Java学习笔记\ntags: \n    - java\n    - JDBC\n    - SQLserver\n---\n## 准备工作  \n#### 1.下载JDBC驱动包。[sqljdbc4.jar](https://pan.baidu.com/s/1kU9JoLD),也可以从官网下载[https://www.microsoft.com/zh-cn/download/details.aspx?id=11774](https://www.microsoft.com/zh-cn/download/details.aspx?id=11774)。  \n#### 2.用sql server身份验证方式连接数据库。\n如果安装sql server时是以windows身份验证安装的，没有为sql server添加sql sever身份用户，需要首先添加用户：\n打开Microsoft SQL Server Management Studio并以windows验证方式登录，左侧的对象资源管理器->安全性->登录名，右击sa->属性，为sa用户添加密码，选择sql server身份验证，在“状态”项中授予连接到数据库和登录启用;\n#### 3.以下代码是基于新建了一个名为`test`的数据库，在该库下的建了一个`student`表。  \n　　1.表的结构如下：   \n![](http://onkin31ah.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171229135531.jpg)   \n　　2.可以先在表中增加一些值。右键`dbo.student`这个表->编辑前200行。    \n![](http://onkin31ah.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE.jpg)\n## 开始编程  \n#### 1.打开Eclipse新建一个项目。\n<!-- more -->\n#### 2.在项目目录下右键`src`->Build Path->Configure Build Path->Libraries->Add External JARs->找到之前下载的JDBC驱动包，添加即可。\n#### 3.在项目下添加以下三个class。  \n##### Student.java  \n```java\npublic class Student {\n\tString No;//学号\n\tString Name;//姓名\n\tpublic Student(String sNo,String sName){\n\t\tNo=sNo;//成员变量初始化\n\t\tName=sName;\n\t}\n}\n\n```\n##### StudentSystem.java  \n```\nimport java.sql.*;//导入包\npublic class StudentSystem {\n\tConnection conn; //数据库连接对象\n    Statement stmt;//执行简单的SQL语句\n    PreparedStatement pstm;//执行带参数的SQL语句\n   ResultSet rs;//保存查询结果\n   String url = \"jdbc:sqlserver://localhost:1433;DatabaseName=test;\";//本地数据库地址及数据库名（DatabaseName是自己建立的数据库名）\n   StudentSystem()throws Exception{\n\t   conn = DriverManager.getConnection(url, \"sa\", \"123456\");//加载驱动并连接数据库（其中第一个参数为数据库地址，第二、三个参数分别为数据库用户名和密码）\n   }\n   //查询并显示全部学生信息\n   void selectAll()throws SQLException{\n\t   stmt = conn.createStatement();//创建Statement对象\n\t   rs = stmt.executeQuery(\"select * from student\");//执行SQL语句\n\t   while(rs.next()){\n           String name = rs.getString(\"Name\");\n           String No = rs.getString(\"No\");\n           System.out.println(\"No:\" + No + \"\\tName:\" + name);\n\t   }\n   }\n   //查找特定学生信息\n   void selectNo(String No)throws SQLException{\n\t   stmt = conn.createStatement();\n\t   rs = stmt.executeQuery(\"select * from student where No='\"+No+\"'\");\n\t   if(rs.next()){\n\t\t   String name = rs.getString(\"Name\");\n           String No1 = rs.getString(\"No\");\n           System.out.println(\"No:\" + No1 + \"\\tName:\" + name);\n\t   }\n   }\n //插入学生信息\n   void insertStudent(Student s)throws SQLException{\n\t   pstm=conn.prepareStatement(\"insert into student values(?,?)\");\n\t   pstm.setString(1,s.No);//插入values的第一个参数；\n\t   pstm.setString(2, s.Name);\n\t   \n\t   pstm.executeUpdate();\n\t   pstm.close();\n   }\n   //删除指定学生信息\n   void deleteNo(String No)throws SQLException{\n\t   pstm=conn.prepareStatement(\"delete from student where No=?\");\n\t   pstm.setString(1, No);\n\t   pstm.executeUpdate();\n\t   pstm.close();\n   }\n   //修改学生信息\n   void updateStudent(Student s)throws SQLException{\n\t   pstm=conn.prepareStatement(\"update student set Name=? where No=?\");\n\t   pstm.setString(1,s.Name);//插入values的第一个参数；\n\t   pstm.setString(2, s.No);\n\t   pstm.executeUpdate();\n\t   pstm.close();\n   }\n   void closeConn()throws SQLException{conn.close();}\n  \n}\n\n```\n##### MainStudent.java  \n```\npublic class MainStudent {\n\n\tpublic static void main(String[] args)throws Exception {\n\t\t\n\t\tStudentSystem ss=new StudentSystem();//创建数据库操作实例\n\t\tStudent s=new Student(\"2017\",\"st1\");//创建学生对象\n//\t\tss.insertStudent(s);//将学生信息插入到数据库\n//\t\tss.deleteNo(\"001\");//删除学号为001学生的信息\n//\t\tss.updateStudent(s);//修改学号为s.No学生的姓名\n//以上三条语句根据需要选择打开\n\t\tss.selectAll();//查询并显示所有学生信息\n\t\tss.closeConn();//关闭数据库连接\n\t}\n}\n\n```\n以上程序运行后会输出数据库中的所有信息。","slug":"2017-2017-12-29-Java利用JDBC连接SQLserver数据库","published":1,"date":"2018-11-04T03:19:28.000Z","updated":"2018-10-07T02:24:16.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9a000bd3foocol3696","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h4 id=\"1-下载JDBC驱动包。sqljdbc4-jar-也可以从官网下载https-www-microsoft-com-zh-cn-download-details-aspx-id-11774。\"><a href=\"#1-下载JDBC驱动包。sqljdbc4-jar-也可以从官网下载https-www-microsoft-com-zh-cn-download-details-aspx-id-11774。\" class=\"headerlink\" title=\"1.下载JDBC驱动包。sqljdbc4.jar,也可以从官网下载https://www.microsoft.com/zh-cn/download/details.aspx?id=11774。\"></a>1.下载JDBC驱动包。<a href=\"https://pan.baidu.com/s/1kU9JoLD\" target=\"_blank\" rel=\"noopener\">sqljdbc4.jar</a>,也可以从官网下载<a href=\"https://www.microsoft.com/zh-cn/download/details.aspx?id=11774\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/zh-cn/download/details.aspx?id=11774</a>。</h4><h4 id=\"2-用sql-server身份验证方式连接数据库。\"><a href=\"#2-用sql-server身份验证方式连接数据库。\" class=\"headerlink\" title=\"2.用sql server身份验证方式连接数据库。\"></a>2.用sql server身份验证方式连接数据库。</h4><p>如果安装sql server时是以windows身份验证安装的，没有为sql server添加sql sever身份用户，需要首先添加用户：<br>打开Microsoft SQL Server Management Studio并以windows验证方式登录，左侧的对象资源管理器-&gt;安全性-&gt;登录名，右击sa-&gt;属性，为sa用户添加密码，选择sql server身份验证，在“状态”项中授予连接到数据库和登录启用;</p>\n<h4 id=\"3-以下代码是基于新建了一个名为test的数据库，在该库下的建了一个student表。\"><a href=\"#3-以下代码是基于新建了一个名为test的数据库，在该库下的建了一个student表。\" class=\"headerlink\" title=\"3.以下代码是基于新建了一个名为test的数据库，在该库下的建了一个student表。\"></a>3.以下代码是基于新建了一个名为<code>test</code>的数据库，在该库下的建了一个<code>student</code>表。</h4><p>　　1.表的结构如下：<br><img src=\"http://onkin31ah.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171229135531.jpg\" alt=\"\"><br>　　2.可以先在表中增加一些值。右键<code>dbo.student</code>这个表-&gt;编辑前200行。<br><img src=\"http://onkin31ah.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE.jpg\" alt=\"\"></p>\n<h2 id=\"开始编程\"><a href=\"#开始编程\" class=\"headerlink\" title=\"开始编程\"></a>开始编程</h2><h4 id=\"1-打开Eclipse新建一个项目。\"><a href=\"#1-打开Eclipse新建一个项目。\" class=\"headerlink\" title=\"1.打开Eclipse新建一个项目。\"></a>1.打开Eclipse新建一个项目。</h4><a id=\"more\"></a>\n<h4 id=\"2-在项目目录下右键src-gt-Build-Path-gt-Configure-Build-Path-gt-Libraries-gt-Add-External-JARs-gt-找到之前下载的JDBC驱动包，添加即可。\"><a href=\"#2-在项目目录下右键src-gt-Build-Path-gt-Configure-Build-Path-gt-Libraries-gt-Add-External-JARs-gt-找到之前下载的JDBC驱动包，添加即可。\" class=\"headerlink\" title=\"2.在项目目录下右键src-&gt;Build Path-&gt;Configure Build Path-&gt;Libraries-&gt;Add External JARs-&gt;找到之前下载的JDBC驱动包，添加即可。\"></a>2.在项目目录下右键<code>src</code>-&gt;Build Path-&gt;Configure Build Path-&gt;Libraries-&gt;Add External JARs-&gt;找到之前下载的JDBC驱动包，添加即可。</h4><h4 id=\"3-在项目下添加以下三个class。\"><a href=\"#3-在项目下添加以下三个class。\" class=\"headerlink\" title=\"3.在项目下添加以下三个class。\"></a>3.在项目下添加以下三个class。</h4><h5 id=\"Student-java\"><a href=\"#Student-java\" class=\"headerlink\" title=\"Student.java\"></a>Student.java</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">\tString No;<span class=\"comment\">//学号</span></span><br><span class=\"line\">\tString Name;<span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String sNo,String sName)</span></span>&#123;</span><br><span class=\"line\">\t\tNo=sNo;<span class=\"comment\">//成员变量初始化</span></span><br><span class=\"line\">\t\tName=sName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"StudentSystem-java\"><a href=\"#StudentSystem-java\" class=\"headerlink\" title=\"StudentSystem.java\"></a>StudentSystem.java</h5><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;<span class=\"comment\">//导入包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> class StudentSystem &#123;</span><br><span class=\"line\">\tConnection conn; <span class=\"comment\">//数据库连接对象</span></span><br><span class=\"line\">    Statement stmt;<span class=\"comment\">//执行简单的SQL语句</span></span><br><span class=\"line\">    PreparedStatement pstm;<span class=\"comment\">//执行带参数的SQL语句</span></span><br><span class=\"line\">   ResultSet rs;<span class=\"comment\">//保存查询结果</span></span><br><span class=\"line\">   <span class=\"keyword\">String</span> url = <span class=\"string\">\"jdbc:sqlserver://localhost:1433;DatabaseName=test;\"</span>;<span class=\"comment\">//本地数据库地址及数据库名（DatabaseName是自己建立的数据库名）</span></span><br><span class=\"line\">   StudentSystem()<span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">\t   conn = DriverManager.getConnection(url, <span class=\"string\">\"sa\"</span>, <span class=\"string\">\"123456\"</span>);<span class=\"comment\">//加载驱动并连接数据库（其中第一个参数为数据库地址，第二、三个参数分别为数据库用户名和密码）</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//查询并显示全部学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> selectAll()<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   stmt = conn.createStatement();<span class=\"comment\">//创建Statement对象</span></span><br><span class=\"line\">\t   rs = stmt.executeQuery(<span class=\"string\">\"select * from student\"</span>);<span class=\"comment\">//执行SQL语句</span></span><br><span class=\"line\">\t   <span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">           <span class=\"keyword\">String</span> name = rs.getString(<span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">String</span> No = rs.getString(<span class=\"string\">\"No\"</span>);</span><br><span class=\"line\">           System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"No:\"</span> + No + <span class=\"string\">\"\\tName:\"</span> + name);</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//查找特定学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> selectNo(<span class=\"keyword\">String</span> No)<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   stmt = conn.createStatement();</span><br><span class=\"line\">\t   rs = stmt.executeQuery(<span class=\"string\">\"select * from student where No='\"</span>+No+<span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">\t   <span class=\"keyword\">if</span>(rs.next())&#123;</span><br><span class=\"line\">\t\t   <span class=\"keyword\">String</span> name = rs.getString(<span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">String</span> No1 = rs.getString(<span class=\"string\">\"No\"</span>);</span><br><span class=\"line\">           System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"No:\"</span> + No1 + <span class=\"string\">\"\\tName:\"</span> + name);</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"comment\">//插入学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> insertStudent(Student s)<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   pstm=conn.prepareStatement(<span class=\"string\">\"insert into student values(?,?)\"</span>);</span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">1</span>,s.No);<span class=\"comment\">//插入values的第一个参数；</span></span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">2</span>, s.Name);</span><br><span class=\"line\">\t   </span><br><span class=\"line\">\t   pstm.executeUpdate();</span><br><span class=\"line\">\t   pstm.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//删除指定学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> deleteNo(<span class=\"keyword\">String</span> No)<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   pstm=conn.prepareStatement(<span class=\"string\">\"delete from student where No=?\"</span>);</span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">1</span>, No);</span><br><span class=\"line\">\t   pstm.executeUpdate();</span><br><span class=\"line\">\t   pstm.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//修改学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> updateStudent(Student s)<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   pstm=conn.prepareStatement(<span class=\"string\">\"update student set Name=? where No=?\"</span>);</span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">1</span>,s.Name);<span class=\"comment\">//插入values的第一个参数；</span></span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">2</span>, s.No);</span><br><span class=\"line\">\t   pstm.executeUpdate();</span><br><span class=\"line\">\t   pstm.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">void</span> closeConn()<span class=\"keyword\">throws</span> SQLException&#123;conn.close();&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"MainStudent-java\"><a href=\"#MainStudent-java\" class=\"headerlink\" title=\"MainStudent.java\"></a>MainStudent.java</h5><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainStudent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args)throws Exception &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStudentSystem ss=<span class=\"keyword\">new</span> <span class=\"type\">StudentSystem</span>();<span class=\"comment\">//创建数据库操作实例</span></span><br><span class=\"line\">\t\tStudent s=<span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">\"2017\"</span>,<span class=\"string\">\"st1\"</span>);<span class=\"comment\">//创建学生对象</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tss.insertStudent(s);//将学生信息插入到数据库</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tss.deleteNo(\"001\");//删除学号为001学生的信息</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tss.updateStudent(s);//修改学号为s.No学生的姓名</span></span><br><span class=\"line\"><span class=\"comment\">//以上三条语句根据需要选择打开</span></span><br><span class=\"line\">\t\tss.selectAll();<span class=\"comment\">//查询并显示所有学生信息</span></span><br><span class=\"line\">\t\tss.closeConn();<span class=\"comment\">//关闭数据库连接</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序运行后会输出数据库中的所有信息。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h4 id=\"1-下载JDBC驱动包。sqljdbc4-jar-也可以从官网下载https-www-microsoft-com-zh-cn-download-details-aspx-id-11774。\"><a href=\"#1-下载JDBC驱动包。sqljdbc4-jar-也可以从官网下载https-www-microsoft-com-zh-cn-download-details-aspx-id-11774。\" class=\"headerlink\" title=\"1.下载JDBC驱动包。sqljdbc4.jar,也可以从官网下载https://www.microsoft.com/zh-cn/download/details.aspx?id=11774。\"></a>1.下载JDBC驱动包。<a href=\"https://pan.baidu.com/s/1kU9JoLD\" target=\"_blank\" rel=\"noopener\">sqljdbc4.jar</a>,也可以从官网下载<a href=\"https://www.microsoft.com/zh-cn/download/details.aspx?id=11774\" target=\"_blank\" rel=\"noopener\">https://www.microsoft.com/zh-cn/download/details.aspx?id=11774</a>。</h4><h4 id=\"2-用sql-server身份验证方式连接数据库。\"><a href=\"#2-用sql-server身份验证方式连接数据库。\" class=\"headerlink\" title=\"2.用sql server身份验证方式连接数据库。\"></a>2.用sql server身份验证方式连接数据库。</h4><p>如果安装sql server时是以windows身份验证安装的，没有为sql server添加sql sever身份用户，需要首先添加用户：<br>打开Microsoft SQL Server Management Studio并以windows验证方式登录，左侧的对象资源管理器-&gt;安全性-&gt;登录名，右击sa-&gt;属性，为sa用户添加密码，选择sql server身份验证，在“状态”项中授予连接到数据库和登录启用;</p>\n<h4 id=\"3-以下代码是基于新建了一个名为test的数据库，在该库下的建了一个student表。\"><a href=\"#3-以下代码是基于新建了一个名为test的数据库，在该库下的建了一个student表。\" class=\"headerlink\" title=\"3.以下代码是基于新建了一个名为test的数据库，在该库下的建了一个student表。\"></a>3.以下代码是基于新建了一个名为<code>test</code>的数据库，在该库下的建了一个<code>student</code>表。</h4><p>　　1.表的结构如下：<br><img src=\"http://onkin31ah.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171229135531.jpg\" alt=\"\"><br>　　2.可以先在表中增加一些值。右键<code>dbo.student</code>这个表-&gt;编辑前200行。<br><img src=\"http://onkin31ah.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE.jpg\" alt=\"\"></p>\n<h2 id=\"开始编程\"><a href=\"#开始编程\" class=\"headerlink\" title=\"开始编程\"></a>开始编程</h2><h4 id=\"1-打开Eclipse新建一个项目。\"><a href=\"#1-打开Eclipse新建一个项目。\" class=\"headerlink\" title=\"1.打开Eclipse新建一个项目。\"></a>1.打开Eclipse新建一个项目。</h4>","more":"<h4 id=\"2-在项目目录下右键src-gt-Build-Path-gt-Configure-Build-Path-gt-Libraries-gt-Add-External-JARs-gt-找到之前下载的JDBC驱动包，添加即可。\"><a href=\"#2-在项目目录下右键src-gt-Build-Path-gt-Configure-Build-Path-gt-Libraries-gt-Add-External-JARs-gt-找到之前下载的JDBC驱动包，添加即可。\" class=\"headerlink\" title=\"2.在项目目录下右键src-&gt;Build Path-&gt;Configure Build Path-&gt;Libraries-&gt;Add External JARs-&gt;找到之前下载的JDBC驱动包，添加即可。\"></a>2.在项目目录下右键<code>src</code>-&gt;Build Path-&gt;Configure Build Path-&gt;Libraries-&gt;Add External JARs-&gt;找到之前下载的JDBC驱动包，添加即可。</h4><h4 id=\"3-在项目下添加以下三个class。\"><a href=\"#3-在项目下添加以下三个class。\" class=\"headerlink\" title=\"3.在项目下添加以下三个class。\"></a>3.在项目下添加以下三个class。</h4><h5 id=\"Student-java\"><a href=\"#Student-java\" class=\"headerlink\" title=\"Student.java\"></a>Student.java</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">\tString No;<span class=\"comment\">//学号</span></span><br><span class=\"line\">\tString Name;<span class=\"comment\">//姓名</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String sNo,String sName)</span></span>&#123;</span><br><span class=\"line\">\t\tNo=sNo;<span class=\"comment\">//成员变量初始化</span></span><br><span class=\"line\">\t\tName=sName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"StudentSystem-java\"><a href=\"#StudentSystem-java\" class=\"headerlink\" title=\"StudentSystem.java\"></a>StudentSystem.java</h5><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.*;<span class=\"comment\">//导入包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> class StudentSystem &#123;</span><br><span class=\"line\">\tConnection conn; <span class=\"comment\">//数据库连接对象</span></span><br><span class=\"line\">    Statement stmt;<span class=\"comment\">//执行简单的SQL语句</span></span><br><span class=\"line\">    PreparedStatement pstm;<span class=\"comment\">//执行带参数的SQL语句</span></span><br><span class=\"line\">   ResultSet rs;<span class=\"comment\">//保存查询结果</span></span><br><span class=\"line\">   <span class=\"keyword\">String</span> url = <span class=\"string\">\"jdbc:sqlserver://localhost:1433;DatabaseName=test;\"</span>;<span class=\"comment\">//本地数据库地址及数据库名（DatabaseName是自己建立的数据库名）</span></span><br><span class=\"line\">   StudentSystem()<span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">\t   conn = DriverManager.getConnection(url, <span class=\"string\">\"sa\"</span>, <span class=\"string\">\"123456\"</span>);<span class=\"comment\">//加载驱动并连接数据库（其中第一个参数为数据库地址，第二、三个参数分别为数据库用户名和密码）</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//查询并显示全部学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> selectAll()<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   stmt = conn.createStatement();<span class=\"comment\">//创建Statement对象</span></span><br><span class=\"line\">\t   rs = stmt.executeQuery(<span class=\"string\">\"select * from student\"</span>);<span class=\"comment\">//执行SQL语句</span></span><br><span class=\"line\">\t   <span class=\"keyword\">while</span>(rs.next())&#123;</span><br><span class=\"line\">           <span class=\"keyword\">String</span> name = rs.getString(<span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">String</span> No = rs.getString(<span class=\"string\">\"No\"</span>);</span><br><span class=\"line\">           System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"No:\"</span> + No + <span class=\"string\">\"\\tName:\"</span> + name);</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//查找特定学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> selectNo(<span class=\"keyword\">String</span> No)<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   stmt = conn.createStatement();</span><br><span class=\"line\">\t   rs = stmt.executeQuery(<span class=\"string\">\"select * from student where No='\"</span>+No+<span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">\t   <span class=\"keyword\">if</span>(rs.next())&#123;</span><br><span class=\"line\">\t\t   <span class=\"keyword\">String</span> name = rs.getString(<span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">String</span> No1 = rs.getString(<span class=\"string\">\"No\"</span>);</span><br><span class=\"line\">           System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"No:\"</span> + No1 + <span class=\"string\">\"\\tName:\"</span> + name);</span><br><span class=\"line\">\t   &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> <span class=\"comment\">//插入学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> insertStudent(Student s)<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   pstm=conn.prepareStatement(<span class=\"string\">\"insert into student values(?,?)\"</span>);</span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">1</span>,s.No);<span class=\"comment\">//插入values的第一个参数；</span></span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">2</span>, s.Name);</span><br><span class=\"line\">\t   </span><br><span class=\"line\">\t   pstm.executeUpdate();</span><br><span class=\"line\">\t   pstm.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//删除指定学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> deleteNo(<span class=\"keyword\">String</span> No)<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   pstm=conn.prepareStatement(<span class=\"string\">\"delete from student where No=?\"</span>);</span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">1</span>, No);</span><br><span class=\"line\">\t   pstm.executeUpdate();</span><br><span class=\"line\">\t   pstm.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//修改学生信息</span></span><br><span class=\"line\">   <span class=\"keyword\">void</span> updateStudent(Student s)<span class=\"keyword\">throws</span> SQLException&#123;</span><br><span class=\"line\">\t   pstm=conn.prepareStatement(<span class=\"string\">\"update student set Name=? where No=?\"</span>);</span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">1</span>,s.Name);<span class=\"comment\">//插入values的第一个参数；</span></span><br><span class=\"line\">\t   pstm.setString(<span class=\"number\">2</span>, s.No);</span><br><span class=\"line\">\t   pstm.executeUpdate();</span><br><span class=\"line\">\t   pstm.close();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">void</span> closeConn()<span class=\"keyword\">throws</span> SQLException&#123;conn.close();&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"MainStudent-java\"><a href=\"#MainStudent-java\" class=\"headerlink\" title=\"MainStudent.java\"></a>MainStudent.java</h5><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainStudent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args)throws Exception &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tStudentSystem ss=<span class=\"keyword\">new</span> <span class=\"type\">StudentSystem</span>();<span class=\"comment\">//创建数据库操作实例</span></span><br><span class=\"line\">\t\tStudent s=<span class=\"keyword\">new</span> <span class=\"type\">Student</span>(<span class=\"string\">\"2017\"</span>,<span class=\"string\">\"st1\"</span>);<span class=\"comment\">//创建学生对象</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tss.insertStudent(s);//将学生信息插入到数据库</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tss.deleteNo(\"001\");//删除学号为001学生的信息</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tss.updateStudent(s);//修改学号为s.No学生的姓名</span></span><br><span class=\"line\"><span class=\"comment\">//以上三条语句根据需要选择打开</span></span><br><span class=\"line\">\t\tss.selectAll();<span class=\"comment\">//查询并显示所有学生信息</span></span><br><span class=\"line\">\t\tss.closeConn();<span class=\"comment\">//关闭数据库连接</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上程序运行后会输出数据库中的所有信息。</p>"},{"layout":"posts","title":"python爬虫","_content":"## 请求库（requests）\n### 安装\n```\npip install requests\n```\n### 用法\n#### 带参数get请求\n```\nimport requests\nresponse=requests.get(\"http://httpbin.org/get?name=Tome&age=22\")\nprint(response.text)\n```\n```\nimport requests\ndata={\n\t'name':'Tom',\n\t'age':'22'\n}\nresponse=requests.get(\"http://httpbin.org/get\",params=data)\nprint(response.text)\n```\n<!-- more -->\n#### 获取二进制数据（用于保存图片视频）\n```\nimport requests\nresponse=requests.get(\"https://github.com/favicon.ico\")\nprint(response.content)\n```  \n图片保存为本地文件\n``` \nimport requests\nresponse=requests.get(\"https://github.com/faviccon.ico\")\nwith open('favicon','wb') as f:\n\tf.write(response.content)\n\tf.close()\n```\n#### 添加headers\n```\nimport requests\nheaders={\n\t'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'\n}\nresponse=requests.get('https://zhihu.com/explore',headers=headers)\nprint(response.text)\n```\n#### 基本post请求\n```\nimport requests\ndata={'name':'Tom','age':'22'}\nheaders={\n\t'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'\n}\nresponse=requests.post('https://httpbin.org/post',data=data,headers=headers)\nprint(response.text)\n```\n#### 文件上传\n```\nimport requests\nfiles={'file':open('favicon.ico','rb')}\nresponse=requests.post('https://httpbin.org/post',files=files)\nprint(response.text)\n```\n#### 会话维持\n```\nimport requests\ns=requests.session()\ns.get('http://httpbin.org/cookies/set/number/123456')\nresponse=s.get('http://httpbin.org/cookies')\nprint(response.text)\n```\n#### 证书验证\n```\nimport requests\nresponse=requests.get('https://www.12306.cn',verify=False)\nprint(response.status_code)\n```\n## 解析库（BeautifulSoup）\n### 安装\n```\npip3 install bs4\n```\n```\npip install lxml\n```\n### 标准选择器\n```\nfrom bs4 import BeautifulSoup\nimport requests\nheaders={\n\t'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'\n}\nhtml=requests.get('https://zhihu.com/explore',headers=headers).text\nsoup = BeautifulSoup(html,'lxml')\ns=soup.find_all('h2')#用标签选择\n#s=soup.find_all(attrs={'data-za-element-name':'Title'})#用attrs选择\n#s=soup.find_all(text=re.compile(\"考研\"))#正则表达式匹配内容\nfor a in s:\n    print(a.string)#打印内容\n```\n### css选择器\n\n#### 获取内容及属性值\n```\nfrom bs4 import BeautifulSoup\nimport requests\nimport re\nheaders={\n\t'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'\n}\nhtml=requests.get('https://zhihu.com/explore',headers=headers).text\nsoup = BeautifulSoup(html,'lxml')\ns=soup.select('h2 a')#css选择逐层查找\nfor a in s:\n    print(a.get_text(strip=True),'https://zhihu.com'+a.attrs['href'])#获取内容，属性并去除空白\n```\n#### 通过类名查找\n```\ns=soup.select('.question_link')#css通过类名查找\n```\n","source":"_posts/2018/2018-01-30-python爬虫.md","raw":"---\nlayout: posts\ntitle: python爬虫\ncategories: python学习笔记\ntags: \n\t- 爬虫\n---\n## 请求库（requests）\n### 安装\n```\npip install requests\n```\n### 用法\n#### 带参数get请求\n```\nimport requests\nresponse=requests.get(\"http://httpbin.org/get?name=Tome&age=22\")\nprint(response.text)\n```\n```\nimport requests\ndata={\n\t'name':'Tom',\n\t'age':'22'\n}\nresponse=requests.get(\"http://httpbin.org/get\",params=data)\nprint(response.text)\n```\n<!-- more -->\n#### 获取二进制数据（用于保存图片视频）\n```\nimport requests\nresponse=requests.get(\"https://github.com/favicon.ico\")\nprint(response.content)\n```  \n图片保存为本地文件\n``` \nimport requests\nresponse=requests.get(\"https://github.com/faviccon.ico\")\nwith open('favicon','wb') as f:\n\tf.write(response.content)\n\tf.close()\n```\n#### 添加headers\n```\nimport requests\nheaders={\n\t'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'\n}\nresponse=requests.get('https://zhihu.com/explore',headers=headers)\nprint(response.text)\n```\n#### 基本post请求\n```\nimport requests\ndata={'name':'Tom','age':'22'}\nheaders={\n\t'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'\n}\nresponse=requests.post('https://httpbin.org/post',data=data,headers=headers)\nprint(response.text)\n```\n#### 文件上传\n```\nimport requests\nfiles={'file':open('favicon.ico','rb')}\nresponse=requests.post('https://httpbin.org/post',files=files)\nprint(response.text)\n```\n#### 会话维持\n```\nimport requests\ns=requests.session()\ns.get('http://httpbin.org/cookies/set/number/123456')\nresponse=s.get('http://httpbin.org/cookies')\nprint(response.text)\n```\n#### 证书验证\n```\nimport requests\nresponse=requests.get('https://www.12306.cn',verify=False)\nprint(response.status_code)\n```\n## 解析库（BeautifulSoup）\n### 安装\n```\npip3 install bs4\n```\n```\npip install lxml\n```\n### 标准选择器\n```\nfrom bs4 import BeautifulSoup\nimport requests\nheaders={\n\t'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'\n}\nhtml=requests.get('https://zhihu.com/explore',headers=headers).text\nsoup = BeautifulSoup(html,'lxml')\ns=soup.find_all('h2')#用标签选择\n#s=soup.find_all(attrs={'data-za-element-name':'Title'})#用attrs选择\n#s=soup.find_all(text=re.compile(\"考研\"))#正则表达式匹配内容\nfor a in s:\n    print(a.string)#打印内容\n```\n### css选择器\n\n#### 获取内容及属性值\n```\nfrom bs4 import BeautifulSoup\nimport requests\nimport re\nheaders={\n\t'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'\n}\nhtml=requests.get('https://zhihu.com/explore',headers=headers).text\nsoup = BeautifulSoup(html,'lxml')\ns=soup.select('h2 a')#css选择逐层查找\nfor a in s:\n    print(a.get_text(strip=True),'https://zhihu.com'+a.attrs['href'])#获取内容，属性并去除空白\n```\n#### 通过类名查找\n```\ns=soup.select('.question_link')#css通过类名查找\n```\n","slug":"2018-2018-01-30-python爬虫","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:07:30.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9d000ed3fo99d4tpxj","content":"<h2 id=\"请求库（requests）\"><a href=\"#请求库（requests）\" class=\"headerlink\" title=\"请求库（requests）\"></a>请求库（requests）</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> requests</span><br></pre></td></tr></table></figure>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><h4 id=\"带参数get请求\"><a href=\"#带参数get请求\" class=\"headerlink\" title=\"带参数get请求\"></a>带参数get请求</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">response=requests.<span class=\"built_in\">get</span>(<span class=\"string\">\"http://httpbin.org/get?name=Tome&amp;age=22\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.<span class=\"built_in\">text</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">data</span>=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'name'</span>:<span class=\"string\">'Tom'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'age'</span>:<span class=\"string\">'22'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response=requests.get(<span class=\"string\">\"http://httpbin.org/get\"</span>,params=<span class=\"keyword\">data</span>)</span><br><span class=\"line\">print(response.<span class=\"keyword\">text</span>)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"获取二进制数据（用于保存图片视频）\"><a href=\"#获取二进制数据（用于保存图片视频）\" class=\"headerlink\" title=\"获取二进制数据（用于保存图片视频）\"></a>获取二进制数据（用于保存图片视频）</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">response=requests.get(<span class=\"string\">\"https://github.com/favicon.ico\"</span>)</span><br><span class=\"line\">print(response.content)</span><br><span class=\"line\">```  </span><br><span class=\"line\">图片保存为本地文件</span><br><span class=\"line\">``` </span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">response=requests.get(<span class=\"string\">\"https://github.com/faviccon.ico\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'favicon'</span>,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">\tf.write(response.content)</span><br><span class=\"line\">\tf.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加headers\"><a href=\"#添加headers\" class=\"headerlink\" title=\"添加headers\"></a>添加headers</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">headers=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response=requests.<span class=\"built_in\">get</span>(<span class=\"string\">'https://zhihu.com/explore'</span>,headers=headers)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.<span class=\"built_in\">text</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"基本post请求\"><a href=\"#基本post请求\" class=\"headerlink\" title=\"基本post请求\"></a>基本post请求</h4><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">data</span>=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Tom'</span>,<span class=\"string\">'age'</span>:<span class=\"string\">'22'</span>&#125;</span><br><span class=\"line\">headers=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response=requests.post(<span class=\"string\">'https://httpbin.org/post'</span>,<span class=\"keyword\">data</span>=<span class=\"keyword\">data</span>,headers=headers)</span><br><span class=\"line\">print(response.<span class=\"keyword\">text</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"><span class=\"keyword\">files</span>=&#123;<span class=\"string\">'file'</span>:<span class=\"keyword\">open</span>(<span class=\"string\">'favicon.ico'</span>,<span class=\"string\">'rb'</span>)&#125;</span><br><span class=\"line\">response=requests.post(<span class=\"string\">'https://httpbin.org/post'</span>,<span class=\"keyword\">files</span>=<span class=\"keyword\">files</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span>(response.text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"会话维持\"><a href=\"#会话维持\" class=\"headerlink\" title=\"会话维持\"></a>会话维持</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">s=requests.session()</span><br><span class=\"line\">s.<span class=\"built_in\">get</span>(<span class=\"string\">'http://httpbin.org/cookies/set/number/123456'</span>)</span><br><span class=\"line\">response=s.<span class=\"built_in\">get</span>(<span class=\"string\">'http://httpbin.org/cookies'</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.<span class=\"built_in\">text</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"证书验证\"><a href=\"#证书验证\" class=\"headerlink\" title=\"证书验证\"></a>证书验证</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">response=requests.<span class=\"keyword\">get</span>('https:<span class=\"comment\">//www.12306.cn',verify=False)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status_code)</span><br></pre></td></tr></table></figure>\n<h2 id=\"解析库（BeautifulSoup）\"><a href=\"#解析库（BeautifulSoup）\" class=\"headerlink\" title=\"解析库（BeautifulSoup）\"></a>解析库（BeautifulSoup）</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> bs4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> lxml</span><br></pre></td></tr></table></figure>\n<h3 id=\"标准选择器\"><a href=\"#标准选择器\" class=\"headerlink\" title=\"标准选择器\"></a>标准选择器</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">headers=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html=requests.get(<span class=\"string\">'https://zhihu.com/explore'</span>,headers=headers).text</span><br><span class=\"line\">soup = BeautifulSoup(html,<span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">s=soup.find_all(<span class=\"string\">'h2'</span>)#用标签选择</span><br><span class=\"line\">#s=soup.find_all(attrs=&#123;<span class=\"string\">'data-za-element-name'</span>:<span class=\"string\">'Title'</span>&#125;)#用attrs选择</span><br><span class=\"line\">#s=soup.find_all(text=re.compile(<span class=\"string\">\"考研\"</span>))#正则表达式匹配内容</span><br><span class=\"line\">for a <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    print(a.string)#打印内容</span><br></pre></td></tr></table></figure>\n<h3 id=\"css选择器\"><a href=\"#css选择器\" class=\"headerlink\" title=\"css选择器\"></a>css选择器</h3><h4 id=\"获取内容及属性值\"><a href=\"#获取内容及属性值\" class=\"headerlink\" title=\"获取内容及属性值\"></a>获取内容及属性值</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import re</span><br><span class=\"line\">headers=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html=requests.get(<span class=\"string\">'https://zhihu.com/explore'</span>,headers=headers).text</span><br><span class=\"line\">soup = BeautifulSoup(<span class=\"selector-tag\">html</span>,<span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">s=soup.select(<span class=\"string\">'h2 a'</span>)#css选择逐层查找</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"selector-tag\">a</span> <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    print(<span class=\"selector-tag\">a</span>.get_text(strip=True),<span class=\"string\">'https://zhihu.com'</span>+<span class=\"selector-tag\">a</span><span class=\"selector-class\">.attrs</span>[<span class=\"string\">'href'</span>])#获取内容，属性并去除空白</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过类名查找\"><a href=\"#通过类名查找\" class=\"headerlink\" title=\"通过类名查找\"></a>通过类名查找</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=soup.<span class=\"keyword\">select</span>(<span class=\"string\">'.question_link'</span>)<span class=\"meta\">#css通过类名查找</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"请求库（requests）\"><a href=\"#请求库（requests）\" class=\"headerlink\" title=\"请求库（requests）\"></a>请求库（requests）</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> requests</span><br></pre></td></tr></table></figure>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><h4 id=\"带参数get请求\"><a href=\"#带参数get请求\" class=\"headerlink\" title=\"带参数get请求\"></a>带参数get请求</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">response=requests.<span class=\"built_in\">get</span>(<span class=\"string\">\"http://httpbin.org/get?name=Tome&amp;age=22\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.<span class=\"built_in\">text</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">data</span>=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'name'</span>:<span class=\"string\">'Tom'</span>,</span><br><span class=\"line\">\t<span class=\"string\">'age'</span>:<span class=\"string\">'22'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response=requests.get(<span class=\"string\">\"http://httpbin.org/get\"</span>,params=<span class=\"keyword\">data</span>)</span><br><span class=\"line\">print(response.<span class=\"keyword\">text</span>)</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"获取二进制数据（用于保存图片视频）\"><a href=\"#获取二进制数据（用于保存图片视频）\" class=\"headerlink\" title=\"获取二进制数据（用于保存图片视频）\"></a>获取二进制数据（用于保存图片视频）</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">response=requests.get(<span class=\"string\">\"https://github.com/favicon.ico\"</span>)</span><br><span class=\"line\">print(response.content)</span><br><span class=\"line\">```  </span><br><span class=\"line\">图片保存为本地文件</span><br><span class=\"line\">``` </span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">response=requests.get(<span class=\"string\">\"https://github.com/faviccon.ico\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'favicon'</span>,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">\tf.write(response.content)</span><br><span class=\"line\">\tf.close()</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加headers\"><a href=\"#添加headers\" class=\"headerlink\" title=\"添加headers\"></a>添加headers</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">headers=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response=requests.<span class=\"built_in\">get</span>(<span class=\"string\">'https://zhihu.com/explore'</span>,headers=headers)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.<span class=\"built_in\">text</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"基本post请求\"><a href=\"#基本post请求\" class=\"headerlink\" title=\"基本post请求\"></a>基本post请求</h4><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">data</span>=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Tom'</span>,<span class=\"string\">'age'</span>:<span class=\"string\">'22'</span>&#125;</span><br><span class=\"line\">headers=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response=requests.post(<span class=\"string\">'https://httpbin.org/post'</span>,<span class=\"keyword\">data</span>=<span class=\"keyword\">data</span>,headers=headers)</span><br><span class=\"line\">print(response.<span class=\"keyword\">text</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"><span class=\"keyword\">files</span>=&#123;<span class=\"string\">'file'</span>:<span class=\"keyword\">open</span>(<span class=\"string\">'favicon.ico'</span>,<span class=\"string\">'rb'</span>)&#125;</span><br><span class=\"line\">response=requests.post(<span class=\"string\">'https://httpbin.org/post'</span>,<span class=\"keyword\">files</span>=<span class=\"keyword\">files</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span>(response.text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"会话维持\"><a href=\"#会话维持\" class=\"headerlink\" title=\"会话维持\"></a>会话维持</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">s=requests.session()</span><br><span class=\"line\">s.<span class=\"built_in\">get</span>(<span class=\"string\">'http://httpbin.org/cookies/set/number/123456'</span>)</span><br><span class=\"line\">response=s.<span class=\"built_in\">get</span>(<span class=\"string\">'http://httpbin.org/cookies'</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.<span class=\"built_in\">text</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"证书验证\"><a href=\"#证书验证\" class=\"headerlink\" title=\"证书验证\"></a>证书验证</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">response=requests.<span class=\"keyword\">get</span>('https:<span class=\"comment\">//www.12306.cn',verify=False)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(response.status_code)</span><br></pre></td></tr></table></figure>\n<h2 id=\"解析库（BeautifulSoup）\"><a href=\"#解析库（BeautifulSoup）\" class=\"headerlink\" title=\"解析库（BeautifulSoup）\"></a>解析库（BeautifulSoup）</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> bs4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> lxml</span><br></pre></td></tr></table></figure>\n<h3 id=\"标准选择器\"><a href=\"#标准选择器\" class=\"headerlink\" title=\"标准选择器\"></a>标准选择器</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">headers=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html=requests.get(<span class=\"string\">'https://zhihu.com/explore'</span>,headers=headers).text</span><br><span class=\"line\">soup = BeautifulSoup(html,<span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">s=soup.find_all(<span class=\"string\">'h2'</span>)#用标签选择</span><br><span class=\"line\">#s=soup.find_all(attrs=&#123;<span class=\"string\">'data-za-element-name'</span>:<span class=\"string\">'Title'</span>&#125;)#用attrs选择</span><br><span class=\"line\">#s=soup.find_all(text=re.compile(<span class=\"string\">\"考研\"</span>))#正则表达式匹配内容</span><br><span class=\"line\">for a <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    print(a.string)#打印内容</span><br></pre></td></tr></table></figure>\n<h3 id=\"css选择器\"><a href=\"#css选择器\" class=\"headerlink\" title=\"css选择器\"></a>css选择器</h3><h4 id=\"获取内容及属性值\"><a href=\"#获取内容及属性值\" class=\"headerlink\" title=\"获取内容及属性值\"></a>获取内容及属性值</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import re</span><br><span class=\"line\">headers=&#123;</span><br><span class=\"line\">\t<span class=\"string\">'User-Agent'</span>:<span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html=requests.get(<span class=\"string\">'https://zhihu.com/explore'</span>,headers=headers).text</span><br><span class=\"line\">soup = BeautifulSoup(<span class=\"selector-tag\">html</span>,<span class=\"string\">'lxml'</span>)</span><br><span class=\"line\">s=soup.select(<span class=\"string\">'h2 a'</span>)#css选择逐层查找</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"selector-tag\">a</span> <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">    print(<span class=\"selector-tag\">a</span>.get_text(strip=True),<span class=\"string\">'https://zhihu.com'</span>+<span class=\"selector-tag\">a</span><span class=\"selector-class\">.attrs</span>[<span class=\"string\">'href'</span>])#获取内容，属性并去除空白</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过类名查找\"><a href=\"#通过类名查找\" class=\"headerlink\" title=\"通过类名查找\"></a>通过类名查找</h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s=soup.<span class=\"keyword\">select</span>(<span class=\"string\">'.question_link'</span>)<span class=\"meta\">#css通过类名查找</span></span><br></pre></td></tr></table></figure>"},{"layout":"posts","title":"python学习笔记","_content":"\n<div id=\"MDcategory\"></div>\n## 基础\n### 注释\n注释 是任何存在于 # 号右侧的文字，其主要用作写给程序读者看的笔记。\n举个例子：\n```\nprint('hello world') #注意到 print 是一个函数\n```\n### 输入与输出\n#### 输出\n用`print()`在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出'hello, world'，用代码实现如下：\n```\n>>> print('hello, world')\n```\n`print()`函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：\n```\n>>> print('The quick brown fox', 'jumps over', 'the lazy dog')\nThe quick brown fox jumps over the lazy dog\n```\n`print()`会依次打印每个字符串，遇到逗号“,”会输出一个空格。\n### 输入\nPython提供了一个`input()`，可以让用户输入字符串，并存放到一个变量里,还可以让你显示一个字符串来提示用户。如：\n```\nname = input('please enter your name: ')\nprint('hello,', name)\n```\ninput()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：\n```\ns = input('birth: ')\nbirth = int(s)\nif birth < 2000:\n    print('00前')\nelse:\n    print('00后')\n```\n### 数据类型\n#### 整数\nPython可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。\n\n计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。\n\n#### 浮点数\n浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。\n整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。\n\n#### 字符串\n字符串是以单引号'或双引号\"括起来的任意文本，比如'abc'，\"xyz\"等等。请注意，''或\"\"本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符。如果'本身也是一个字符，那就可以用\"\"括起来，比如\"I'm OK\"包含的字符是I，'，m，空格，O，K这6个字符。\n**如果字符串内部既包含'又包含\"怎么办？可以用转义字符\\来标识，也可以在*三引号*之间自由地使用单引号与双引号。**\n如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r''表示''内部的字符串默认不转义。\n#### 布尔值\n一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：\n```\n>>> True\nTrue\n>>> False\nFalse\n>>> 3 > 2\nTrue\n>>> 3 > 5\nFalse\n```\n布尔值可以用and、or和not运算。\n```\n>>> 5 > 3 and 3 > 1\nTrue\n```\n#### 空值\n空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。\n### 变量\n在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，\n```\na = 123 # a是整数\nprint(a)\na = 'ABC' # a变为字符串\nprint(a)\n```\n这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。\n### 运算符与表达式\n下面是可用运算符的速览：\n\n1. **\\+（加)**   \n两个对象相加。\n3+5 则输出 8 。 'a' + 'b' 则输出 'ab' 。\n2. **\\- （减)**     \n从一个数中减去另一个数，如果第一个操作数不存在，则假定为零。\n-5.2 将输出一个负数， 50 - 24 输出 26 。\n3. **\\* （乘）**     \n给出两个数的乘积，或返回字符串重复指定次数后的结果。\n  'la' * 3 输出 'lalala' 。\n4. **\\** （乘方）**     \n返回 x 的 y 次方。\n3 ** 4 输出 81 （即 3 * 3 * 3 * 3 ）。\n5. **/ （除）**   \nx 除以 y\n13 / 3 输出 4.333333333333333 。\n6. **// （整除）**\nx 除以 y 并对结果向下取整至最接近的整数。\n13 // 3 输出 4 。\n-13 // 3 输出 -5 。\n7. **% （取模）**\n返回除法运算后的余数。\n13 % 3 输出 1 。 -25.5 % 2.25 输出 1.5 。\n8. **<< （左移）**\n将数字的位向左移动指定的位数。（每个数字在内存中以二进制数表示，即 0 和1）\n2 << 2 输出 8 。 2 用二进制数表示为 10 。\n向左移 2 位会得到 1000 这一结果，表示十进制中的 8 。\n9. **>> （右移）**\n将数字的位向右移动指定的位数。\n11 >> 1 输出 5 。\n11 在二进制中表示为 1011 ，右移一位后输出 101 这一结果，表示十进制中的\n5 。\n10. **& （按位与）**\n对数字进行按位与操作。\n5 & 3 输出 1 。\n11. **| （按位或）**\n对数字进行按位或操作。\n5 | 3 输出 7 。\n12. **^ （按位异或）**\n对数字进行按位异或操作。\n5 ^ 3 输出 6 。\n13. **~ （按位取反）**\nx 的按位取反结果为 -(x+1)。\n~5 输出 -6 。\n### 格式化\n在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：\n```\n>>> 'Hello, %s' % 'world'\n'Hello, world'\n>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)\n'Hi, Michael, you have $1000000.'\n```\n在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。     \n如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串    \n另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，\n```\n>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)\n'Hello, 小明, 成绩提升了 17.1%'\n```\n### list\nPython内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。\n比如，列出班里所有同学的名字，就可以用一个list表示：\n```\n>>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n```\n变量classmates就是一个list。用len()函数可以获得list元素的个数   \n用索引来访问list中每一个位置的元素，记得索引是从0开始的：   \n```\n>>> classmates[0]\n'Michael'\n>>> classmates[1]\n'Bob'\n>>> classmates[2]\n'Tracy'\n>>> classmates[3]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n```\n如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素  \nlist是一个可变的有序表，所以，可以往list中追加元素到末尾：\n```\n>>> classmates.append('Adam')\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n```\n也可以把元素插入到指定的位置，比如索引号为1的位置：\n```\n>>> classmates.insert(1, 'Jack')\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n```\n要删除list末尾的元素，用pop()方法\n```\n>>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n```\n要删除指定位置的元素，用pop(i)方法，其中i是索引位置：\n```\n>>> classmates.pop(1)\n'Jack'\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n```\n要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：\n```\n>>> classmates[1] = 'Sarah'\n>>> classmates\n['Michael', 'Sarah', 'Tracy']\n```\n### tuple\n另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：\n```\n>>> classmates = ('Michael', 'Bob', 'Tracy')\n```\n现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。   \ntuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来   \n只有1个元素的tuple定义时必须加一个逗号\n```\n>>> t = (1,)\n>>> t\n(1,)\n```\n最后来看一个“可变的”tuple：\n```\n>>> t = ('a', 'b', ['A', 'B'])\n>>> t[2][0] = 'X'\n>>> t[2][1] = 'Y'\n>>> t\n('a', 'b', ['X', 'Y'])\n```\n### 条件判断\n```\nage = 3\nif age >= 18:\n    print('adult')\nelif age >= 6:\n    print('teenager')\nelse:\n    print('kid')\n```\n### 循环\n#### for...in循环\n```\nnames = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n```\n执行这段代码，会依次打印names的每一个元素：\n```\nMichael\nBob\nTracy\n```\nrange(101)就可以生成0-100的整数序列，计算如下\n```\nsum = 0\nfor x in range(101):\n    sum = sum + x\nprint(sum)\n```\n#### while循环\n只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：   \n```\nsum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n```\n在循环中，break语句可以提前退出循环。   \n在循环过程中，也可以通过continue语句，跳过当前的这次循环(continue后面语句不执行)，直接开始下一次循环。\n### dict\nPython内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。  \n```\n>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n```\n把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：\n```\n>>> d['Adam'] = 67\n>>> d['Adam']\n67\n```\n由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉,如果key不存在，dict就会报错.   \n要删除一个key，用pop(key)方法，对应的value也会从dict中删除：\n```\n>>> d.pop('Bob')\n75\n>>> d\n{'Michael': 95, 'Tracy': 85}\n```\n和list比较，dict有以下几个特点：\n\n1.查找和插入的速度极快，不会随着key的增加而变慢；    \n2.需要占用大量的内存，内存浪费多。    \n3.dict内部存放的顺序和key放入的顺序是没有关系的   \n而list相反：     \n\n1.查找和插入的时间随着元素的增加而增加；    \n2.占用空间小，浪费内存很少。      \n### set\nset和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。\n要创建一个set，需要提供一个list作为输入集合：\n```\n>>> s = set([1, 2, 3])\n>>> s\n{1, 2, 3}\n```  \n注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。   \n重复元素在set中自动被过滤。    \n通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果:\n```\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n```\n通过remove(key)方法可以删除元素：\n```\n>>> s.remove(4)\n>>> s\n{1, 2, 3}\n```\n## 函数\n### 定义函数\n```\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n### 返回多个值\n```\nimport math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n```\n```\n>>> x, y = move(100, 100, 60, math.pi / 6)\n>>> print(x, y)\n151.96152422706632 70.0\n```\n其实返回的是一个tuple\n```\n>>> r = move(100, 100, 60, math.pi / 6)\n>>> print(r)\n(151.96152422706632, 70.0)\n```\n### 函数的参数\n#### 默认参数\n```\ndef power(x, n=2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n```\n当我们调用power(5)时，相当于调用power(5, 2):\n```\n>>> power(5)\n25\n>>> power(5, 2)\n25\n```\n#### 可变参数\n```\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n```\n定义可变参数在参数前面加了一个\\*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：\n```\n>>> calc(1, 2)\n5\n>>> calc()\n0\n```\n把list或tuple的元素变成可变参数传进去：\n```\n>>> nums = [1, 2, 3]\n>>> calc(*nums)\n14\n```\n\\*nums表示把nums这个list的所有元素作为可变参数传进去。\n#### 关键字参数\n关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：\n```\ndef person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n```\n```\n>>> person('Bob', 35, city='Beijing')\nname: Bob age: 35 other: {'city': 'Beijing'}\n>>> person('Adam', 45, gender='M', job='Engineer')\nname: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}\n```\n也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：\n```\n>>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n>>> person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n```\n#### 命名关键字参数\n如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：\n```\ndef person(name, age, *, city, job):\n    print(name, age, city, job)\n```\n和关键字参数\\*\\*kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。    \n调用方式如下：\n```\n>>> person('Jack', 24, city='Beijing', job='Engineer')\nJack 24 Beijing Engineer\n```\n如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符\\*了\n```\ndef person(name, age, *args, city, job):\n    print(name, age, args, city, job)\n```    \n## 高级特性\n### 切片\n取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：\n```\n>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']\n```\n取前3个元素，应该怎么做？\n```\n>>> L[0:3]\n['Michael', 'Sarah', 'Tracy']\n```\n类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片   \n切片操作十分有用。我们先创建一个0-99的数列：\n```\n>>> L = list(range(100))\n>>> L\n[0, 1, 2, 3, ..., 99]\n```\n前10个数：\n```\n>>> L[:10]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n后10个数：\n```\n>>> L[-10:]\n[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n```\n前10个数，每两个取一个：\n```\n>>> L[:10:2]\n[0, 2, 4, 6, 8]\n```\n所有数，每5个取一个：\n```\n>>> L[::5]\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n```\n只写[:]就可以原样复制一个list：\n```\n>>> L[:]\n[0, 1, 2, 3, ..., 99]\n```\n字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：\n```\n>>> 'ABCDEFG'[:3]\n'ABC'\n>>> 'ABCDEFG'[::2]\n'ACEG'\n```\n### 列表生成式\n```\n>>> [x * x for x in range(1, 11)]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\nfor循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方:\n```\n>>> [x * x for x in range(1, 11) if x % 2 == 0]\n[4, 16, 36, 64, 100]\n```\n还可以使用两层循环，可以生成全排列：\n```\n>>> [m + n for m in 'ABC' for n in 'XYZ']\n['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']\n```\n列表生成式也可以使用两个变量来生成list：\n```\n>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }\n>>> [k + '=' + v for k, v in d.items()]\n['y=B', 'x=A', 'z=C']\n```\n最后把一个list中所有的字符串变成小写：\n```\n>>> L = ['Hello', 'World', 'IBM', 'Apple']\n>>> [s.lower() for s in L]\n['hello', 'world', 'ibm', 'apple']\n```\n## 高阶函数\n### map/reduce\nap()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。\n```\n>>> def f(x):\n...     return x * x\n...\n>>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> list(r)\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\nreduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算\n```\n>>> from functools import reduce\n>>> def fn(x, y):\n...     return x * 10 + y\n...\n>>> reduce(fn, [1, 3, 5, 7, 9])\n13579\n```\n### filter\n和map()类似，filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。   \n例如，在一个list中，删掉偶数，只保留奇数，可以这么写：\n```\ndef is_odd(n):\n    return n % 2 == 1\n\nlist(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))\n# 结果: [1, 5, 9, 15]\n```\n### sorted\n```\n>>> sorted([36, 5, -12, 9, -21])\n[-21, -12, 5, 9, 36]\n```\n此外，sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序，例如按绝对值大小排序：\n```\n>>> sorted([36, 5, -12, 9, -21], key=abs)\n[5, 9, -12, -21, 36]\n```\n实现忽略大小写的排序：\n```\n>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower)\n['about', 'bob', 'Credit', 'Zoo']\n```\n要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True：\n```\n>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)\n['Zoo', 'Credit', 'bob', 'about']\n```\n## 匿名函数（lambda）\n```\n>>> list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n## 多线程\n```\ndef test(num):\n    for i in range(50):\n        print(i)\n        time.sleep(1)\nt1 = threading.Thread(target=test,args=(50,))#注意函数名没有括号\nt1.setDaemon(True)#设置守护进程，主进程退出时，子进程退出\nt1.start()\nt1.is_alive()#判断是否存活\n```\n","source":"_posts/2018/2018-01-20-python学习笔记.md","raw":"---\nlayout: posts\ntitle: python学习笔记\ncategories: python学习笔记\ntags: \n    - python\n---\n\n<div id=\"MDcategory\"></div>\n## 基础\n### 注释\n注释 是任何存在于 # 号右侧的文字，其主要用作写给程序读者看的笔记。\n举个例子：\n```\nprint('hello world') #注意到 print 是一个函数\n```\n### 输入与输出\n#### 输出\n用`print()`在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出'hello, world'，用代码实现如下：\n```\n>>> print('hello, world')\n```\n`print()`函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：\n```\n>>> print('The quick brown fox', 'jumps over', 'the lazy dog')\nThe quick brown fox jumps over the lazy dog\n```\n`print()`会依次打印每个字符串，遇到逗号“,”会输出一个空格。\n### 输入\nPython提供了一个`input()`，可以让用户输入字符串，并存放到一个变量里,还可以让你显示一个字符串来提示用户。如：\n```\nname = input('please enter your name: ')\nprint('hello,', name)\n```\ninput()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：\n```\ns = input('birth: ')\nbirth = int(s)\nif birth < 2000:\n    print('00前')\nelse:\n    print('00后')\n```\n### 数据类型\n#### 整数\nPython可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。\n\n计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。\n\n#### 浮点数\n浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。\n整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。\n\n#### 字符串\n字符串是以单引号'或双引号\"括起来的任意文本，比如'abc'，\"xyz\"等等。请注意，''或\"\"本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符。如果'本身也是一个字符，那就可以用\"\"括起来，比如\"I'm OK\"包含的字符是I，'，m，空格，O，K这6个字符。\n**如果字符串内部既包含'又包含\"怎么办？可以用转义字符\\来标识，也可以在*三引号*之间自由地使用单引号与双引号。**\n如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r''表示''内部的字符串默认不转义。\n#### 布尔值\n一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：\n```\n>>> True\nTrue\n>>> False\nFalse\n>>> 3 > 2\nTrue\n>>> 3 > 5\nFalse\n```\n布尔值可以用and、or和not运算。\n```\n>>> 5 > 3 and 3 > 1\nTrue\n```\n#### 空值\n空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。\n### 变量\n在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，\n```\na = 123 # a是整数\nprint(a)\na = 'ABC' # a变为字符串\nprint(a)\n```\n这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。\n### 运算符与表达式\n下面是可用运算符的速览：\n\n1. **\\+（加)**   \n两个对象相加。\n3+5 则输出 8 。 'a' + 'b' 则输出 'ab' 。\n2. **\\- （减)**     \n从一个数中减去另一个数，如果第一个操作数不存在，则假定为零。\n-5.2 将输出一个负数， 50 - 24 输出 26 。\n3. **\\* （乘）**     \n给出两个数的乘积，或返回字符串重复指定次数后的结果。\n  'la' * 3 输出 'lalala' 。\n4. **\\** （乘方）**     \n返回 x 的 y 次方。\n3 ** 4 输出 81 （即 3 * 3 * 3 * 3 ）。\n5. **/ （除）**   \nx 除以 y\n13 / 3 输出 4.333333333333333 。\n6. **// （整除）**\nx 除以 y 并对结果向下取整至最接近的整数。\n13 // 3 输出 4 。\n-13 // 3 输出 -5 。\n7. **% （取模）**\n返回除法运算后的余数。\n13 % 3 输出 1 。 -25.5 % 2.25 输出 1.5 。\n8. **<< （左移）**\n将数字的位向左移动指定的位数。（每个数字在内存中以二进制数表示，即 0 和1）\n2 << 2 输出 8 。 2 用二进制数表示为 10 。\n向左移 2 位会得到 1000 这一结果，表示十进制中的 8 。\n9. **>> （右移）**\n将数字的位向右移动指定的位数。\n11 >> 1 输出 5 。\n11 在二进制中表示为 1011 ，右移一位后输出 101 这一结果，表示十进制中的\n5 。\n10. **& （按位与）**\n对数字进行按位与操作。\n5 & 3 输出 1 。\n11. **| （按位或）**\n对数字进行按位或操作。\n5 | 3 输出 7 。\n12. **^ （按位异或）**\n对数字进行按位异或操作。\n5 ^ 3 输出 6 。\n13. **~ （按位取反）**\nx 的按位取反结果为 -(x+1)。\n~5 输出 -6 。\n### 格式化\n在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：\n```\n>>> 'Hello, %s' % 'world'\n'Hello, world'\n>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)\n'Hi, Michael, you have $1000000.'\n```\n在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。     \n如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串    \n另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，\n```\n>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)\n'Hello, 小明, 成绩提升了 17.1%'\n```\n### list\nPython内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。\n比如，列出班里所有同学的名字，就可以用一个list表示：\n```\n>>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n```\n变量classmates就是一个list。用len()函数可以获得list元素的个数   \n用索引来访问list中每一个位置的元素，记得索引是从0开始的：   \n```\n>>> classmates[0]\n'Michael'\n>>> classmates[1]\n'Bob'\n>>> classmates[2]\n'Tracy'\n>>> classmates[3]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n```\n如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素  \nlist是一个可变的有序表，所以，可以往list中追加元素到末尾：\n```\n>>> classmates.append('Adam')\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n```\n也可以把元素插入到指定的位置，比如索引号为1的位置：\n```\n>>> classmates.insert(1, 'Jack')\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n```\n要删除list末尾的元素，用pop()方法\n```\n>>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n```\n要删除指定位置的元素，用pop(i)方法，其中i是索引位置：\n```\n>>> classmates.pop(1)\n'Jack'\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n```\n要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：\n```\n>>> classmates[1] = 'Sarah'\n>>> classmates\n['Michael', 'Sarah', 'Tracy']\n```\n### tuple\n另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：\n```\n>>> classmates = ('Michael', 'Bob', 'Tracy')\n```\n现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。   \ntuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来   \n只有1个元素的tuple定义时必须加一个逗号\n```\n>>> t = (1,)\n>>> t\n(1,)\n```\n最后来看一个“可变的”tuple：\n```\n>>> t = ('a', 'b', ['A', 'B'])\n>>> t[2][0] = 'X'\n>>> t[2][1] = 'Y'\n>>> t\n('a', 'b', ['X', 'Y'])\n```\n### 条件判断\n```\nage = 3\nif age >= 18:\n    print('adult')\nelif age >= 6:\n    print('teenager')\nelse:\n    print('kid')\n```\n### 循环\n#### for...in循环\n```\nnames = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n```\n执行这段代码，会依次打印names的每一个元素：\n```\nMichael\nBob\nTracy\n```\nrange(101)就可以生成0-100的整数序列，计算如下\n```\nsum = 0\nfor x in range(101):\n    sum = sum + x\nprint(sum)\n```\n#### while循环\n只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：   \n```\nsum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n```\n在循环中，break语句可以提前退出循环。   \n在循环过程中，也可以通过continue语句，跳过当前的这次循环(continue后面语句不执行)，直接开始下一次循环。\n### dict\nPython内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。  \n```\n>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n```\n把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：\n```\n>>> d['Adam'] = 67\n>>> d['Adam']\n67\n```\n由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉,如果key不存在，dict就会报错.   \n要删除一个key，用pop(key)方法，对应的value也会从dict中删除：\n```\n>>> d.pop('Bob')\n75\n>>> d\n{'Michael': 95, 'Tracy': 85}\n```\n和list比较，dict有以下几个特点：\n\n1.查找和插入的速度极快，不会随着key的增加而变慢；    \n2.需要占用大量的内存，内存浪费多。    \n3.dict内部存放的顺序和key放入的顺序是没有关系的   \n而list相反：     \n\n1.查找和插入的时间随着元素的增加而增加；    \n2.占用空间小，浪费内存很少。      \n### set\nset和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。\n要创建一个set，需要提供一个list作为输入集合：\n```\n>>> s = set([1, 2, 3])\n>>> s\n{1, 2, 3}\n```  \n注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。   \n重复元素在set中自动被过滤。    \n通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果:\n```\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n```\n通过remove(key)方法可以删除元素：\n```\n>>> s.remove(4)\n>>> s\n{1, 2, 3}\n```\n## 函数\n### 定义函数\n```\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n### 返回多个值\n```\nimport math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n```\n```\n>>> x, y = move(100, 100, 60, math.pi / 6)\n>>> print(x, y)\n151.96152422706632 70.0\n```\n其实返回的是一个tuple\n```\n>>> r = move(100, 100, 60, math.pi / 6)\n>>> print(r)\n(151.96152422706632, 70.0)\n```\n### 函数的参数\n#### 默认参数\n```\ndef power(x, n=2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n```\n当我们调用power(5)时，相当于调用power(5, 2):\n```\n>>> power(5)\n25\n>>> power(5, 2)\n25\n```\n#### 可变参数\n```\ndef calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n```\n定义可变参数在参数前面加了一个\\*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：\n```\n>>> calc(1, 2)\n5\n>>> calc()\n0\n```\n把list或tuple的元素变成可变参数传进去：\n```\n>>> nums = [1, 2, 3]\n>>> calc(*nums)\n14\n```\n\\*nums表示把nums这个list的所有元素作为可变参数传进去。\n#### 关键字参数\n关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：\n```\ndef person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n```\n```\n>>> person('Bob', 35, city='Beijing')\nname: Bob age: 35 other: {'city': 'Beijing'}\n>>> person('Adam', 45, gender='M', job='Engineer')\nname: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}\n```\n也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：\n```\n>>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n>>> person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n```\n#### 命名关键字参数\n如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：\n```\ndef person(name, age, *, city, job):\n    print(name, age, city, job)\n```\n和关键字参数\\*\\*kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。    \n调用方式如下：\n```\n>>> person('Jack', 24, city='Beijing', job='Engineer')\nJack 24 Beijing Engineer\n```\n如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符\\*了\n```\ndef person(name, age, *args, city, job):\n    print(name, age, args, city, job)\n```    \n## 高级特性\n### 切片\n取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：\n```\n>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']\n```\n取前3个元素，应该怎么做？\n```\n>>> L[0:3]\n['Michael', 'Sarah', 'Tracy']\n```\n类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片   \n切片操作十分有用。我们先创建一个0-99的数列：\n```\n>>> L = list(range(100))\n>>> L\n[0, 1, 2, 3, ..., 99]\n```\n前10个数：\n```\n>>> L[:10]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n后10个数：\n```\n>>> L[-10:]\n[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n```\n前10个数，每两个取一个：\n```\n>>> L[:10:2]\n[0, 2, 4, 6, 8]\n```\n所有数，每5个取一个：\n```\n>>> L[::5]\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n```\n只写[:]就可以原样复制一个list：\n```\n>>> L[:]\n[0, 1, 2, 3, ..., 99]\n```\n字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：\n```\n>>> 'ABCDEFG'[:3]\n'ABC'\n>>> 'ABCDEFG'[::2]\n'ACEG'\n```\n### 列表生成式\n```\n>>> [x * x for x in range(1, 11)]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\nfor循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方:\n```\n>>> [x * x for x in range(1, 11) if x % 2 == 0]\n[4, 16, 36, 64, 100]\n```\n还可以使用两层循环，可以生成全排列：\n```\n>>> [m + n for m in 'ABC' for n in 'XYZ']\n['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']\n```\n列表生成式也可以使用两个变量来生成list：\n```\n>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }\n>>> [k + '=' + v for k, v in d.items()]\n['y=B', 'x=A', 'z=C']\n```\n最后把一个list中所有的字符串变成小写：\n```\n>>> L = ['Hello', 'World', 'IBM', 'Apple']\n>>> [s.lower() for s in L]\n['hello', 'world', 'ibm', 'apple']\n```\n## 高阶函数\n### map/reduce\nap()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。\n```\n>>> def f(x):\n...     return x * x\n...\n>>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> list(r)\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\nreduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算\n```\n>>> from functools import reduce\n>>> def fn(x, y):\n...     return x * 10 + y\n...\n>>> reduce(fn, [1, 3, 5, 7, 9])\n13579\n```\n### filter\n和map()类似，filter()也接收一个函数和一个序列。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。   \n例如，在一个list中，删掉偶数，只保留奇数，可以这么写：\n```\ndef is_odd(n):\n    return n % 2 == 1\n\nlist(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))\n# 结果: [1, 5, 9, 15]\n```\n### sorted\n```\n>>> sorted([36, 5, -12, 9, -21])\n[-21, -12, 5, 9, 36]\n```\n此外，sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序，例如按绝对值大小排序：\n```\n>>> sorted([36, 5, -12, 9, -21], key=abs)\n[5, 9, -12, -21, 36]\n```\n实现忽略大小写的排序：\n```\n>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower)\n['about', 'bob', 'Credit', 'Zoo']\n```\n要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True：\n```\n>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)\n['Zoo', 'Credit', 'bob', 'about']\n```\n## 匿名函数（lambda）\n```\n>>> list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n## 多线程\n```\ndef test(num):\n    for i in range(50):\n        print(i)\n        time.sleep(1)\nt1 = threading.Thread(target=test,args=(50,))#注意函数名没有括号\nt1.setDaemon(True)#设置守护进程，主进程退出时，子进程退出\nt1.start()\nt1.is_alive()#判断是否存活\n```\n","slug":"2018-2018-01-20-python学习笔记","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:07:36.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9f000hd3foob7ol8og","content":"<p><div id=\"MDcategory\"></div></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>注释 是任何存在于 # 号右侧的文字，其主要用作写给程序读者看的笔记。<br>举个例子：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">'hello world'</span>)</span></span> #注意到 print 是一个函数</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"输入与输出\"><a href=\"#输入与输出\" class=\"headerlink\" title=\"输入与输出\"></a>输入与输出</h3><h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出’hello, world’，用代码实现如下：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; print(<span class=\"string\">'hello, world'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; print(<span class=\"string\">'The quick brown fox'</span>, <span class=\"string\">'jumps over'</span>, <span class=\"string\">'the lazy dog'</span>)</span><br><span class=\"line\">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure></p>\n<p><code>print()</code>会依次打印每个字符串，遇到逗号“,”会输出一个空格。</p>\n<h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><p>Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里,还可以让你显示一个字符串来提示用户。如：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = input(<span class=\"string\">'please enter your name: '</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">'hello,'</span>, name)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"keyword\">input</span>(<span class=\"string\">'birth: '</span>)</span><br><span class=\"line\">birth = <span class=\"keyword\">int</span>(s)</span><br><span class=\"line\"><span class=\"keyword\">if</span> birth &lt; <span class=\"number\">2000</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span>(<span class=\"string\">'00前'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span>(<span class=\"string\">'00后'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><h4 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p>\n<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p>\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。<br>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。<br><strong>如果字符串内部既包含’又包含”怎么办？可以用转义字符\\来标识，也可以在<em>三引号</em>之间自由地使用单引号与双引号。</strong><br>如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义。</p>\n<h4 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h4><p>一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<p>布尔值可以用and、or和not运算。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"number\">5</span> &gt; <span class=\"number\">3</span> and <span class=\"number\">3</span> &gt; <span class=\"number\">1</span></span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h4><p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">123</span> <span class=\"comment\"># a是整数</span></span><br><span class=\"line\">print(<span class=\"keyword\">a</span>)</span><br><span class=\"line\"><span class=\"keyword\">a</span> = <span class=\"string\">'ABC'</span> <span class=\"comment\"># a变为字符串</span></span><br><span class=\"line\">print(<span class=\"keyword\">a</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</p>\n<h3 id=\"运算符与表达式\"><a href=\"#运算符与表达式\" class=\"headerlink\" title=\"运算符与表达式\"></a>运算符与表达式</h3><p>下面是可用运算符的速览：</p>\n<ol>\n<li><strong>+（加)</strong><br>两个对象相加。<br>3+5 则输出 8 。 ‘a’ + ‘b’ 则输出 ‘ab’ 。</li>\n<li><strong>- （减)</strong><br>从一个数中减去另一个数，如果第一个操作数不存在，则假定为零。<br>-5.2 将输出一个负数， 50 - 24 输出 26 。</li>\n<li><strong>* （乘）</strong><br>给出两个数的乘积，或返回字符串重复指定次数后的结果。<br>‘la’ * 3 输出 ‘lalala’ 。</li>\n<li><strong>\\</strong> （乘方）<strong><br>返回 x 的 y 次方。<br>3 </strong> 4 输出 81 （即 3 <em> 3 </em> 3 * 3 ）。</li>\n<li><strong>/ （除）</strong><br>x 除以 y<br>13 / 3 输出 4.333333333333333 。</li>\n<li><strong>// （整除）</strong><br>x 除以 y 并对结果向下取整至最接近的整数。<br>13 // 3 输出 4 。<br>-13 // 3 输出 -5 。</li>\n<li><strong>% （取模）</strong><br>返回除法运算后的余数。<br>13 % 3 输出 1 。 -25.5 % 2.25 输出 1.5 。</li>\n<li><strong>&lt;&lt; （左移）</strong><br>将数字的位向左移动指定的位数。（每个数字在内存中以二进制数表示，即 0 和1）<br>2 &lt;&lt; 2 输出 8 。 2 用二进制数表示为 10 。<br>向左移 2 位会得到 1000 这一结果，表示十进制中的 8 。</li>\n<li><strong>&gt;&gt; （右移）</strong><br>将数字的位向右移动指定的位数。<br>11 &gt;&gt; 1 输出 5 。<br>11 在二进制中表示为 1011 ，右移一位后输出 101 这一结果，表示十进制中的<br>5 。</li>\n<li><strong>&amp; （按位与）</strong><br>对数字进行按位与操作。<br>5 &amp; 3 输出 1 。</li>\n<li><strong>| （按位或）</strong><br>对数字进行按位或操作。<br>5 | 3 输出 7 。</li>\n<li><strong>^ （按位异或）</strong><br>对数字进行按位异或操作。<br>5 ^ 3 输出 6 。</li>\n<li><strong>~ （按位取反）</strong><br>x 的按位取反结果为 -(x+1)。<br>~5 输出 -6 。<h3 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h3>在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; <span class=\"string\">'Hello, %s'</span> % <span class=\"string\">'world'</span></span><br><span class=\"line\"><span class=\"string\">'Hello, world'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; <span class=\"string\">'Hi, %s, you have $%d.'</span> % (<span class=\"string\">'Michael'</span>, <span class=\"number\">1000000</span>)</span><br><span class=\"line\"><span class=\"string\">'Hi, Michael, you have $1000000.'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。<br>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串<br>另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; <span class=\"string\">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class=\"string\">'小明'</span>, <span class=\"number\">17.125</span>)</span><br><span class=\"line\"><span class=\"string\">'Hello, 小明, 成绩提升了 17.1%'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。<br>比如，列出班里所有同学的名字，就可以用一个list表示：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>变量classmates就是一个list。用len()函数可以获得list元素的个数<br>用索引来访问list中每一个位置的元素，记得索引是从0开始的：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'Michael'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"string\">'Tracy'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">3</span>]</span><br><span class=\"line\">Traceback (most recent call last)<span class=\"symbol\">:</span></span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;<span class=\"class\"><span class=\"keyword\">module</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">IndexError:</span> list index out of range</span><br></pre></td></tr></table></figure></p>\n<p>如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素<br>list是一个可变的有序表，所以，可以往list中追加元素到末尾：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates.append(<span class=\"string\">'Adam'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Adam'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>也可以把元素插入到指定的位置，比如索引号为1的位置：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates.insert(<span class=\"number\">1</span>, <span class=\"string\">'Jack'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Adam'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>要删除list末尾的元素，用pop()方法<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates.pop()</span><br><span class=\"line\"><span class=\"string\">'Adam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>要删除指定位置的元素，用pop(i)方法，其中i是索引位置：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates.pop(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">'Jack'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">1</span>] = <span class=\"string\">'Sarah'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Sarah'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h3><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates = (<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。<br>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来<br>只有1个元素的tuple定义时必须加一个逗号<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; t = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; t</span><br><span class=\"line\">(<span class=\"number\">1</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>最后来看一个“可变的”tuple：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t = ('a', 'b', ['A', 'B'])</span><br><span class=\"line\">&gt;&gt;&gt; t[<span class=\"string\">2</span>][<span class=\"symbol\">0</span>] = 'X'</span><br><span class=\"line\">&gt;&gt;&gt; t[<span class=\"string\">2</span>][<span class=\"symbol\">1</span>] = 'Y'</span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\">('a', 'b', ['X', 'Y'])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = 3</span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= 18:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= 6:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'teenager'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'kid'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"for…in循环\"><a href=\"#for…in循环\" class=\"headerlink\" title=\"for…in循环\"></a>for…in循环</h4><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">name</span> <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">    print(<span class=\"keyword\">name</span>)</span><br></pre></td></tr></table></figure>\n<p>执行这段代码，会依次打印names的每一个元素：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Michael</span></span><br><span class=\"line\"><span class=\"keyword\">Bob</span></span><br><span class=\"line\"><span class=\"keyword\">Tracy</span></span><br></pre></td></tr></table></figure></p>\n<p>range(101)就可以生成0-100的整数序列，计算如下<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">101</span>):</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + x</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h4><p>只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">n</span> = <span class=\"number\">99</span></span><br><span class=\"line\">while <span class=\"built_in\">n</span> &gt; <span class=\"symbol\">0:</span></span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + <span class=\"built_in\">n</span></span><br><span class=\"line\">    <span class=\"built_in\">n</span> = <span class=\"built_in\">n</span> - <span class=\"number\">2</span></span><br><span class=\"line\">print(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure></p>\n<p>在循环中，break语句可以提前退出循环。<br>在循环过程中，也可以通过continue语句，跳过当前的这次循环(continue后面语句不执行)，直接开始下一次循环。</p>\n<h3 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h3><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d[<span class=\"string\">'Michael'</span>]</span><br><span class=\"line\"><span class=\"number\">95</span></span><br></pre></td></tr></table></figure></p>\n<p>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d[<span class=\"string\">'Adam'</span>] = <span class=\"number\">67</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d[<span class=\"string\">'Adam'</span>]</span><br><span class=\"line\"><span class=\"number\">67</span></span><br></pre></td></tr></table></figure></p>\n<p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉,如果key不存在，dict就会报错.<br>要删除一个key，用pop(key)方法，对应的value也会从dict中删除：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d.pop(<span class=\"string\">'Bob'</span>)</span><br><span class=\"line\"><span class=\"number\">75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d</span><br><span class=\"line\">&#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和list比较，dict有以下几个特点：</p>\n<p>1.查找和插入的速度极快，不会随着key的增加而变慢；<br>2.需要占用大量的内存，内存浪费多。<br>3.dict内部存放的顺序和key放入的顺序是没有关系的<br>而list相反：     </p>\n<p>1.查找和插入的时间随着元素的增加而增加；<br>2.占用空间小，浪费内存很少。      </p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>要创建一个set，需要提供一个list作为输入集合：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; s = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">&gt;&gt;&gt; s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\">注意，传入的参数[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]是一个list，而显示的&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;只是告诉你这个<span class=\"built_in\">set</span>内部有<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>这<span class=\"number\">3</span>个元素，显示的顺序也不表示<span class=\"built_in\">set</span>是有序的。   </span><br><span class=\"line\">重复元素在<span class=\"built_in\">set</span>中自动被过滤。    </span><br><span class=\"line\">通过<span class=\"built_in\">add</span>(<span class=\"built_in\">key</span>)方法可以添加元素到<span class=\"built_in\">set</span>中，可以重复添加，但不会有效果:</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>s.add(4)<br>s<br>{1, 2, 3, 4}<br>s.add(4)<br>s<br>{1, 2, 3, 4}<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过<span class=\"built_in\">remove</span>(<span class=\"built_in\">key</span>)方法可以删除元素：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>s.remove(4)<br>s<br>{1, 2, 3}<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 函数</span><br><span class=\"line\">### 定义函数</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>def my_abs(x):<br>    if x &gt;= 0:<br>        return x<br>    else:<br>        return -x<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 返回多个值</span><br></pre></td></tr></table></figure></p>\n<p>import math</p>\n<p>def move(x, y, step, angle=0):<br>    nx = x + step <em> math.cos(angle)<br>    ny = y - step </em> math.sin(angle)<br>    return nx, ny<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">&gt;&gt;&gt; x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</span><br><span class=\"line\">&gt;&gt;&gt; print(x, y)</span><br><span class=\"line\"><span class=\"number\">151.96152422706632</span> <span class=\"number\">70.0</span></span><br></pre></td></tr></table></figure></p>\n<p>其实返回的是一个tuple<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</span><br><span class=\"line\">&gt;&gt;&gt; print(r)</span><br><span class=\"line\">(<span class=\"number\">151.96152422706632</span>, <span class=\"number\">70.0</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h3><h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n=<span class=\"number\">2</span>)</span></span><span class=\"symbol\">:</span></span><br><span class=\"line\">    s = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span><span class=\"symbol\">:</span></span><br><span class=\"line\">        n = n - <span class=\"number\">1</span></span><br><span class=\"line\">        s = s * x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br></pre></td></tr></table></figure>\n<p>当我们调用power(5)时，相当于调用power(5, 2):<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; power(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\">&gt;&gt;&gt; power(<span class=\"number\">5</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h4><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def calc(*numbers)<span class=\"symbol\">:</span></span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    for <span class=\"built_in\">n</span> in numbe<span class=\"symbol\">rs:</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + <span class=\"built_in\">n</span> * <span class=\"built_in\">n</span></span><br><span class=\"line\">    return <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n<p>定义可变参数在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; calc(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; calc()</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>把list或tuple的元素变成可变参数传进去：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; calc(*nums)</span><br><span class=\"line\"><span class=\"number\">14</span></span><br></pre></td></tr></table></figure></p>\n<p>*nums表示把nums这个list的所有元素作为可变参数传进去。</p>\n<h4 id=\"关键字参数\"><a href=\"#关键字参数\" class=\"headerlink\" title=\"关键字参数\"></a>关键字参数</h4><p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; person(<span class=\"string\">'Bob'</span>, <span class=\"number\">35</span>, city=<span class=\"string\">'Beijing'</span>)</span><br><span class=\"line\"><span class=\"string\">name:</span> Bob <span class=\"string\">age:</span> <span class=\"number\">35</span> <span class=\"string\">other:</span> &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>&#125;</span><br><span class=\"line\">&gt;&gt;&gt; person(<span class=\"string\">'Adam'</span>, <span class=\"number\">45</span>, gender=<span class=\"string\">'M'</span>, job=<span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\"><span class=\"string\">name:</span> Adam <span class=\"string\">age:</span> <span class=\"number\">45</span> <span class=\"string\">other:</span> &#123;<span class=\"string\">'gender'</span>: <span class=\"string\">'M'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, **extra)</span><br><span class=\"line\"><span class=\"symbol\">name:</span> Jack <span class=\"symbol\">age:</span> <span class=\"number\">24</span> <span class=\"symbol\">other:</span> &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"命名关键字参数\"><a href=\"#命名关键字参数\" class=\"headerlink\" title=\"命名关键字参数\"></a>命名关键字参数</h4><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *, city, job)</span>:</span></span><br><span class=\"line\">    print(name, age, city, job)</span><br></pre></td></tr></table></figure></p>\n<p>和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符<em>，</em>后面的参数被视为命名关键字参数。<br>调用方式如下：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, city=<span class=\"string\">'Beijing'</span>, job=<span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\">Jack <span class=\"number\">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure></p>\n<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def person(name, age, *args, city, job):</span><br><span class=\"line\">    print(name, age, args, city, job)</span><br><span class=\"line\">```    </span><br><span class=\"line\">## 高级特性</span><br><span class=\"line\">### 切片</span><br><span class=\"line\">取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L = [‘Michael’, ‘Sarah’, ‘Tracy’, ‘Bob’, ‘Jack’]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取前<span class=\"number\">3</span>个元素，应该怎么做？</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[0:3]<br>[‘Michael’, ‘Sarah’, ‘Tracy’]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类似的，既然Python支持L[<span class=\"number\">-1</span>]取倒数第一个元素，那么它同样支持倒数切片   </span><br><span class=\"line\">切片操作十分有用。我们先创建一个<span class=\"number\">0</span><span class=\"number\">-99</span>的数列：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L = list(range(100))<br>L<br>[0, 1, 2, 3, …, 99]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前<span class=\"number\">10</span>个数：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[:10]<br>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后<span class=\"number\">10</span>个数：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[-10:]<br>[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前<span class=\"number\">10</span>个数，每两个取一个：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[:10:2]<br>[0, 2, 4, 6, 8]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有数，每<span class=\"number\">5</span>个取一个：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[::5]<br>[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只写<span class=\"string\">[:]</span>就可以原样复制一个list：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[:]<br>[0, 1, 2, 3, …, 99]<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串<span class=\"string\">'xxx'</span>也可以看成是一种<span class=\"built_in\">list</span>，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>‘ABCDEFG’[:3]<br>‘ABC’<br>‘ABCDEFG’[::2]<br>‘ACEG’<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 列表生成式</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[x * x for x in range(1, 11)]<br>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>循环后面还可以加上<span class=\"keyword\">if</span>判断，这样我们就可以筛选出仅偶数的平方:</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[x * x for x in range(1, 11) if x % 2 == 0]<br>[4, 16, 36, 64, 100]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">还可以使用两层循环，可以生成全排列：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[m + n for m in ‘ABC’ for n in ‘XYZ’]<br>[‘AX’, ‘AY’, ‘AZ’, ‘BX’, ‘BY’, ‘BZ’, ‘CX’, ‘CY’, ‘CZ’]<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列表生成式也可以使用两个变量来生成<span class=\"built_in\">list</span>：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>d = {‘x’: ‘A’, ‘y’: ‘B’, ‘z’: ‘C’ }<br>[k + ‘=’ + v for k, v in d.items()]<br>[‘y=B’, ‘x=A’, ‘z=C’]<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最后把一个<span class=\"built_in\">list</span>中所有的字符串变成小写：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L = [‘Hello’, ‘World’, ‘IBM’, ‘Apple’]<br>[s.lower() for s in L]<br>[‘hello’, ‘world’, ‘ibm’, ‘apple’]<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 高阶函数</span><br><span class=\"line\">### map/reduce</span><br><span class=\"line\">ap()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>def f(x):<br>…     return x * x<br>…<br>r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])<br>list(r)<br>[1, 4, 9, 16, 25, 36, 49, 64, 81]<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce把一个函数作用在一个序列[<span class=\"keyword\">x</span><span class=\"number\">1</span>, <span class=\"keyword\">x</span><span class=\"number\">2</span>, <span class=\"keyword\">x</span><span class=\"number\">3</span>, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>from functools import reduce<br>def fn(x, y):<br>…     return x * 10 + y<br>…<br>reduce(fn, [1, 3, 5, 7, 9])<br>13579<br><figure class=\"highlight golo\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### filter</span></span><br><span class=\"line\">和<span class=\"keyword\">map</span>()类似，<span class=\"keyword\">filter</span>()也接收一个函数和一个序列。和<span class=\"keyword\">map</span>()不同的是，<span class=\"keyword\">filter</span>()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。   </span><br><span class=\"line\">例如，在一个<span class=\"keyword\">list</span>中，删掉偶数，只保留奇数，可以这么写：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>def is_odd(n):<br>    return n % 2 == 1</p>\n<p>list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))</p>\n<h1 id=\"结果-1-5-9-15\"><a href=\"#结果-1-5-9-15\" class=\"headerlink\" title=\"结果: [1, 5, 9, 15]\"></a>结果: [1, 5, 9, 15]</h1><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### sorted</span><br></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sorted([36, 5, -12, 9, -21])<br>[-21, -12, 5, 9, 36]<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此外，sorted()函数也是一个高阶函数，它还可以接收一个<span class=\"built_in\">key</span>函数来实现自定义的排序，例如按绝对值大小排序：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sorted([36, 5, -12, 9, -21], key=abs)<br>[5, 9, -12, -21, 36]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现忽略大小写的排序：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sorted([‘bob’, ‘about’, ‘Zoo’, ‘Credit’], key=str.lower)<br>[‘about’, ‘bob’, ‘Credit’, ‘Zoo’]<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要进行反向排序，不必改动key函数，可以传入第三个参数<span class=\"attribute\">reverse</span>=<span class=\"literal\">True</span>：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sorted([‘bob’, ‘about’, ‘Zoo’, ‘Credit’], key=str.lower, reverse=True)<br>[‘Zoo’, ‘Credit’, ‘bob’, ‘about’]<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 匿名函数（lambda）</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))<br>[1, 4, 9, 16, 25, 36, 49, 64, 81]<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 多线程</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>def test(num):<br>    for i in range(50):<br>        print(i)<br>        time.sleep(1)<br>t1 = threading.Thread(target=test,args=(50,))#注意函数名没有括号<br>t1.setDaemon(True)#设置守护进程，主进程退出时，子进程退出<br>t1.start()<br>t1.is_alive()#判断是否存活<br><code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><div id=\"MDcategory\"></div></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>注释 是任何存在于 # 号右侧的文字，其主要用作写给程序读者看的笔记。<br>举个例子：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">'hello world'</span>)</span></span> #注意到 print 是一个函数</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"输入与输出\"><a href=\"#输入与输出\" class=\"headerlink\" title=\"输入与输出\"></a>输入与输出</h3><h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>用<code>print()</code>在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出’hello, world’，用代码实现如下：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; print(<span class=\"string\">'hello, world'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; print(<span class=\"string\">'The quick brown fox'</span>, <span class=\"string\">'jumps over'</span>, <span class=\"string\">'the lazy dog'</span>)</span><br><span class=\"line\">The quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure></p>\n<p><code>print()</code>会依次打印每个字符串，遇到逗号“,”会输出一个空格。</p>\n<h3 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h3><p>Python提供了一个<code>input()</code>，可以让用户输入字符串，并存放到一个变量里,还可以让你显示一个字符串来提示用户。如：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = input(<span class=\"string\">'please enter your name: '</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">print</span><span class=\"params\">(<span class=\"string\">'hello,'</span>, name)</span></span></span><br></pre></td></tr></table></figure></p>\n<p>input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：<br><figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"keyword\">input</span>(<span class=\"string\">'birth: '</span>)</span><br><span class=\"line\">birth = <span class=\"keyword\">int</span>(s)</span><br><span class=\"line\"><span class=\"keyword\">if</span> birth &lt; <span class=\"number\">2000</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span>(<span class=\"string\">'00前'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">print</span>(<span class=\"string\">'00后'</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><h4 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：1，100，-8080，0，等等。</p>\n<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。</p>\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。<br>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等。请注意，’’或””本身只是一种表示方式，不是字符串的一部分，因此，字符串’abc’只有a，b，c这3个字符。如果’本身也是一个字符，那就可以用””括起来，比如”I’m OK”包含的字符是I，’，m，空格，O，K这6个字符。<br><strong>如果字符串内部既包含’又包含”怎么办？可以用转义字符\\来标识，也可以在<em>三引号</em>之间自由地使用单引号与双引号。</strong><br>如果字符串里面有很多字符都需要转义，就需要加很多\\，为了简化，Python还允许用r’’表示’’内部的字符串默认不转义。</p>\n<h4 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h4><p>一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure></p>\n<p>布尔值可以用and、or和not运算。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; <span class=\"number\">5</span> &gt; <span class=\"number\">3</span> and <span class=\"number\">3</span> &gt; <span class=\"number\">1</span></span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h4><p>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">a</span> = <span class=\"number\">123</span> <span class=\"comment\"># a是整数</span></span><br><span class=\"line\">print(<span class=\"keyword\">a</span>)</span><br><span class=\"line\"><span class=\"keyword\">a</span> = <span class=\"string\">'ABC'</span> <span class=\"comment\"># a变为字符串</span></span><br><span class=\"line\">print(<span class=\"keyword\">a</span>)</span><br></pre></td></tr></table></figure></p>\n<p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</p>\n<h3 id=\"运算符与表达式\"><a href=\"#运算符与表达式\" class=\"headerlink\" title=\"运算符与表达式\"></a>运算符与表达式</h3><p>下面是可用运算符的速览：</p>\n<ol>\n<li><strong>+（加)</strong><br>两个对象相加。<br>3+5 则输出 8 。 ‘a’ + ‘b’ 则输出 ‘ab’ 。</li>\n<li><strong>- （减)</strong><br>从一个数中减去另一个数，如果第一个操作数不存在，则假定为零。<br>-5.2 将输出一个负数， 50 - 24 输出 26 。</li>\n<li><strong>* （乘）</strong><br>给出两个数的乘积，或返回字符串重复指定次数后的结果。<br>‘la’ * 3 输出 ‘lalala’ 。</li>\n<li><strong>\\</strong> （乘方）<strong><br>返回 x 的 y 次方。<br>3 </strong> 4 输出 81 （即 3 <em> 3 </em> 3 * 3 ）。</li>\n<li><strong>/ （除）</strong><br>x 除以 y<br>13 / 3 输出 4.333333333333333 。</li>\n<li><strong>// （整除）</strong><br>x 除以 y 并对结果向下取整至最接近的整数。<br>13 // 3 输出 4 。<br>-13 // 3 输出 -5 。</li>\n<li><strong>% （取模）</strong><br>返回除法运算后的余数。<br>13 % 3 输出 1 。 -25.5 % 2.25 输出 1.5 。</li>\n<li><strong>&lt;&lt; （左移）</strong><br>将数字的位向左移动指定的位数。（每个数字在内存中以二进制数表示，即 0 和1）<br>2 &lt;&lt; 2 输出 8 。 2 用二进制数表示为 10 。<br>向左移 2 位会得到 1000 这一结果，表示十进制中的 8 。</li>\n<li><strong>&gt;&gt; （右移）</strong><br>将数字的位向右移动指定的位数。<br>11 &gt;&gt; 1 输出 5 。<br>11 在二进制中表示为 1011 ，右移一位后输出 101 这一结果，表示十进制中的<br>5 。</li>\n<li><strong>&amp; （按位与）</strong><br>对数字进行按位与操作。<br>5 &amp; 3 输出 1 。</li>\n<li><strong>| （按位或）</strong><br>对数字进行按位或操作。<br>5 | 3 输出 7 。</li>\n<li><strong>^ （按位异或）</strong><br>对数字进行按位异或操作。<br>5 ^ 3 输出 6 。</li>\n<li><strong>~ （按位取反）</strong><br>x 的按位取反结果为 -(x+1)。<br>~5 输出 -6 。<h3 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h3>在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; <span class=\"string\">'Hello, %s'</span> % <span class=\"string\">'world'</span></span><br><span class=\"line\"><span class=\"string\">'Hello, world'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; <span class=\"string\">'Hi, %s, you have $%d.'</span> % (<span class=\"string\">'Michael'</span>, <span class=\"number\">1000000</span>)</span><br><span class=\"line\"><span class=\"string\">'Hi, Michael, you have $1000000.'</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。<br>如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串<br>另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; <span class=\"string\">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class=\"string\">'小明'</span>, <span class=\"number\">17.125</span>)</span><br><span class=\"line\"><span class=\"string\">'Hello, 小明, 成绩提升了 17.1%'</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。<br>比如，列出班里所有同学的名字，就可以用一个list表示：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>变量classmates就是一个list。用len()函数可以获得list元素的个数<br>用索引来访问list中每一个位置的元素，记得索引是从0开始的：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'Michael'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"string\">'Bob'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"string\">'Tracy'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">3</span>]</span><br><span class=\"line\">Traceback (most recent call last)<span class=\"symbol\">:</span></span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;<span class=\"class\"><span class=\"keyword\">module</span>&gt;</span></span><br><span class=\"line\"><span class=\"symbol\">IndexError:</span> list index out of range</span><br></pre></td></tr></table></figure></p>\n<p>如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素<br>list是一个可变的有序表，所以，可以往list中追加元素到末尾：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates.append(<span class=\"string\">'Adam'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Adam'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>也可以把元素插入到指定的位置，比如索引号为1的位置：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates.insert(<span class=\"number\">1</span>, <span class=\"string\">'Jack'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>, <span class=\"string\">'Adam'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>要删除list末尾的元素，用pop()方法<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates.pop()</span><br><span class=\"line\"><span class=\"string\">'Adam'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Jack'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>要删除指定位置的元素，用pop(i)方法，其中i是索引位置：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates.pop(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">'Jack'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates[<span class=\"number\">1</span>] = <span class=\"string\">'Sarah'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates</span><br><span class=\"line\">[<span class=\"string\">'Michael'</span>, <span class=\"string\">'Sarah'</span>, <span class=\"string\">'Tracy'</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h3><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; classmates = (<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。<br>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来<br>只有1个元素的tuple定义时必须加一个逗号<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; t = (<span class=\"number\">1</span>,)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; t</span><br><span class=\"line\">(<span class=\"number\">1</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>最后来看一个“可变的”tuple：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t = ('a', 'b', ['A', 'B'])</span><br><span class=\"line\">&gt;&gt;&gt; t[<span class=\"string\">2</span>][<span class=\"symbol\">0</span>] = 'X'</span><br><span class=\"line\">&gt;&gt;&gt; t[<span class=\"string\">2</span>][<span class=\"symbol\">1</span>] = 'Y'</span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\">('a', 'b', ['X', 'Y'])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"条件判断\"><a href=\"#条件判断\" class=\"headerlink\" title=\"条件判断\"></a>条件判断</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age = 3</span><br><span class=\"line\"><span class=\"keyword\">if</span> age &gt;= 18:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'adult'</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> age &gt;= 6:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'teenager'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'kid'</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><h4 id=\"for…in循环\"><a href=\"#for…in循环\" class=\"headerlink\" title=\"for…in循环\"></a>for…in循环</h4><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"keyword\">name</span> <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">    print(<span class=\"keyword\">name</span>)</span><br></pre></td></tr></table></figure>\n<p>执行这段代码，会依次打印names的每一个元素：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Michael</span></span><br><span class=\"line\"><span class=\"keyword\">Bob</span></span><br><span class=\"line\"><span class=\"keyword\">Tracy</span></span><br></pre></td></tr></table></figure></p>\n<p>range(101)就可以生成0-100的整数序列，计算如下<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">101</span>):</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + x</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h4><p>只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">n</span> = <span class=\"number\">99</span></span><br><span class=\"line\">while <span class=\"built_in\">n</span> &gt; <span class=\"symbol\">0:</span></span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + <span class=\"built_in\">n</span></span><br><span class=\"line\">    <span class=\"built_in\">n</span> = <span class=\"built_in\">n</span> - <span class=\"number\">2</span></span><br><span class=\"line\">print(<span class=\"built_in\">sum</span>)</span><br></pre></td></tr></table></figure></p>\n<p>在循环中，break语句可以提前退出循环。<br>在循环过程中，也可以通过continue语句，跳过当前的这次循环(continue后面语句不执行)，直接开始下一次循环。</p>\n<h3 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h3><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d[<span class=\"string\">'Michael'</span>]</span><br><span class=\"line\"><span class=\"number\">95</span></span><br></pre></td></tr></table></figure></p>\n<p>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d[<span class=\"string\">'Adam'</span>] = <span class=\"number\">67</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d[<span class=\"string\">'Adam'</span>]</span><br><span class=\"line\"><span class=\"number\">67</span></span><br></pre></td></tr></table></figure></p>\n<p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉,如果key不存在，dict就会报错.<br>要删除一个key，用pop(key)方法，对应的value也会从dict中删除：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d.pop(<span class=\"string\">'Bob'</span>)</span><br><span class=\"line\"><span class=\"number\">75</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; d</span><br><span class=\"line\">&#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>和list比较，dict有以下几个特点：</p>\n<p>1.查找和插入的速度极快，不会随着key的增加而变慢；<br>2.需要占用大量的内存，内存浪费多。<br>3.dict内部存放的顺序和key放入的顺序是没有关系的<br>而list相反：     </p>\n<p>1.查找和插入的时间随着元素的增加而增加；<br>2.占用空间小，浪费内存很少。      </p>\n<h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h3><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>要创建一个set，需要提供一个list作为输入集合：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; s = <span class=\"built_in\">set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">&gt;&gt;&gt; s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">```  </span><br><span class=\"line\">注意，传入的参数[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]是一个list，而显示的&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;只是告诉你这个<span class=\"built_in\">set</span>内部有<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>这<span class=\"number\">3</span>个元素，显示的顺序也不表示<span class=\"built_in\">set</span>是有序的。   </span><br><span class=\"line\">重复元素在<span class=\"built_in\">set</span>中自动被过滤。    </span><br><span class=\"line\">通过<span class=\"built_in\">add</span>(<span class=\"built_in\">key</span>)方法可以添加元素到<span class=\"built_in\">set</span>中，可以重复添加，但不会有效果:</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>s.add(4)<br>s<br>{1, 2, 3, 4}<br>s.add(4)<br>s<br>{1, 2, 3, 4}<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过<span class=\"built_in\">remove</span>(<span class=\"built_in\">key</span>)方法可以删除元素：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>s.remove(4)<br>s<br>{1, 2, 3}<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 函数</span><br><span class=\"line\">### 定义函数</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>def my_abs(x):<br>    if x &gt;= 0:<br>        return x<br>    else:<br>        return -x<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 返回多个值</span><br></pre></td></tr></table></figure></p>\n<p>import math</p>\n<p>def move(x, y, step, angle=0):<br>    nx = x + step <em> math.cos(angle)<br>    ny = y - step </em> math.sin(angle)<br>    return nx, ny<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">&gt;&gt;&gt; x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</span><br><span class=\"line\">&gt;&gt;&gt; print(x, y)</span><br><span class=\"line\"><span class=\"number\">151.96152422706632</span> <span class=\"number\">70.0</span></span><br></pre></td></tr></table></figure></p>\n<p>其实返回的是一个tuple<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</span><br><span class=\"line\">&gt;&gt;&gt; print(r)</span><br><span class=\"line\">(<span class=\"number\">151.96152422706632</span>, <span class=\"number\">70.0</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"函数的参数\"><a href=\"#函数的参数\" class=\"headerlink\" title=\"函数的参数\"></a>函数的参数</h3><h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power</span><span class=\"params\">(x, n=<span class=\"number\">2</span>)</span></span><span class=\"symbol\">:</span></span><br><span class=\"line\">    s = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span><span class=\"symbol\">:</span></span><br><span class=\"line\">        n = n - <span class=\"number\">1</span></span><br><span class=\"line\">        s = s * x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br></pre></td></tr></table></figure>\n<p>当我们调用power(5)时，相当于调用power(5, 2):<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; power(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br><span class=\"line\">&gt;&gt;&gt; power(<span class=\"number\">5</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h4><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def calc(*numbers)<span class=\"symbol\">:</span></span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    for <span class=\"built_in\">n</span> in numbe<span class=\"symbol\">rs:</span></span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + <span class=\"built_in\">n</span> * <span class=\"built_in\">n</span></span><br><span class=\"line\">    return <span class=\"built_in\">sum</span></span><br></pre></td></tr></table></figure>\n<p>定义可变参数在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; calc(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; calc()</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<p>把list或tuple的元素变成可变参数传进去：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; nums = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; calc(*nums)</span><br><span class=\"line\"><span class=\"number\">14</span></span><br></pre></td></tr></table></figure></p>\n<p>*nums表示把nums这个list的所有元素作为可变参数传进去。</p>\n<h4 id=\"关键字参数\"><a href=\"#关键字参数\" class=\"headerlink\" title=\"关键字参数\"></a>关键字参数</h4><p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; person(<span class=\"string\">'Bob'</span>, <span class=\"number\">35</span>, city=<span class=\"string\">'Beijing'</span>)</span><br><span class=\"line\"><span class=\"string\">name:</span> Bob <span class=\"string\">age:</span> <span class=\"number\">35</span> <span class=\"string\">other:</span> &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>&#125;</span><br><span class=\"line\">&gt;&gt;&gt; person(<span class=\"string\">'Adam'</span>, <span class=\"number\">45</span>, gender=<span class=\"string\">'M'</span>, job=<span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\"><span class=\"string\">name:</span> Adam <span class=\"string\">age:</span> <span class=\"number\">45</span> <span class=\"string\">other:</span> &#123;<span class=\"string\">'gender'</span>: <span class=\"string\">'M'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, **extra)</span><br><span class=\"line\"><span class=\"symbol\">name:</span> Jack <span class=\"symbol\">age:</span> <span class=\"number\">24</span> <span class=\"symbol\">other:</span> &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"命名关键字参数\"><a href=\"#命名关键字参数\" class=\"headerlink\" title=\"命名关键字参数\"></a>命名关键字参数</h4><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *, city, job)</span>:</span></span><br><span class=\"line\">    print(name, age, city, job)</span><br></pre></td></tr></table></figure></p>\n<p>和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符<em>，</em>后面的参数被视为命名关键字参数。<br>调用方式如下：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;</span>&gt; person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, city=<span class=\"string\">'Beijing'</span>, job=<span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\">Jack <span class=\"number\">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure></p>\n<p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def person(name, age, *args, city, job):</span><br><span class=\"line\">    print(name, age, args, city, job)</span><br><span class=\"line\">```    </span><br><span class=\"line\">## 高级特性</span><br><span class=\"line\">### 切片</span><br><span class=\"line\">取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L = [‘Michael’, ‘Sarah’, ‘Tracy’, ‘Bob’, ‘Jack’]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取前<span class=\"number\">3</span>个元素，应该怎么做？</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[0:3]<br>[‘Michael’, ‘Sarah’, ‘Tracy’]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类似的，既然Python支持L[<span class=\"number\">-1</span>]取倒数第一个元素，那么它同样支持倒数切片   </span><br><span class=\"line\">切片操作十分有用。我们先创建一个<span class=\"number\">0</span><span class=\"number\">-99</span>的数列：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L = list(range(100))<br>L<br>[0, 1, 2, 3, …, 99]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前<span class=\"number\">10</span>个数：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[:10]<br>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后<span class=\"number\">10</span>个数：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[-10:]<br>[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前<span class=\"number\">10</span>个数，每两个取一个：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[:10:2]<br>[0, 2, 4, 6, 8]<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有数，每<span class=\"number\">5</span>个取一个：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[::5]<br>[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]<br><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只写<span class=\"string\">[:]</span>就可以原样复制一个list：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L[:]<br>[0, 1, 2, 3, …, 99]<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串<span class=\"string\">'xxx'</span>也可以看成是一种<span class=\"built_in\">list</span>，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>‘ABCDEFG’[:3]<br>‘ABC’<br>‘ABCDEFG’[::2]<br>‘ACEG’<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 列表生成式</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[x * x for x in range(1, 11)]<br>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>循环后面还可以加上<span class=\"keyword\">if</span>判断，这样我们就可以筛选出仅偶数的平方:</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[x * x for x in range(1, 11) if x % 2 == 0]<br>[4, 16, 36, 64, 100]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">还可以使用两层循环，可以生成全排列：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>[m + n for m in ‘ABC’ for n in ‘XYZ’]<br>[‘AX’, ‘AY’, ‘AZ’, ‘BX’, ‘BY’, ‘BZ’, ‘CX’, ‘CY’, ‘CZ’]<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">列表生成式也可以使用两个变量来生成<span class=\"built_in\">list</span>：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>d = {‘x’: ‘A’, ‘y’: ‘B’, ‘z’: ‘C’ }<br>[k + ‘=’ + v for k, v in d.items()]<br>[‘y=B’, ‘x=A’, ‘z=C’]<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最后把一个<span class=\"built_in\">list</span>中所有的字符串变成小写：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>L = [‘Hello’, ‘World’, ‘IBM’, ‘Apple’]<br>[s.lower() for s in L]<br>[‘hello’, ‘world’, ‘ibm’, ‘apple’]<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 高阶函数</span><br><span class=\"line\">### map/reduce</span><br><span class=\"line\">ap()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>def f(x):<br>…     return x * x<br>…<br>r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])<br>list(r)<br>[1, 4, 9, 16, 25, 36, 49, 64, 81]<br><figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce把一个函数作用在一个序列[<span class=\"keyword\">x</span><span class=\"number\">1</span>, <span class=\"keyword\">x</span><span class=\"number\">2</span>, <span class=\"keyword\">x</span><span class=\"number\">3</span>, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>from functools import reduce<br>def fn(x, y):<br>…     return x * 10 + y<br>…<br>reduce(fn, [1, 3, 5, 7, 9])<br>13579<br><figure class=\"highlight golo\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### filter</span></span><br><span class=\"line\">和<span class=\"keyword\">map</span>()类似，<span class=\"keyword\">filter</span>()也接收一个函数和一个序列。和<span class=\"keyword\">map</span>()不同的是，<span class=\"keyword\">filter</span>()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。   </span><br><span class=\"line\">例如，在一个<span class=\"keyword\">list</span>中，删掉偶数，只保留奇数，可以这么写：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>def is_odd(n):<br>    return n % 2 == 1</p>\n<p>list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))</p>\n<h1 id=\"结果-1-5-9-15\"><a href=\"#结果-1-5-9-15\" class=\"headerlink\" title=\"结果: [1, 5, 9, 15]\"></a>结果: [1, 5, 9, 15]</h1><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### sorted</span><br></pre></td></tr></table></figure>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sorted([36, 5, -12, 9, -21])<br>[-21, -12, 5, 9, 36]<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此外，sorted()函数也是一个高阶函数，它还可以接收一个<span class=\"built_in\">key</span>函数来实现自定义的排序，例如按绝对值大小排序：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sorted([36, 5, -12, 9, -21], key=abs)<br>[5, 9, -12, -21, 36]<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现忽略大小写的排序：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sorted([‘bob’, ‘about’, ‘Zoo’, ‘Credit’], key=str.lower)<br>[‘about’, ‘bob’, ‘Credit’, ‘Zoo’]<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要进行反向排序，不必改动key函数，可以传入第三个参数<span class=\"attribute\">reverse</span>=<span class=\"literal\">True</span>：</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>sorted([‘bob’, ‘about’, ‘Zoo’, ‘Credit’], key=str.lower, reverse=True)<br>[‘Zoo’, ‘Credit’, ‘bob’, ‘about’]<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 匿名函数（lambda）</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))<br>[1, 4, 9, 16, 25, 36, 49, 64, 81]<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 多线程</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>def test(num):<br>    for i in range(50):<br>        print(i)<br>        time.sleep(1)<br>t1 = threading.Thread(target=test,args=(50,))#注意函数名没有括号<br>t1.setDaemon(True)#设置守护进程，主进程退出时，子进程退出<br>t1.start()<br>t1.is_alive()#判断是否存活<br><code>`</code></p>\n"},{"layout":"posts","title":"git命令使用笔记","_content":"## 一、Git的基本使用\n### 1.Git安装(windows)\n* ·Git官网[下载安装程序](https://git-scm.com/downloads)\n* ·设置用户名和邮箱\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n### 2.创建本地版本库\n进入相应目录通过`git init`命令把这个目录变成Git可以管理的仓库：\n```\n$ git init\n```\n\n### 3.使用`git add .`命令把要提交的所有修改放到暂存区（Stage）\n```\n$ git add .\n```\n<!-- more -->\n`git add`后面可以是目录也可以是文件，作用为跟踪文件或将文件放入暂存区\n+ ·文件没有被跟踪不可被提交\n+ ·文件如果放入暂存区，可通过`git commit -m \"describle\"`提交到版本库\n+ ·没有放入暂存区，提交命令为`git commit -a -m \"describle\"`\n\n### 4.执行`git commit -m \"describle\"`就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。\n```\n$ git commit -m \"describle\"\n```\n\n## 二、Git与Github远程仓库\n### 1.生成SSH Key\n```\n$ ssh-keygen\n```\n一路回车（可不设置密码，默认在用户目录下的.ssh文件）\n### 2.Github添加SSH Key\n将生成的id_rsa.pub内容复制到Github添加SSH Key（用来认证拥有这个Key的人才能推送）的地方\n\n### 3.本地仓库关联远程仓库\n```\n$ git remote add origin git@github.com:fishrong/fishrong.github.io.git\n```\n\n只需关联一次（后面为自己仓库地址，也可用HTTP协议）\n### 4.用git push命令，把当前分支master推送到远程\n第一次使用命令(-u 为远程master分支和本地master关联)\n```\n$ git push -u origin master\n```\n\n(推送本地使用git commit 提交后的版本)\n之后简写命令\n```\n$ git push origin master\n```\n### 5.`git pull`与`git fetch`\n* ·`git pull`用来将远程版本抓取到本地并合并\n* ·`git fetch`用来将远程版本拉取到本地但需手动合并\n### 6.`git clone`\n将远程库克隆到本地\n```\n$ git clone git@github.com:fishrong/GitTest.git\n```\n\n## 参考资料\n[Git教程-廖雪峰](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\nGit 官方教程[Pro Git](https://git-scm.com/book/en/v2)\n","source":"_posts/2018/2018-02-03-git使用.md","raw":"---\nlayout: posts\ntitle: git命令使用笔记\ncategories: 常用的命令行工具\ntags:\n    - git\n---\n## 一、Git的基本使用\n### 1.Git安装(windows)\n* ·Git官网[下载安装程序](https://git-scm.com/downloads)\n* ·设置用户名和邮箱\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n### 2.创建本地版本库\n进入相应目录通过`git init`命令把这个目录变成Git可以管理的仓库：\n```\n$ git init\n```\n\n### 3.使用`git add .`命令把要提交的所有修改放到暂存区（Stage）\n```\n$ git add .\n```\n<!-- more -->\n`git add`后面可以是目录也可以是文件，作用为跟踪文件或将文件放入暂存区\n+ ·文件没有被跟踪不可被提交\n+ ·文件如果放入暂存区，可通过`git commit -m \"describle\"`提交到版本库\n+ ·没有放入暂存区，提交命令为`git commit -a -m \"describle\"`\n\n### 4.执行`git commit -m \"describle\"`就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。\n```\n$ git commit -m \"describle\"\n```\n\n## 二、Git与Github远程仓库\n### 1.生成SSH Key\n```\n$ ssh-keygen\n```\n一路回车（可不设置密码，默认在用户目录下的.ssh文件）\n### 2.Github添加SSH Key\n将生成的id_rsa.pub内容复制到Github添加SSH Key（用来认证拥有这个Key的人才能推送）的地方\n\n### 3.本地仓库关联远程仓库\n```\n$ git remote add origin git@github.com:fishrong/fishrong.github.io.git\n```\n\n只需关联一次（后面为自己仓库地址，也可用HTTP协议）\n### 4.用git push命令，把当前分支master推送到远程\n第一次使用命令(-u 为远程master分支和本地master关联)\n```\n$ git push -u origin master\n```\n\n(推送本地使用git commit 提交后的版本)\n之后简写命令\n```\n$ git push origin master\n```\n### 5.`git pull`与`git fetch`\n* ·`git pull`用来将远程版本抓取到本地并合并\n* ·`git fetch`用来将远程版本拉取到本地但需手动合并\n### 6.`git clone`\n将远程库克隆到本地\n```\n$ git clone git@github.com:fishrong/GitTest.git\n```\n\n## 参考资料\n[Git教程-廖雪峰](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\nGit 官方教程[Pro Git](https://git-scm.com/book/en/v2)\n","slug":"2018-2018-02-03-git使用","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-11-17T06:35:57.773Z","comments":1,"photos":[],"link":"","_id":"cjp191u9g000kd3fojr9avv56","content":"<h2 id=\"一、Git的基本使用\"><a href=\"#一、Git的基本使用\" class=\"headerlink\" title=\"一、Git的基本使用\"></a>一、Git的基本使用</h2><h3 id=\"1-Git安装-windows\"><a href=\"#1-Git安装-windows\" class=\"headerlink\" title=\"1.Git安装(windows)\"></a>1.Git安装(windows)</h3><ul>\n<li>·Git官网<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载安装程序</a></li>\n<li>·设置用户名和邮箱<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-创建本地版本库\"><a href=\"#2-创建本地版本库\" class=\"headerlink\" title=\"2.创建本地版本库\"></a>2.创建本地版本库</h3><p>进入相应目录通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-使用git-add-命令把要提交的所有修改放到暂存区（Stage）\"><a href=\"#3-使用git-add-命令把要提交的所有修改放到暂存区（Stage）\" class=\"headerlink\" title=\"3.使用git add .命令把要提交的所有修改放到暂存区（Stage）\"></a>3.使用<code>git add .</code>命令把要提交的所有修改放到暂存区（Stage）</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> .</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><code>git add</code>后面可以是目录也可以是文件，作用为跟踪文件或将文件放入暂存区</p>\n<ul>\n<li>·文件没有被跟踪不可被提交</li>\n<li>·文件如果放入暂存区，可通过<code>git commit -m &quot;describle&quot;</code>提交到版本库</li>\n<li>·没有放入暂存区，提交命令为<code>git commit -a -m &quot;describle&quot;</code></li>\n</ul>\n<h3 id=\"4-执行git-commit-m-quot-describle-quot-就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。\"><a href=\"#4-执行git-commit-m-quot-describle-quot-就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。\" class=\"headerlink\" title=\"4.执行git commit -m &quot;describle&quot;就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。\"></a>4.执行<code>git commit -m &quot;describle&quot;</code>就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"describle\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、Git与Github远程仓库\"><a href=\"#二、Git与Github远程仓库\" class=\"headerlink\" title=\"二、Git与Github远程仓库\"></a>二、Git与Github远程仓库</h2><h3 id=\"1-生成SSH-Key\"><a href=\"#1-生成SSH-Key\" class=\"headerlink\" title=\"1.生成SSH Key\"></a>1.生成SSH Key</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>一路回车（可不设置密码，默认在用户目录下的.ssh文件）</p>\n<h3 id=\"2-Github添加SSH-Key\"><a href=\"#2-Github添加SSH-Key\" class=\"headerlink\" title=\"2.Github添加SSH Key\"></a>2.Github添加SSH Key</h3><p>将生成的id_rsa.pub内容复制到Github添加SSH Key（用来认证拥有这个Key的人才能推送）的地方</p>\n<h3 id=\"3-本地仓库关联远程仓库\"><a href=\"#3-本地仓库关联远程仓库\" class=\"headerlink\" title=\"3.本地仓库关联远程仓库\"></a>3.本地仓库关联远程仓库</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github<span class=\"selector-class\">.com</span>:fishrong/fishrong<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span><span class=\"selector-class\">.git</span></span><br></pre></td></tr></table></figure>\n<p>只需关联一次（后面为自己仓库地址，也可用HTTP协议）</p>\n<h3 id=\"4-用git-push命令，把当前分支master推送到远程\"><a href=\"#4-用git-push命令，把当前分支master推送到远程\" class=\"headerlink\" title=\"4.用git push命令，把当前分支master推送到远程\"></a>4.用git push命令，把当前分支master推送到远程</h3><p>第一次使用命令(-u 为远程master分支和本地master关联)<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></p>\n<p>(推送本地使用git commit 提交后的版本)<br>之后简写命令<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-git-pull与git-fetch\"><a href=\"#5-git-pull与git-fetch\" class=\"headerlink\" title=\"5.git pull与git fetch\"></a>5.<code>git pull</code>与<code>git fetch</code></h3><ul>\n<li>·<code>git pull</code>用来将远程版本抓取到本地并合并</li>\n<li>·<code>git fetch</code>用来将远程版本拉取到本地但需手动合并<h3 id=\"6-git-clone\"><a href=\"#6-git-clone\" class=\"headerlink\" title=\"6.git clone\"></a>6.<code>git clone</code></h3>将远程库克隆到本地<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@github.com:fishrong/GitTest.git</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程-廖雪峰</a><br>Git 官方教程<a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、Git的基本使用\"><a href=\"#一、Git的基本使用\" class=\"headerlink\" title=\"一、Git的基本使用\"></a>一、Git的基本使用</h2><h3 id=\"1-Git安装-windows\"><a href=\"#1-Git安装-windows\" class=\"headerlink\" title=\"1.Git安装(windows)\"></a>1.Git安装(windows)</h3><ul>\n<li>·Git官网<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载安装程序</a></li>\n<li>·设置用户名和邮箱<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">\"Your Name\"</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-创建本地版本库\"><a href=\"#2-创建本地版本库\" class=\"headerlink\" title=\"2.创建本地版本库\"></a>2.创建本地版本库</h3><p>进入相应目录通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-使用git-add-命令把要提交的所有修改放到暂存区（Stage）\"><a href=\"#3-使用git-add-命令把要提交的所有修改放到暂存区（Stage）\" class=\"headerlink\" title=\"3.使用git add .命令把要提交的所有修改放到暂存区（Stage）\"></a>3.使用<code>git add .</code>命令把要提交的所有修改放到暂存区（Stage）</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">add</span><span class=\"bash\"> .</span></span><br></pre></td></tr></table></figure>","more":"<p><code>git add</code>后面可以是目录也可以是文件，作用为跟踪文件或将文件放入暂存区</p>\n<ul>\n<li>·文件没有被跟踪不可被提交</li>\n<li>·文件如果放入暂存区，可通过<code>git commit -m &quot;describle&quot;</code>提交到版本库</li>\n<li>·没有放入暂存区，提交命令为<code>git commit -a -m &quot;describle&quot;</code></li>\n</ul>\n<h3 id=\"4-执行git-commit-m-quot-describle-quot-就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。\"><a href=\"#4-执行git-commit-m-quot-describle-quot-就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。\" class=\"headerlink\" title=\"4.执行git commit -m &quot;describle&quot;就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。\"></a>4.执行<code>git commit -m &quot;describle&quot;</code>就可以一次性把暂存区的所有修改提交到本地分支作为一个版本。</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">\"describle\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、Git与Github远程仓库\"><a href=\"#二、Git与Github远程仓库\" class=\"headerlink\" title=\"二、Git与Github远程仓库\"></a>二、Git与Github远程仓库</h2><h3 id=\"1-生成SSH-Key\"><a href=\"#1-生成SSH-Key\" class=\"headerlink\" title=\"1.生成SSH Key\"></a>1.生成SSH Key</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>一路回车（可不设置密码，默认在用户目录下的.ssh文件）</p>\n<h3 id=\"2-Github添加SSH-Key\"><a href=\"#2-Github添加SSH-Key\" class=\"headerlink\" title=\"2.Github添加SSH Key\"></a>2.Github添加SSH Key</h3><p>将生成的id_rsa.pub内容复制到Github添加SSH Key（用来认证拥有这个Key的人才能推送）的地方</p>\n<h3 id=\"3-本地仓库关联远程仓库\"><a href=\"#3-本地仓库关联远程仓库\" class=\"headerlink\" title=\"3.本地仓库关联远程仓库\"></a>3.本地仓库关联远程仓库</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github<span class=\"selector-class\">.com</span>:fishrong/fishrong<span class=\"selector-class\">.github</span><span class=\"selector-class\">.io</span><span class=\"selector-class\">.git</span></span><br></pre></td></tr></table></figure>\n<p>只需关联一次（后面为自己仓库地址，也可用HTTP协议）</p>\n<h3 id=\"4-用git-push命令，把当前分支master推送到远程\"><a href=\"#4-用git-push命令，把当前分支master推送到远程\" class=\"headerlink\" title=\"4.用git push命令，把当前分支master推送到远程\"></a>4.用git push命令，把当前分支master推送到远程</h3><p>第一次使用命令(-u 为远程master分支和本地master关联)<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> -u <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></p>\n<p>(推送本地使用git commit 提交后的版本)<br>之后简写命令<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-git-pull与git-fetch\"><a href=\"#5-git-pull与git-fetch\" class=\"headerlink\" title=\"5.git pull与git fetch\"></a>5.<code>git pull</code>与<code>git fetch</code></h3><ul>\n<li>·<code>git pull</code>用来将远程版本抓取到本地并合并</li>\n<li>·<code>git fetch</code>用来将远程版本拉取到本地但需手动合并<h3 id=\"6-git-clone\"><a href=\"#6-git-clone\" class=\"headerlink\" title=\"6.git clone\"></a>6.<code>git clone</code></h3>将远程库克隆到本地<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">clone</span> <span class=\"title\">git</span>@github.com:fishrong/GitTest.git</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程-廖雪峰</a><br>Git 官方教程<a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a></p>"},{"layout":"posts","title":"Linux下python的虚拟环境搭建","_content":"## 1.安装virtualenv\n```\nsudo pip3 install virtualenv\n```\n## 2.安装virtualenvwrapper\n```\nsudo pip3 install virtualenvwrapper\n```\n## 3.在~/.bashrc中添加以下三行：\n```\nexport WORKON_HOME=$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\n```\n注意这里安装时所用命令为pip3所以上面第三行代码将Python版本路径设为/usr/bin/python3\n## 4.运行:\n```\nsource ~/.bashrc\n```\n<!-- more -->\n## 5.创建python虚拟环境\n```\nmkvirtualenv [虚拟环境名称]\nworkon [虚拟环境名称]\n```\n创建python3虚拟环境\n```\nmkvirtualenv -p /usr/bin/python3 env34\n\n```\n查看当前Python版本\n```\npython --version\n```\n## 6.退出虚拟环境\n```\ndeactivate\n```\n## 7.删除（先退出虚拟环境）\n```\nrmvirtualenv [虚拟环境名称]\n```\n## 报错解决\n若报以下错误：\n```\n/usr/bin/python: No module named virtualenvwrapper  \nvirtualenvwrapper.sh: There was a problem running the initialization hooks.   \nIf Python could not import the module virtualenvwrapper.hook_loader,  \ncheck that virtualenvwrapper has been installed for  \nVIRTUALENVWRAPPER_PYTHON=/usr/bin/python and that PATH is  \nset properly.  \n```\n进入virtualenvwrapper.sh找到以下内容：\n```\n# Locate the global Python where virtualenvwrapper is installed.\nif [ \"${VIRTUALENVWRAPPER_PYTHON:-}\" = \"\" ]\nthen\n    VIRTUALENVWRAPPER_PYTHON=\"$(command \\which python)\" \nfi\n```\n改为以下内容：\n```\n# Locate the global Python where virtualenvwrapper is installed.\nif [ \"${VIRTUALENVWRAPPER_PYTHON:-}\" = \"\" ]\nthen\n    VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nfi\n```\n\n\n\n## Django使用\n### 创建项目\n```\ndiango-admin startproject test1\n```\n### 创建应用\n```\npython manage.py startapp first_app\n```\n","source":"_posts/2018/2018-02-06-python虚拟环境搭建.md","raw":"---\nlayout: posts\ntitle: Linux下python的虚拟环境搭建\ncategories: python学习笔记\ntags:\n    - Linux\n    - python虚拟环境\n---\n## 1.安装virtualenv\n```\nsudo pip3 install virtualenv\n```\n## 2.安装virtualenvwrapper\n```\nsudo pip3 install virtualenvwrapper\n```\n## 3.在~/.bashrc中添加以下三行：\n```\nexport WORKON_HOME=$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\nexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\n```\n注意这里安装时所用命令为pip3所以上面第三行代码将Python版本路径设为/usr/bin/python3\n## 4.运行:\n```\nsource ~/.bashrc\n```\n<!-- more -->\n## 5.创建python虚拟环境\n```\nmkvirtualenv [虚拟环境名称]\nworkon [虚拟环境名称]\n```\n创建python3虚拟环境\n```\nmkvirtualenv -p /usr/bin/python3 env34\n\n```\n查看当前Python版本\n```\npython --version\n```\n## 6.退出虚拟环境\n```\ndeactivate\n```\n## 7.删除（先退出虚拟环境）\n```\nrmvirtualenv [虚拟环境名称]\n```\n## 报错解决\n若报以下错误：\n```\n/usr/bin/python: No module named virtualenvwrapper  \nvirtualenvwrapper.sh: There was a problem running the initialization hooks.   \nIf Python could not import the module virtualenvwrapper.hook_loader,  \ncheck that virtualenvwrapper has been installed for  \nVIRTUALENVWRAPPER_PYTHON=/usr/bin/python and that PATH is  \nset properly.  \n```\n进入virtualenvwrapper.sh找到以下内容：\n```\n# Locate the global Python where virtualenvwrapper is installed.\nif [ \"${VIRTUALENVWRAPPER_PYTHON:-}\" = \"\" ]\nthen\n    VIRTUALENVWRAPPER_PYTHON=\"$(command \\which python)\" \nfi\n```\n改为以下内容：\n```\n# Locate the global Python where virtualenvwrapper is installed.\nif [ \"${VIRTUALENVWRAPPER_PYTHON:-}\" = \"\" ]\nthen\n    VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3\nfi\n```\n\n\n\n## Django使用\n### 创建项目\n```\ndiango-admin startproject test1\n```\n### 创建应用\n```\npython manage.py startapp first_app\n```\n","slug":"2018-2018-02-06-python虚拟环境搭建","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:06:28.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9h000nd3fo73n54mct","content":"<h2 id=\"1-安装virtualenv\"><a href=\"#1-安装virtualenv\" class=\"headerlink\" title=\"1.安装virtualenv\"></a>1.安装virtualenv</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 <span class=\"keyword\">install</span> virtualenv</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-安装virtualenvwrapper\"><a href=\"#2-安装virtualenvwrapper\" class=\"headerlink\" title=\"2.安装virtualenvwrapper\"></a>2.安装virtualenvwrapper</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 <span class=\"keyword\">install</span> virtualenvwrapper</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-在-bashrc中添加以下三行：\"><a href=\"#3-在-bashrc中添加以下三行：\" class=\"headerlink\" title=\"3.在~/.bashrc中添加以下三行：\"></a>3.在~/.bashrc中添加以下三行：</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">WORKON_HOME</span>=<span class=\"variable\">$HOME</span>/.virtualenvs</span><br><span class=\"line\">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">VIRTUALENVWRAPPER_PYTHON</span>=/usr/bin/python3</span><br></pre></td></tr></table></figure>\n<p>注意这里安装时所用命令为pip3所以上面第三行代码将Python版本路径设为/usr/bin/python3</p>\n<h2 id=\"4-运行\"><a href=\"#4-运行\" class=\"headerlink\" title=\"4.运行:\"></a>4.运行:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"5-创建python虚拟环境\"><a href=\"#5-创建python虚拟环境\" class=\"headerlink\" title=\"5.创建python虚拟环境\"></a>5.创建python虚拟环境</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv <span class=\"string\">[虚拟环境名称]</span></span><br><span class=\"line\">workon <span class=\"string\">[虚拟环境名称]</span></span><br></pre></td></tr></table></figure>\n<p>创建python3虚拟环境<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv -<span class=\"selector-tag\">p</span> /usr/bin/python3 env34</span><br></pre></td></tr></table></figure></p>\n<p>查看当前Python版本<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">python</span> --<span class=\"keyword\">version</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-退出虚拟环境\"><a href=\"#6-退出虚拟环境\" class=\"headerlink\" title=\"6.退出虚拟环境\"></a>6.退出虚拟环境</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deactivate</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-删除（先退出虚拟环境）\"><a href=\"#7-删除（先退出虚拟环境）\" class=\"headerlink\" title=\"7.删除（先退出虚拟环境）\"></a>7.删除（先退出虚拟环境）</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmvirtualenv <span class=\"string\">[虚拟环境名称]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"报错解决\"><a href=\"#报错解决\" class=\"headerlink\" title=\"报错解决\"></a>报错解决</h2><p>若报以下错误：<br><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python: No module named virtualenvwrapper  </span><br><span class=\"line\">virtualenvwrapper.sh: There was a problem running the initialization hooks.   </span><br><span class=\"line\">If Python could<span class=\"built_in\"> not </span>import the module virtualenvwrapper.hook_loader,  </span><br><span class=\"line\">check that virtualenvwrapper has been installed for  </span><br><span class=\"line\">VIRTUALENVWRAPPER_PYTHON=/usr/bin/python<span class=\"built_in\"> and </span>that PATH is  </span><br><span class=\"line\">set properly.</span><br></pre></td></tr></table></figure></p>\n<p>进入virtualenvwrapper.sh找到以下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Locate the global Python where virtualenvwrapper is installed.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;VIRTUALENVWRAPPER_PYTHON:-&#125;</span>\"</span> = <span class=\"string\">\"\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    VIRTUALENVWRAPPER_PYTHON=<span class=\"string\">\"<span class=\"variable\">$(command \\which python)</span>\"</span> </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<p>改为以下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Locate the global Python where virtualenvwrapper is installed.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;VIRTUALENVWRAPPER_PYTHON:-&#125;</span>\"</span> = <span class=\"string\">\"\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django使用\"><a href=\"#Django使用\" class=\"headerlink\" title=\"Django使用\"></a>Django使用</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">diango-admin </span>startproject test1</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage<span class=\"selector-class\">.py</span> startapp first_app</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-安装virtualenv\"><a href=\"#1-安装virtualenv\" class=\"headerlink\" title=\"1.安装virtualenv\"></a>1.安装virtualenv</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 <span class=\"keyword\">install</span> virtualenv</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-安装virtualenvwrapper\"><a href=\"#2-安装virtualenvwrapper\" class=\"headerlink\" title=\"2.安装virtualenvwrapper\"></a>2.安装virtualenvwrapper</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 <span class=\"keyword\">install</span> virtualenvwrapper</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-在-bashrc中添加以下三行：\"><a href=\"#3-在-bashrc中添加以下三行：\" class=\"headerlink\" title=\"3.在~/.bashrc中添加以下三行：\"></a>3.在~/.bashrc中添加以下三行：</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">WORKON_HOME</span>=<span class=\"variable\">$HOME</span>/.virtualenvs</span><br><span class=\"line\">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">VIRTUALENVWRAPPER_PYTHON</span>=/usr/bin/python3</span><br></pre></td></tr></table></figure>\n<p>注意这里安装时所用命令为pip3所以上面第三行代码将Python版本路径设为/usr/bin/python3</p>\n<h2 id=\"4-运行\"><a href=\"#4-运行\" class=\"headerlink\" title=\"4.运行:\"></a>4.运行:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"5-创建python虚拟环境\"><a href=\"#5-创建python虚拟环境\" class=\"headerlink\" title=\"5.创建python虚拟环境\"></a>5.创建python虚拟环境</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv <span class=\"string\">[虚拟环境名称]</span></span><br><span class=\"line\">workon <span class=\"string\">[虚拟环境名称]</span></span><br></pre></td></tr></table></figure>\n<p>创建python3虚拟环境<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv -<span class=\"selector-tag\">p</span> /usr/bin/python3 env34</span><br></pre></td></tr></table></figure></p>\n<p>查看当前Python版本<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">python</span> --<span class=\"keyword\">version</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"6-退出虚拟环境\"><a href=\"#6-退出虚拟环境\" class=\"headerlink\" title=\"6.退出虚拟环境\"></a>6.退出虚拟环境</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deactivate</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-删除（先退出虚拟环境）\"><a href=\"#7-删除（先退出虚拟环境）\" class=\"headerlink\" title=\"7.删除（先退出虚拟环境）\"></a>7.删除（先退出虚拟环境）</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rmvirtualenv <span class=\"string\">[虚拟环境名称]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"报错解决\"><a href=\"#报错解决\" class=\"headerlink\" title=\"报错解决\"></a>报错解决</h2><p>若报以下错误：<br><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python: No module named virtualenvwrapper  </span><br><span class=\"line\">virtualenvwrapper.sh: There was a problem running the initialization hooks.   </span><br><span class=\"line\">If Python could<span class=\"built_in\"> not </span>import the module virtualenvwrapper.hook_loader,  </span><br><span class=\"line\">check that virtualenvwrapper has been installed for  </span><br><span class=\"line\">VIRTUALENVWRAPPER_PYTHON=/usr/bin/python<span class=\"built_in\"> and </span>that PATH is  </span><br><span class=\"line\">set properly.</span><br></pre></td></tr></table></figure></p>\n<p>进入virtualenvwrapper.sh找到以下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Locate the global Python where virtualenvwrapper is installed.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;VIRTUALENVWRAPPER_PYTHON:-&#125;</span>\"</span> = <span class=\"string\">\"\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    VIRTUALENVWRAPPER_PYTHON=<span class=\"string\">\"<span class=\"variable\">$(command \\which python)</span>\"</span> </span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<p>改为以下内容：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Locate the global Python where virtualenvwrapper is installed.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$&#123;VIRTUALENVWRAPPER_PYTHON:-&#125;</span>\"</span> = <span class=\"string\">\"\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django使用\"><a href=\"#Django使用\" class=\"headerlink\" title=\"Django使用\"></a>Django使用</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">diango-admin </span>startproject test1</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage<span class=\"selector-class\">.py</span> startapp first_app</span><br></pre></td></tr></table></figure>"},{"layout":"posts","title":"使用matplot画柱状图","_content":"## 代码示例\n```\nimport matplotlib.pyplot as plt\n\ndata = [5, 20, 15, 25, 10]\nlabels = ['Tom', 'Dick', 'Harry', 'Slim', 'Jim']#横坐标标记\nxx=range(len(data))\nplt.bar(range(len(data)), data, tick_label=labels)\n# bar(left, height, width=0.8, bottom=None, hold=None, **kwargs)  \n# 绘制柱形图  \n# left:柱形图的x坐标  \n# height柱形图的高度，以0.0为基准  \n# width:柱形图的宽度，默认0.8  \n# facecolor:颜色  \n# edgecolor:边框颜色n  \n# bottom:表示底部从y轴的哪个刻度开始画  \n# yerr:应该是对应的数据的误差范围，加上这个参数，柱状图头部会有一个蓝色的范围标识,标出允许的误差范围,在水平柱状图中这个参数为xerr  \nfor x,y in zip(xx,data):#用来在显示每一条的上方显示y值\n    plt.text(x,y+0.05,'%.2f' % y,ha='center',va='bottom')\n    #x, y+0.05表示在每一柱子对应x值、y值上方0.05处标注文字说明， '%.0f' % y,代表标注的文字，即每个柱子对应的y值， ha='center', va= 'bottom'代表horizontalalignment（水平对齐）、verticalalignment（垂直对齐）的方式\nplt.title('学生成绩')\nplt.savefig(r'F:\\QQzone_spider\\\\' +r'\\\\'+name+ \".png\")#图片保存路径,在show()之前\nplt.show()\n```\n## 效果如图:\n<!-- more -->\n![柱状图](/images/bar1.png)\n\n## 解决matplotlib中文乱码问题\n进入Python安装目录下的Lib\\site-packages\\matplotlib\\mpl-data目录，打开matplotlibrc文件，删除font.family和font.sans-serif两行前的#，并在font.sans-serif后添加字体（SimHei），代码如下：\n```\nfont.sans-serif     : SimHei,Microsoft YaHei,DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif\n```\n","source":"_posts/2018/2018-03-26-matplotlib画柱状图.md","raw":"---\nlayout: posts\ntitle: 使用matplot画柱状图\ncategories: python学习笔记\ntags: \n    - python\n    - matplot\n---\n## 代码示例\n```\nimport matplotlib.pyplot as plt\n\ndata = [5, 20, 15, 25, 10]\nlabels = ['Tom', 'Dick', 'Harry', 'Slim', 'Jim']#横坐标标记\nxx=range(len(data))\nplt.bar(range(len(data)), data, tick_label=labels)\n# bar(left, height, width=0.8, bottom=None, hold=None, **kwargs)  \n# 绘制柱形图  \n# left:柱形图的x坐标  \n# height柱形图的高度，以0.0为基准  \n# width:柱形图的宽度，默认0.8  \n# facecolor:颜色  \n# edgecolor:边框颜色n  \n# bottom:表示底部从y轴的哪个刻度开始画  \n# yerr:应该是对应的数据的误差范围，加上这个参数，柱状图头部会有一个蓝色的范围标识,标出允许的误差范围,在水平柱状图中这个参数为xerr  \nfor x,y in zip(xx,data):#用来在显示每一条的上方显示y值\n    plt.text(x,y+0.05,'%.2f' % y,ha='center',va='bottom')\n    #x, y+0.05表示在每一柱子对应x值、y值上方0.05处标注文字说明， '%.0f' % y,代表标注的文字，即每个柱子对应的y值， ha='center', va= 'bottom'代表horizontalalignment（水平对齐）、verticalalignment（垂直对齐）的方式\nplt.title('学生成绩')\nplt.savefig(r'F:\\QQzone_spider\\\\' +r'\\\\'+name+ \".png\")#图片保存路径,在show()之前\nplt.show()\n```\n## 效果如图:\n<!-- more -->\n![柱状图](/images/bar1.png)\n\n## 解决matplotlib中文乱码问题\n进入Python安装目录下的Lib\\site-packages\\matplotlib\\mpl-data目录，打开matplotlibrc文件，删除font.family和font.sans-serif两行前的#，并在font.sans-serif后添加字体（SimHei），代码如下：\n```\nfont.sans-serif     : SimHei,Microsoft YaHei,DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif\n```\n","slug":"2018-2018-03-26-matplotlib画柱状图","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T07:46:56.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9i000qd3fos7tejrwx","content":"<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">data = [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">labels = [<span class=\"string\">'Tom'</span>, <span class=\"string\">'Dick'</span>, <span class=\"string\">'Harry'</span>, <span class=\"string\">'Slim'</span>, <span class=\"string\">'Jim'</span>]<span class=\"comment\">#横坐标标记</span></span><br><span class=\"line\">xx=range(len(data))</span><br><span class=\"line\">plt.bar(range(len(data)), data, tick_label=labels)</span><br><span class=\"line\"><span class=\"comment\"># bar(left, height, width=0.8, bottom=None, hold=None, **kwargs)  </span></span><br><span class=\"line\"><span class=\"comment\"># 绘制柱形图  </span></span><br><span class=\"line\"><span class=\"comment\"># left:柱形图的x坐标  </span></span><br><span class=\"line\"><span class=\"comment\"># height柱形图的高度，以0.0为基准  </span></span><br><span class=\"line\"><span class=\"comment\"># width:柱形图的宽度，默认0.8  </span></span><br><span class=\"line\"><span class=\"comment\"># facecolor:颜色  </span></span><br><span class=\"line\"><span class=\"comment\"># edgecolor:边框颜色n  </span></span><br><span class=\"line\"><span class=\"comment\"># bottom:表示底部从y轴的哪个刻度开始画  </span></span><br><span class=\"line\"><span class=\"comment\"># yerr:应该是对应的数据的误差范围，加上这个参数，柱状图头部会有一个蓝色的范围标识,标出允许的误差范围,在水平柱状图中这个参数为xerr  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> zip(xx,data):<span class=\"comment\">#用来在显示每一条的上方显示y值</span></span><br><span class=\"line\">    plt.text(x,y+<span class=\"number\">0.05</span>,<span class=\"string\">'%.2f'</span> % y,ha=<span class=\"string\">'center'</span>,va=<span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#x, y+0.05表示在每一柱子对应x值、y值上方0.05处标注文字说明， '%.0f' % y,代表标注的文字，即每个柱子对应的y值， ha='center', va= 'bottom'代表horizontalalignment（水平对齐）、verticalalignment（垂直对齐）的方式</span></span><br><span class=\"line\">plt.title(<span class=\"string\">'学生成绩'</span>)</span><br><span class=\"line\">plt.savefig(<span class=\"string\">r'F:\\QQzone_spider\\\\'</span> +<span class=\"string\">r'\\\\'</span>+name+ <span class=\"string\">\".png\"</span>)<span class=\"comment\">#图片保存路径,在show()之前</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果如图\"><a href=\"#效果如图\" class=\"headerlink\" title=\"效果如图:\"></a>效果如图:</h2><a id=\"more\"></a>\n<p><img src=\"/images/bar1.png\" alt=\"柱状图\"></p>\n<h2 id=\"解决matplotlib中文乱码问题\"><a href=\"#解决matplotlib中文乱码问题\" class=\"headerlink\" title=\"解决matplotlib中文乱码问题\"></a>解决matplotlib中文乱码问题</h2><p>进入Python安装目录下的Lib\\site-packages\\matplotlib\\mpl-data目录，打开matplotlibrc文件，删除font.family和font.sans-serif两行前的#，并在font.sans-serif后添加字体（SimHei），代码如下：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font.sans-serif     : <span class=\"type\">SimHei</span>,Microsoft YaHei,DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">data = [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">25</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\">labels = [<span class=\"string\">'Tom'</span>, <span class=\"string\">'Dick'</span>, <span class=\"string\">'Harry'</span>, <span class=\"string\">'Slim'</span>, <span class=\"string\">'Jim'</span>]<span class=\"comment\">#横坐标标记</span></span><br><span class=\"line\">xx=range(len(data))</span><br><span class=\"line\">plt.bar(range(len(data)), data, tick_label=labels)</span><br><span class=\"line\"><span class=\"comment\"># bar(left, height, width=0.8, bottom=None, hold=None, **kwargs)  </span></span><br><span class=\"line\"><span class=\"comment\"># 绘制柱形图  </span></span><br><span class=\"line\"><span class=\"comment\"># left:柱形图的x坐标  </span></span><br><span class=\"line\"><span class=\"comment\"># height柱形图的高度，以0.0为基准  </span></span><br><span class=\"line\"><span class=\"comment\"># width:柱形图的宽度，默认0.8  </span></span><br><span class=\"line\"><span class=\"comment\"># facecolor:颜色  </span></span><br><span class=\"line\"><span class=\"comment\"># edgecolor:边框颜色n  </span></span><br><span class=\"line\"><span class=\"comment\"># bottom:表示底部从y轴的哪个刻度开始画  </span></span><br><span class=\"line\"><span class=\"comment\"># yerr:应该是对应的数据的误差范围，加上这个参数，柱状图头部会有一个蓝色的范围标识,标出允许的误差范围,在水平柱状图中这个参数为xerr  </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> x,y <span class=\"keyword\">in</span> zip(xx,data):<span class=\"comment\">#用来在显示每一条的上方显示y值</span></span><br><span class=\"line\">    plt.text(x,y+<span class=\"number\">0.05</span>,<span class=\"string\">'%.2f'</span> % y,ha=<span class=\"string\">'center'</span>,va=<span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">    <span class=\"comment\">#x, y+0.05表示在每一柱子对应x值、y值上方0.05处标注文字说明， '%.0f' % y,代表标注的文字，即每个柱子对应的y值， ha='center', va= 'bottom'代表horizontalalignment（水平对齐）、verticalalignment（垂直对齐）的方式</span></span><br><span class=\"line\">plt.title(<span class=\"string\">'学生成绩'</span>)</span><br><span class=\"line\">plt.savefig(<span class=\"string\">r'F:\\QQzone_spider\\\\'</span> +<span class=\"string\">r'\\\\'</span>+name+ <span class=\"string\">\".png\"</span>)<span class=\"comment\">#图片保存路径,在show()之前</span></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<h2 id=\"效果如图\"><a href=\"#效果如图\" class=\"headerlink\" title=\"效果如图:\"></a>效果如图:</h2>","more":"<p><img src=\"/images/bar1.png\" alt=\"柱状图\"></p>\n<h2 id=\"解决matplotlib中文乱码问题\"><a href=\"#解决matplotlib中文乱码问题\" class=\"headerlink\" title=\"解决matplotlib中文乱码问题\"></a>解决matplotlib中文乱码问题</h2><p>进入Python安装目录下的Lib\\site-packages\\matplotlib\\mpl-data目录，打开matplotlibrc文件，删除font.family和font.sans-serif两行前的#，并在font.sans-serif后添加字体（SimHei），代码如下：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font.sans-serif     : <span class=\"type\">SimHei</span>,Microsoft YaHei,DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif</span><br></pre></td></tr></table></figure></p>"},{"layout":"posts","title":"selenium的使用","_content":"## 下载相应浏览器驱动\n放在python的根目录下\n## 初始化\n```\nfrom selenium import webdriver\nfrom selenium.common.exceptions import TimeoutException\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nbrowser = webdriver.Chrome()#驱动谷歌浏览器\nwait = WebDriverWait(browser,10)#等待时间\n```\n需下载谷歌浏览器驱动[chromedriver](http://npm.taobao.org/mirrors/chromedriver/)。注意不同版本浏览器需下载相应的驱动。\n将下载的chromedriver解压后移动到/usr/local/bin\n## 输入文本及点击按钮\n```\ndef search():\n    try:\n        browser.get('https://www.taobao.com/')\n        input = wait.until(\n            EC.presence_of_element_located((By.CSS_SELECTOR,'#q'))\n        )\n        submit = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,'#J_TSearchForm > div.search-button > button')))\n        input.send_keys('美食')#输入文字\n        submit.click()#点击按钮\n        total = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,'#mainsrp-pager > div > div > div > div.total')))\n        get_products()\n        return total.text\n    except TimeoutException:\n        return search()#发生错误再执行一遍\n```\n<!-- more -->\n## 利用pyquery解析网页\n```\nfrom pyquery import PyQuery as pq\ndef get_products():\n    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,'#mainsrp-itemlist .items .item')))\n    html = browser.page_source#获取网页源代码\n    doc = pq(html)\n    items = doc('#mainsrp-itemlist .items .item').items()\n    for item in items:\n        product = {\n            'image':'https:'+item.find('.pic .img').attr('src'),\n            'title':item.find('.title').text()\n        }\n        print(product)\n```\n\n## 模拟手机点击\n```\nTouchActions(browser).tap(return_name).perform()#模拟手机点击tap里为获取元素，broswer：浏览器实例\n```\n## 进行翻页操作\n```\nbrowser.execute_script(\"window.scrollBy(0, 10000)\")\n```\n## 使用jieba统计词频\n```\nseg_list = jieba.lcut(txt)#txt：文本输入，返回list\n```\n## 对字典排序\n```\nresult = sorted(seg_dic.items(),key=lambda e:e[1],reverse=True)[:15]#True降序排列\n```\n## 对下拉列表进行选择\nselect类型：\n```\n# 通过index进行选择\nSelect(driver.find_element_by_id(\"gender\")).select_by_index(1)\n# 通过value进行选择\nSelect(driver.find_element_by_id(\"gender\")).select_by_value(\"2\")\n# 通过选项文字进行选择\nSelect(driver.find_element_by_id(\"gender\")).select_by_visible_text(\"Male\")\n```\n非select类型:\n* 1、若列表隐藏则先模拟点击输入框\n* 2、然后通过CSS_SELECTOR选择所在的li下的span\n* 3、通过文字判断是哪个li\n```\n#全部文字\nbrowser.find_element_by_xpath(\"//*[text()='IPC']\").click()\n#部分文字\nbrowser.find_element_by_xpath(\"//*[contains(text(),'花呗')]\").click()\n```\n\n\n## 常见问题\n##### 定位页面元素\n有id使用id定位，其次可以一般可以用xpath定位所有元素。\n##### 打开一个新链接(窗口)时，页面资源没有变化。  \n当打开一个新页面时，page_source还是之前页面的，会导致一直定位不到当前页面的元素。\n解决办法：切换到当前页面代码如下：\n```\nhandle = broswer.window_handles;\nbroswer.switch_to.window(handle[-1])#切换到当前窗口\n```\n##### 调整页面等待时间\nbroswer.set_page_load_timeout(7)#加载等待时间  \n超出时间未加载完页面可捕获异常进一步处理\n##### 定位iframe标签里边元素 (html里面嵌html)\n如果直接用元素id或xpath之类定位往往会报元素不可见或者超时，解决办法为：\n将页面资源切换到iframe里面\n```\nbroswer.switch_to.frame(\"contentframe\")\n```\n用完后切回\n```\nbroswer.switch_to.default_content()\n```\n","source":"_posts/2018/2018-03-01-selenium的使用.md","raw":"---\nlayout: posts\ntitle: selenium的使用\ncategories: python学习笔记\ntags:\n    - python\n    - selenium\n---\n## 下载相应浏览器驱动\n放在python的根目录下\n## 初始化\n```\nfrom selenium import webdriver\nfrom selenium.common.exceptions import TimeoutException\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nbrowser = webdriver.Chrome()#驱动谷歌浏览器\nwait = WebDriverWait(browser,10)#等待时间\n```\n需下载谷歌浏览器驱动[chromedriver](http://npm.taobao.org/mirrors/chromedriver/)。注意不同版本浏览器需下载相应的驱动。\n将下载的chromedriver解压后移动到/usr/local/bin\n## 输入文本及点击按钮\n```\ndef search():\n    try:\n        browser.get('https://www.taobao.com/')\n        input = wait.until(\n            EC.presence_of_element_located((By.CSS_SELECTOR,'#q'))\n        )\n        submit = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,'#J_TSearchForm > div.search-button > button')))\n        input.send_keys('美食')#输入文字\n        submit.click()#点击按钮\n        total = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,'#mainsrp-pager > div > div > div > div.total')))\n        get_products()\n        return total.text\n    except TimeoutException:\n        return search()#发生错误再执行一遍\n```\n<!-- more -->\n## 利用pyquery解析网页\n```\nfrom pyquery import PyQuery as pq\ndef get_products():\n    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,'#mainsrp-itemlist .items .item')))\n    html = browser.page_source#获取网页源代码\n    doc = pq(html)\n    items = doc('#mainsrp-itemlist .items .item').items()\n    for item in items:\n        product = {\n            'image':'https:'+item.find('.pic .img').attr('src'),\n            'title':item.find('.title').text()\n        }\n        print(product)\n```\n\n## 模拟手机点击\n```\nTouchActions(browser).tap(return_name).perform()#模拟手机点击tap里为获取元素，broswer：浏览器实例\n```\n## 进行翻页操作\n```\nbrowser.execute_script(\"window.scrollBy(0, 10000)\")\n```\n## 使用jieba统计词频\n```\nseg_list = jieba.lcut(txt)#txt：文本输入，返回list\n```\n## 对字典排序\n```\nresult = sorted(seg_dic.items(),key=lambda e:e[1],reverse=True)[:15]#True降序排列\n```\n## 对下拉列表进行选择\nselect类型：\n```\n# 通过index进行选择\nSelect(driver.find_element_by_id(\"gender\")).select_by_index(1)\n# 通过value进行选择\nSelect(driver.find_element_by_id(\"gender\")).select_by_value(\"2\")\n# 通过选项文字进行选择\nSelect(driver.find_element_by_id(\"gender\")).select_by_visible_text(\"Male\")\n```\n非select类型:\n* 1、若列表隐藏则先模拟点击输入框\n* 2、然后通过CSS_SELECTOR选择所在的li下的span\n* 3、通过文字判断是哪个li\n```\n#全部文字\nbrowser.find_element_by_xpath(\"//*[text()='IPC']\").click()\n#部分文字\nbrowser.find_element_by_xpath(\"//*[contains(text(),'花呗')]\").click()\n```\n\n\n## 常见问题\n##### 定位页面元素\n有id使用id定位，其次可以一般可以用xpath定位所有元素。\n##### 打开一个新链接(窗口)时，页面资源没有变化。  \n当打开一个新页面时，page_source还是之前页面的，会导致一直定位不到当前页面的元素。\n解决办法：切换到当前页面代码如下：\n```\nhandle = broswer.window_handles;\nbroswer.switch_to.window(handle[-1])#切换到当前窗口\n```\n##### 调整页面等待时间\nbroswer.set_page_load_timeout(7)#加载等待时间  \n超出时间未加载完页面可捕获异常进一步处理\n##### 定位iframe标签里边元素 (html里面嵌html)\n如果直接用元素id或xpath之类定位往往会报元素不可见或者超时，解决办法为：\n将页面资源切换到iframe里面\n```\nbroswer.switch_to.frame(\"contentframe\")\n```\n用完后切回\n```\nbroswer.switch_to.default_content()\n```\n","slug":"2018-2018-03-01-selenium的使用","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:05:48.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9j000td3foodtro93c","content":"<h2 id=\"下载相应浏览器驱动\"><a href=\"#下载相应浏览器驱动\" class=\"headerlink\" title=\"下载相应浏览器驱动\"></a>下载相应浏览器驱动</h2><p>放在python的根目录下</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.common.exceptions <span class=\"keyword\">import</span> TimeoutException</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.<span class=\"keyword\">by</span> <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\">browser = webdriver.Chrome()<span class=\"comment\">#驱动谷歌浏览器</span></span><br><span class=\"line\">wait = WebDriverWait(browser,<span class=\"number\">10</span>)<span class=\"comment\">#等待时间</span></span><br></pre></td></tr></table></figure>\n<p>需下载谷歌浏览器驱动<a href=\"http://npm.taobao.org/mirrors/chromedriver/\" target=\"_blank\" rel=\"noopener\">chromedriver</a>。注意不同版本浏览器需下载相应的驱动。<br>将下载的chromedriver解压后移动到/usr/local/bin</p>\n<h2 id=\"输入文本及点击按钮\"><a href=\"#输入文本及点击按钮\" class=\"headerlink\" title=\"输入文本及点击按钮\"></a>输入文本及点击按钮</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def search():</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        browser.<span class=\"built_in\">get</span>(<span class=\"string\">'https://www.taobao.com/'</span>)</span><br><span class=\"line\">        input = <span class=\"built_in\">wait</span>.<span class=\"keyword\">until</span>(</span><br><span class=\"line\">            EC.presence_of_element_located((By.CSS_SELECTOR,<span class=\"string\">'#q'</span>))</span><br><span class=\"line\">        )</span><br><span class=\"line\">        submit = <span class=\"built_in\">wait</span>.<span class=\"keyword\">until</span>(EC.element_to_be_clickable((By.CSS_SELECTOR,<span class=\"string\">'#J_TSearchForm &gt; div.search-button &gt; button'</span>)))</span><br><span class=\"line\">        input.send_keys(<span class=\"string\">'美食'</span>)<span class=\"comment\">#输入文字</span></span><br><span class=\"line\">        submit.click()<span class=\"comment\">#点击按钮</span></span><br><span class=\"line\">        total = <span class=\"built_in\">wait</span>.<span class=\"keyword\">until</span>(EC.presence_of_element_located((By.CSS_SELECTOR,<span class=\"string\">'#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.total'</span>)))</span><br><span class=\"line\">        get_products()</span><br><span class=\"line\">        <span class=\"literal\">return</span> total.<span class=\"keyword\">text</span></span><br><span class=\"line\">    except TimeoutException:</span><br><span class=\"line\">        <span class=\"literal\">return</span> search()<span class=\"comment\">#发生错误再执行一遍</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"利用pyquery解析网页\"><a href=\"#利用pyquery解析网页\" class=\"headerlink\" title=\"利用pyquery解析网页\"></a>利用pyquery解析网页</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pyquery import PyQuery as pq</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_products</span><span class=\"params\">()</span></span><span class=\"symbol\">:</span></span><br><span class=\"line\">    wait.<span class=\"keyword\">until</span>(EC.presence_of_element_located((By.CSS_SELECTOR,<span class=\"string\">'#mainsrp-itemlist .items .item'</span>)))</span><br><span class=\"line\">    html = browser.page_source<span class=\"comment\">#获取网页源代码</span></span><br><span class=\"line\">    doc = pq(html)</span><br><span class=\"line\">    items = doc(<span class=\"string\">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"symbol\">items:</span></span><br><span class=\"line\">        product = &#123;</span><br><span class=\"line\">            <span class=\"string\">'image'</span><span class=\"symbol\">:<span class=\"string\">'https:'</span>+item</span>.find(<span class=\"string\">'.pic .img'</span>).attr(<span class=\"string\">'src'</span>),</span><br><span class=\"line\">            <span class=\"string\">'title'</span><span class=\"symbol\">:item</span>.find(<span class=\"string\">'.title'</span>).text()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(product)</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟手机点击\"><a href=\"#模拟手机点击\" class=\"headerlink\" title=\"模拟手机点击\"></a>模拟手机点击</h2><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TouchActions<span class=\"params\">(browser)</span><span class=\"string\">.tap</span><span class=\"params\">(return_name)</span><span class=\"string\">.perform</span><span class=\"params\">()</span><span class=\"comment\">#模拟手机点击tap里为获取元素，broswer：浏览器实例</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"进行翻页操作\"><a href=\"#进行翻页操作\" class=\"headerlink\" title=\"进行翻页操作\"></a>进行翻页操作</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">browser</span><span class=\"selector-class\">.execute_script</span>(\"<span class=\"selector-tag\">window</span><span class=\"selector-class\">.scrollBy</span>(0, 10000)\")</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用jieba统计词频\"><a href=\"#使用jieba统计词频\" class=\"headerlink\" title=\"使用jieba统计词频\"></a>使用jieba统计词频</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seg_list = jieba.lcut(txt)<span class=\"comment\">#txt：文本输入，返回list</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对字典排序\"><a href=\"#对字典排序\" class=\"headerlink\" title=\"对字典排序\"></a>对字典排序</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = sorted(seg_dic.items(),<span class=\"attribute\">key</span>=lambda e:e[1],<span class=\"attribute\">reverse</span>=<span class=\"literal\">True</span>)[:15]#<span class=\"literal\">True</span>降序排列</span><br></pre></td></tr></table></figure>\n<h2 id=\"对下拉列表进行选择\"><a href=\"#对下拉列表进行选择\" class=\"headerlink\" title=\"对下拉列表进行选择\"></a>对下拉列表进行选择</h2><p>select类型：<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 通过index进行选择</span></span><br><span class=\"line\"><span class=\"keyword\">Select</span>(driver.find_element_by_id(<span class=\"string\">\"gender\"</span>)).select_by_index(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\"># 通过value进行选择</span></span><br><span class=\"line\"><span class=\"keyword\">Select</span>(driver.find_element_by_id(<span class=\"string\">\"gender\"</span>)).select_by_value(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"><span class=\"meta\"># 通过选项文字进行选择</span></span><br><span class=\"line\"><span class=\"keyword\">Select</span>(driver.find_element_by_id(<span class=\"string\">\"gender\"</span>)).select_by_visible_text(<span class=\"string\">\"Male\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>非select类型:</p>\n<ul>\n<li>1、若列表隐藏则先模拟点击输入框</li>\n<li>2、然后通过CSS_SELECTOR选择所在的li下的span</li>\n<li>3、通过文字判断是哪个li<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#全部文字</span><br><span class=\"line\"><span class=\"selector-tag\">browser</span><span class=\"selector-class\">.find_element_by_xpath</span>(<span class=\"string\">\"//*[text()='IPC']\"</span>)<span class=\"selector-class\">.click</span>()</span><br><span class=\"line\">#部分文字</span><br><span class=\"line\"><span class=\"selector-tag\">browser</span><span class=\"selector-class\">.find_element_by_xpath</span>(<span class=\"string\">\"//*[contains(text(),'花呗')]\"</span>)<span class=\"selector-class\">.click</span>()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h5 id=\"定位页面元素\"><a href=\"#定位页面元素\" class=\"headerlink\" title=\"定位页面元素\"></a>定位页面元素</h5><p>有id使用id定位，其次可以一般可以用xpath定位所有元素。</p>\n<h5 id=\"打开一个新链接-窗口-时，页面资源没有变化。\"><a href=\"#打开一个新链接-窗口-时，页面资源没有变化。\" class=\"headerlink\" title=\"打开一个新链接(窗口)时，页面资源没有变化。\"></a>打开一个新链接(窗口)时，页面资源没有变化。</h5><p>当打开一个新页面时，page_source还是之前页面的，会导致一直定位不到当前页面的元素。<br>解决办法：切换到当前页面代码如下：<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handle = broswer.window_handles;</span><br><span class=\"line\">broswer.switch_to.window(handle[-1])<span class=\"comment\">#切换到当前窗口</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"调整页面等待时间\"><a href=\"#调整页面等待时间\" class=\"headerlink\" title=\"调整页面等待时间\"></a>调整页面等待时间</h5><p>broswer.set_page_load_timeout(7)#加载等待时间<br>超出时间未加载完页面可捕获异常进一步处理</p>\n<h5 id=\"定位iframe标签里边元素-html里面嵌html\"><a href=\"#定位iframe标签里边元素-html里面嵌html\" class=\"headerlink\" title=\"定位iframe标签里边元素 (html里面嵌html)\"></a>定位iframe标签里边元素 (html里面嵌html)</h5><p>如果直接用元素id或xpath之类定位往往会报元素不可见或者超时，解决办法为：<br>将页面资源切换到iframe里面<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">broswer<span class=\"selector-class\">.switch_to</span><span class=\"selector-class\">.frame</span>(<span class=\"string\">\"contentframe\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>用完后切回<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">broswer<span class=\"selector-class\">.switch_to</span><span class=\"selector-class\">.default_content</span>()</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"下载相应浏览器驱动\"><a href=\"#下载相应浏览器驱动\" class=\"headerlink\" title=\"下载相应浏览器驱动\"></a>下载相应浏览器驱动</h2><p>放在python的根目录下</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.common.exceptions <span class=\"keyword\">import</span> TimeoutException</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.<span class=\"keyword\">by</span> <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\">browser = webdriver.Chrome()<span class=\"comment\">#驱动谷歌浏览器</span></span><br><span class=\"line\">wait = WebDriverWait(browser,<span class=\"number\">10</span>)<span class=\"comment\">#等待时间</span></span><br></pre></td></tr></table></figure>\n<p>需下载谷歌浏览器驱动<a href=\"http://npm.taobao.org/mirrors/chromedriver/\" target=\"_blank\" rel=\"noopener\">chromedriver</a>。注意不同版本浏览器需下载相应的驱动。<br>将下载的chromedriver解压后移动到/usr/local/bin</p>\n<h2 id=\"输入文本及点击按钮\"><a href=\"#输入文本及点击按钮\" class=\"headerlink\" title=\"输入文本及点击按钮\"></a>输入文本及点击按钮</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def search():</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        browser.<span class=\"built_in\">get</span>(<span class=\"string\">'https://www.taobao.com/'</span>)</span><br><span class=\"line\">        input = <span class=\"built_in\">wait</span>.<span class=\"keyword\">until</span>(</span><br><span class=\"line\">            EC.presence_of_element_located((By.CSS_SELECTOR,<span class=\"string\">'#q'</span>))</span><br><span class=\"line\">        )</span><br><span class=\"line\">        submit = <span class=\"built_in\">wait</span>.<span class=\"keyword\">until</span>(EC.element_to_be_clickable((By.CSS_SELECTOR,<span class=\"string\">'#J_TSearchForm &gt; div.search-button &gt; button'</span>)))</span><br><span class=\"line\">        input.send_keys(<span class=\"string\">'美食'</span>)<span class=\"comment\">#输入文字</span></span><br><span class=\"line\">        submit.click()<span class=\"comment\">#点击按钮</span></span><br><span class=\"line\">        total = <span class=\"built_in\">wait</span>.<span class=\"keyword\">until</span>(EC.presence_of_element_located((By.CSS_SELECTOR,<span class=\"string\">'#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.total'</span>)))</span><br><span class=\"line\">        get_products()</span><br><span class=\"line\">        <span class=\"literal\">return</span> total.<span class=\"keyword\">text</span></span><br><span class=\"line\">    except TimeoutException:</span><br><span class=\"line\">        <span class=\"literal\">return</span> search()<span class=\"comment\">#发生错误再执行一遍</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"利用pyquery解析网页\"><a href=\"#利用pyquery解析网页\" class=\"headerlink\" title=\"利用pyquery解析网页\"></a>利用pyquery解析网页</h2><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pyquery import PyQuery as pq</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_products</span><span class=\"params\">()</span></span><span class=\"symbol\">:</span></span><br><span class=\"line\">    wait.<span class=\"keyword\">until</span>(EC.presence_of_element_located((By.CSS_SELECTOR,<span class=\"string\">'#mainsrp-itemlist .items .item'</span>)))</span><br><span class=\"line\">    html = browser.page_source<span class=\"comment\">#获取网页源代码</span></span><br><span class=\"line\">    doc = pq(html)</span><br><span class=\"line\">    items = doc(<span class=\"string\">'#mainsrp-itemlist .items .item'</span>).items()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"symbol\">items:</span></span><br><span class=\"line\">        product = &#123;</span><br><span class=\"line\">            <span class=\"string\">'image'</span><span class=\"symbol\">:<span class=\"string\">'https:'</span>+item</span>.find(<span class=\"string\">'.pic .img'</span>).attr(<span class=\"string\">'src'</span>),</span><br><span class=\"line\">            <span class=\"string\">'title'</span><span class=\"symbol\">:item</span>.find(<span class=\"string\">'.title'</span>).text()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print(product)</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟手机点击\"><a href=\"#模拟手机点击\" class=\"headerlink\" title=\"模拟手机点击\"></a>模拟手机点击</h2><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TouchActions<span class=\"params\">(browser)</span><span class=\"string\">.tap</span><span class=\"params\">(return_name)</span><span class=\"string\">.perform</span><span class=\"params\">()</span><span class=\"comment\">#模拟手机点击tap里为获取元素，broswer：浏览器实例</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"进行翻页操作\"><a href=\"#进行翻页操作\" class=\"headerlink\" title=\"进行翻页操作\"></a>进行翻页操作</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">browser</span><span class=\"selector-class\">.execute_script</span>(\"<span class=\"selector-tag\">window</span><span class=\"selector-class\">.scrollBy</span>(0, 10000)\")</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用jieba统计词频\"><a href=\"#使用jieba统计词频\" class=\"headerlink\" title=\"使用jieba统计词频\"></a>使用jieba统计词频</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seg_list = jieba.lcut(txt)<span class=\"comment\">#txt：文本输入，返回list</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对字典排序\"><a href=\"#对字典排序\" class=\"headerlink\" title=\"对字典排序\"></a>对字典排序</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = sorted(seg_dic.items(),<span class=\"attribute\">key</span>=lambda e:e[1],<span class=\"attribute\">reverse</span>=<span class=\"literal\">True</span>)[:15]#<span class=\"literal\">True</span>降序排列</span><br></pre></td></tr></table></figure>\n<h2 id=\"对下拉列表进行选择\"><a href=\"#对下拉列表进行选择\" class=\"headerlink\" title=\"对下拉列表进行选择\"></a>对下拉列表进行选择</h2><p>select类型：<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 通过index进行选择</span></span><br><span class=\"line\"><span class=\"keyword\">Select</span>(driver.find_element_by_id(<span class=\"string\">\"gender\"</span>)).select_by_index(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\"># 通过value进行选择</span></span><br><span class=\"line\"><span class=\"keyword\">Select</span>(driver.find_element_by_id(<span class=\"string\">\"gender\"</span>)).select_by_value(<span class=\"string\">\"2\"</span>)</span><br><span class=\"line\"><span class=\"meta\"># 通过选项文字进行选择</span></span><br><span class=\"line\"><span class=\"keyword\">Select</span>(driver.find_element_by_id(<span class=\"string\">\"gender\"</span>)).select_by_visible_text(<span class=\"string\">\"Male\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>非select类型:</p>\n<ul>\n<li>1、若列表隐藏则先模拟点击输入框</li>\n<li>2、然后通过CSS_SELECTOR选择所在的li下的span</li>\n<li>3、通过文字判断是哪个li<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#全部文字</span><br><span class=\"line\"><span class=\"selector-tag\">browser</span><span class=\"selector-class\">.find_element_by_xpath</span>(<span class=\"string\">\"//*[text()='IPC']\"</span>)<span class=\"selector-class\">.click</span>()</span><br><span class=\"line\">#部分文字</span><br><span class=\"line\"><span class=\"selector-tag\">browser</span><span class=\"selector-class\">.find_element_by_xpath</span>(<span class=\"string\">\"//*[contains(text(),'花呗')]\"</span>)<span class=\"selector-class\">.click</span>()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h5 id=\"定位页面元素\"><a href=\"#定位页面元素\" class=\"headerlink\" title=\"定位页面元素\"></a>定位页面元素</h5><p>有id使用id定位，其次可以一般可以用xpath定位所有元素。</p>\n<h5 id=\"打开一个新链接-窗口-时，页面资源没有变化。\"><a href=\"#打开一个新链接-窗口-时，页面资源没有变化。\" class=\"headerlink\" title=\"打开一个新链接(窗口)时，页面资源没有变化。\"></a>打开一个新链接(窗口)时，页面资源没有变化。</h5><p>当打开一个新页面时，page_source还是之前页面的，会导致一直定位不到当前页面的元素。<br>解决办法：切换到当前页面代码如下：<br><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handle = broswer.window_handles;</span><br><span class=\"line\">broswer.switch_to.window(handle[-1])<span class=\"comment\">#切换到当前窗口</span></span><br></pre></td></tr></table></figure></p>\n<h5 id=\"调整页面等待时间\"><a href=\"#调整页面等待时间\" class=\"headerlink\" title=\"调整页面等待时间\"></a>调整页面等待时间</h5><p>broswer.set_page_load_timeout(7)#加载等待时间<br>超出时间未加载完页面可捕获异常进一步处理</p>\n<h5 id=\"定位iframe标签里边元素-html里面嵌html\"><a href=\"#定位iframe标签里边元素-html里面嵌html\" class=\"headerlink\" title=\"定位iframe标签里边元素 (html里面嵌html)\"></a>定位iframe标签里边元素 (html里面嵌html)</h5><p>如果直接用元素id或xpath之类定位往往会报元素不可见或者超时，解决办法为：<br>将页面资源切换到iframe里面<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">broswer<span class=\"selector-class\">.switch_to</span><span class=\"selector-class\">.frame</span>(<span class=\"string\">\"contentframe\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>用完后切回<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">broswer<span class=\"selector-class\">.switch_to</span><span class=\"selector-class\">.default_content</span>()</span><br></pre></td></tr></table></figure></p>"},{"layout":"posts","title":"Linux下MONGODB的安装及使用","_content":"## 安装\n1. 访问[官网](https://robomongo.org/download)下载相应的压缩包。\n2. 解压缩：\n```\ntar -xvzf robo3t-1.2.1-linux-x86_64-3e50a65.tar.gz\n```\n3. 执行以下代码\n```\nsudo gedit ~/.bashrc\n```\n将以下代码添加到末尾\n```\nalias robomongo=\"/usr/local/bin/robomongo/bin/robo3t\"\n```\n再运行以下代码\n```\nsource ~/.bashrc\n```\n以后就可以打开终端，输入robomongo就可以启动robo 3T了。\n<!-- more -->\n## 使用\n1. 定义config.py文件输入以下内容：\n```\nMONGO_URL = 'localhost'\nMONGO_DB = 'taobao'\nMONGO_TABLE = 'product'\n```\n2. 在需要使用的页面\n```\nfrom config import *\nimport pymongo\nclient = pymongo.MongoClient(MONGO_URL)\ndb = client[MONGO_DB]\n#定义插入方法\ndef save_to_mango(result):\n    try:\n        if db[MONGO_TABLE].insert(result):\n            print('存储到MONGODB成功')\n    except Exception:\n        print('存储到MONGO失败')\n```\n","source":"_posts/2018/2018-03-01-MONGODB的安装与使用.md","raw":"---\nlayout: posts\ntitle: Linux下MONGODB的安装及使用\ncategories: Linux系统相关\ntags: \n    - Linux\n    - MONGODB\n---\n## 安装\n1. 访问[官网](https://robomongo.org/download)下载相应的压缩包。\n2. 解压缩：\n```\ntar -xvzf robo3t-1.2.1-linux-x86_64-3e50a65.tar.gz\n```\n3. 执行以下代码\n```\nsudo gedit ~/.bashrc\n```\n将以下代码添加到末尾\n```\nalias robomongo=\"/usr/local/bin/robomongo/bin/robo3t\"\n```\n再运行以下代码\n```\nsource ~/.bashrc\n```\n以后就可以打开终端，输入robomongo就可以启动robo 3T了。\n<!-- more -->\n## 使用\n1. 定义config.py文件输入以下内容：\n```\nMONGO_URL = 'localhost'\nMONGO_DB = 'taobao'\nMONGO_TABLE = 'product'\n```\n2. 在需要使用的页面\n```\nfrom config import *\nimport pymongo\nclient = pymongo.MongoClient(MONGO_URL)\ndb = client[MONGO_DB]\n#定义插入方法\ndef save_to_mango(result):\n    try:\n        if db[MONGO_TABLE].insert(result):\n            print('存储到MONGODB成功')\n    except Exception:\n        print('存储到MONGO失败')\n```\n","slug":"2018-2018-03-01-MONGODB的安装与使用","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:06:14.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9l000wd3fovli4chvh","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>访问<a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">官网</a>下载相应的压缩包。</li>\n<li><p>解压缩：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">-xvzf</span> <span class=\"selector-tag\">robo3t-1</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.1-linux-x86_64-3e50a65</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行以下代码</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit ~<span class=\"string\">/.bashrc</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将以下代码添加到末尾<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">robomongo</span>=<span class=\"string\">\"/usr/local/bin/robomongo/bin/robo3t\"</span></span><br></pre></td></tr></table></figure></p>\n<p>再运行以下代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>以后就可以打开终端，输入robomongo就可以启动robo 3T了。<br><a id=\"more\"></a></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li><p>定义config.py文件输入以下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">MONGO_URL</span> = <span class=\"string\">'localhost'</span></span><br><span class=\"line\"><span class=\"attr\">MONGO_DB</span> = <span class=\"string\">'taobao'</span></span><br><span class=\"line\"><span class=\"attr\">MONGO_TABLE</span> = <span class=\"string\">'product'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在需要使用的页面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> config <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymongo</span><br><span class=\"line\">client = pymongo.MongoClient(MONGO_URL)</span><br><span class=\"line\">db = client[MONGO_DB]</span><br><span class=\"line\"><span class=\"comment\">#定义插入方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_to_mango</span><span class=\"params\">(result)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> db[MONGO_TABLE].insert(result):</span><br><span class=\"line\">            print(<span class=\"string\">'存储到MONGODB成功'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        print(<span class=\"string\">'存储到MONGO失败'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li>访问<a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">官网</a>下载相应的压缩包。</li>\n<li><p>解压缩：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">-xvzf</span> <span class=\"selector-tag\">robo3t-1</span><span class=\"selector-class\">.2</span><span class=\"selector-class\">.1-linux-x86_64-3e50a65</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行以下代码</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit ~<span class=\"string\">/.bashrc</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将以下代码添加到末尾<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">robomongo</span>=<span class=\"string\">\"/usr/local/bin/robomongo/bin/robo3t\"</span></span><br></pre></td></tr></table></figure></p>\n<p>再运行以下代码<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>以后就可以打开终端，输入robomongo就可以启动robo 3T了。<br>","more":"</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li><p>定义config.py文件输入以下内容：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">MONGO_URL</span> = <span class=\"string\">'localhost'</span></span><br><span class=\"line\"><span class=\"attr\">MONGO_DB</span> = <span class=\"string\">'taobao'</span></span><br><span class=\"line\"><span class=\"attr\">MONGO_TABLE</span> = <span class=\"string\">'product'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在需要使用的页面</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> config <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymongo</span><br><span class=\"line\">client = pymongo.MongoClient(MONGO_URL)</span><br><span class=\"line\">db = client[MONGO_DB]</span><br><span class=\"line\"><span class=\"comment\">#定义插入方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_to_mango</span><span class=\"params\">(result)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> db[MONGO_TABLE].insert(result):</span><br><span class=\"line\">            print(<span class=\"string\">'存储到MONGODB成功'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">        print(<span class=\"string\">'存储到MONGO失败'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"layout":"posts","title":"统计QQ好友说说词频","_content":"## 整体思路\n1. 1.使用selenium及chrome浏览器自动登录QQ空间。\n2. 2.获取网页源码。\n3. 3.使用BeautifulSoup解析获取相关数据。\n4. 4.使用jieba统计词频。\n5. 5.使用matplotlib 画出柱状图。\n\n### 项目GitHub地址\n[https://github.com/fishrong/QQzone_spider](https://github.com/fishrong/QQzone_spider)","source":"_posts/2018/2018-03-27-统计好友QQ动态词频.md","raw":"---\nlayout: posts\ntitle: 统计QQ好友说说词频\ncategories: 爬坑小项目\ntags:\n    - python\n    - 词频\n---\n## 整体思路\n1. 1.使用selenium及chrome浏览器自动登录QQ空间。\n2. 2.获取网页源码。\n3. 3.使用BeautifulSoup解析获取相关数据。\n4. 4.使用jieba统计词频。\n5. 5.使用matplotlib 画出柱状图。\n\n### 项目GitHub地址\n[https://github.com/fishrong/QQzone_spider](https://github.com/fishrong/QQzone_spider)","slug":"2018-2018-03-27-统计好友QQ动态词频","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:04:56.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9m000zd3fosplv30ag","content":"<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><ol>\n<li>1.使用selenium及chrome浏览器自动登录QQ空间。</li>\n<li>2.获取网页源码。</li>\n<li>3.使用BeautifulSoup解析获取相关数据。</li>\n<li>4.使用jieba统计词频。</li>\n<li>5.使用matplotlib 画出柱状图。</li>\n</ol>\n<h3 id=\"项目GitHub地址\"><a href=\"#项目GitHub地址\" class=\"headerlink\" title=\"项目GitHub地址\"></a>项目GitHub地址</h3><p><a href=\"https://github.com/fishrong/QQzone_spider\" target=\"_blank\" rel=\"noopener\">https://github.com/fishrong/QQzone_spider</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><ol>\n<li>1.使用selenium及chrome浏览器自动登录QQ空间。</li>\n<li>2.获取网页源码。</li>\n<li>3.使用BeautifulSoup解析获取相关数据。</li>\n<li>4.使用jieba统计词频。</li>\n<li>5.使用matplotlib 画出柱状图。</li>\n</ol>\n<h3 id=\"项目GitHub地址\"><a href=\"#项目GitHub地址\" class=\"headerlink\" title=\"项目GitHub地址\"></a>项目GitHub地址</h3><p><a href=\"https://github.com/fishrong/QQzone_spider\" target=\"_blank\" rel=\"noopener\">https://github.com/fishrong/QQzone_spider</a></p>\n"},{"layout":"posts","title":"Java连接MySQL常见问题","_content":"使用数据库版本8.0.11 JDBC版本8.0.11\n### 1.首先查看mysql服务是否正常启动。\n### 2.报错如下：\n```java.sql.SQLException: The server time zone value ‘XXXXXX’ is unrecognized or represents more than one time zone.\n```\n\n#### 解决办法：\n##### 方法1： mysql命令行下执行 \n```\nset global time_zone='+8:00'\n```\n\n##### 方法2：建立连接时带上参数\"serverTimezone=UTC\"\n\n### 3.默认useSSL为开启，需显示关闭useSSL=false,否则报错\n\n","source":"_posts/2018/2018-06-08-Java连接Mysql.md","raw":"---\nlayout: posts\ntitle: Java连接MySQL常见问题\ncategories: Java学习笔记\ntags: \n    - MySQL\n    - Java\n---\n使用数据库版本8.0.11 JDBC版本8.0.11\n### 1.首先查看mysql服务是否正常启动。\n### 2.报错如下：\n```java.sql.SQLException: The server time zone value ‘XXXXXX’ is unrecognized or represents more than one time zone.\n```\n\n#### 解决办法：\n##### 方法1： mysql命令行下执行 \n```\nset global time_zone='+8:00'\n```\n\n##### 方法2：建立连接时带上参数\"serverTimezone=UTC\"\n\n### 3.默认useSSL为开启，需显示关闭useSSL=false,否则报错\n\n","slug":"2018-2018-06-08-Java连接Mysql","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T02:16:10.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9o0012d3foyn1hkl4s","content":"<p>使用数据库版本8.0.11 JDBC版本8.0.11</p>\n<h3 id=\"1-首先查看mysql服务是否正常启动。\"><a href=\"#1-首先查看mysql服务是否正常启动。\" class=\"headerlink\" title=\"1.首先查看mysql服务是否正常启动。\"></a>1.首先查看mysql服务是否正常启动。</h3><h3 id=\"2-报错如下：\"><a href=\"#2-报错如下：\" class=\"headerlink\" title=\"2.报错如下：\"></a>2.报错如下：</h3><figure class=\"highlight plain\"><figcaption><span>The server time zone value ‘XXXXXX’ is unrecognized or represents more than one time zone.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">#### 解决办法：</span><br><span class=\"line\">##### 方法1： mysql命令行下执行</span><br></pre></td></tr></table></figure>\n<p>set global time_zone=’+8:00’<br><code>`</code></p>\n<h5 id=\"方法2：建立连接时带上参数”serverTimezone-UTC”\"><a href=\"#方法2：建立连接时带上参数”serverTimezone-UTC”\" class=\"headerlink\" title=\"方法2：建立连接时带上参数”serverTimezone=UTC”\"></a>方法2：建立连接时带上参数”serverTimezone=UTC”</h5><h3 id=\"3-默认useSSL为开启，需显示关闭useSSL-false-否则报错\"><a href=\"#3-默认useSSL为开启，需显示关闭useSSL-false-否则报错\" class=\"headerlink\" title=\"3.默认useSSL为开启，需显示关闭useSSL=false,否则报错\"></a>3.默认useSSL为开启，需显示关闭useSSL=false,否则报错</h3>","site":{"data":{}},"excerpt":"","more":"<p>使用数据库版本8.0.11 JDBC版本8.0.11</p>\n<h3 id=\"1-首先查看mysql服务是否正常启动。\"><a href=\"#1-首先查看mysql服务是否正常启动。\" class=\"headerlink\" title=\"1.首先查看mysql服务是否正常启动。\"></a>1.首先查看mysql服务是否正常启动。</h3><h3 id=\"2-报错如下：\"><a href=\"#2-报错如下：\" class=\"headerlink\" title=\"2.报错如下：\"></a>2.报错如下：</h3><figure class=\"highlight plain\"><figcaption><span>The server time zone value ‘XXXXXX’ is unrecognized or represents more than one time zone.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">#### 解决办法：</span><br><span class=\"line\">##### 方法1： mysql命令行下执行</span><br></pre></td></tr></table></figure>\n<p>set global time_zone=’+8:00’<br><code>`</code></p>\n<h5 id=\"方法2：建立连接时带上参数”serverTimezone-UTC”\"><a href=\"#方法2：建立连接时带上参数”serverTimezone-UTC”\" class=\"headerlink\" title=\"方法2：建立连接时带上参数”serverTimezone=UTC”\"></a>方法2：建立连接时带上参数”serverTimezone=UTC”</h5><h3 id=\"3-默认useSSL为开启，需显示关闭useSSL-false-否则报错\"><a href=\"#3-默认useSSL为开启，需显示关闭useSSL-false-否则报错\" class=\"headerlink\" title=\"3.默认useSSL为开启，需显示关闭useSSL=false,否则报错\"></a>3.默认useSSL为开启，需显示关闭useSSL=false,否则报错</h3>"},{"layout":"posts","title":"Java实现图片转字符画","_content":"### 一、实现思路： \n1. 1.获取彩色图片的RGB分量；\n2. 2.根据公式`Gray = R*0.299 + G*0.587 + B*0.114`,获取图像灰度值（范围在0~255） \n3. 3.不同灰度值用复杂度不同的字符输出即可\n\n### 二、项目地址\n[https://github.com/fishrong/Pic2Char.git](https://github.com/fishrong/Pic2Char.git) \n\n### 三、项目相关说明 \n1. 1.生成了window可执行文件，可脱离Java开发环境运行 \n2. 2.命令行中直接输入桌面下的图片名称即可进行转换 \n3. 3.转换后在桌面生成与图片同名的txt文件，并自动打开 \n4. 4.可多次转换\n5. 5.设置最小字号才能看到效果\n","source":"_posts/2018/2018-06-10-Java字符画转换.md","raw":"---\nlayout: posts\ntitle: Java实现图片转字符画\ncategories: 爬坑小项目\ntags:\n    - Java\n    - 字符画\n---\n### 一、实现思路： \n1. 1.获取彩色图片的RGB分量；\n2. 2.根据公式`Gray = R*0.299 + G*0.587 + B*0.114`,获取图像灰度值（范围在0~255） \n3. 3.不同灰度值用复杂度不同的字符输出即可\n\n### 二、项目地址\n[https://github.com/fishrong/Pic2Char.git](https://github.com/fishrong/Pic2Char.git) \n\n### 三、项目相关说明 \n1. 1.生成了window可执行文件，可脱离Java开发环境运行 \n2. 2.命令行中直接输入桌面下的图片名称即可进行转换 \n3. 3.转换后在桌面生成与图片同名的txt文件，并自动打开 \n4. 4.可多次转换\n5. 5.设置最小字号才能看到效果\n","slug":"2018-2018-06-10-Java字符画转换","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:05:06.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9p0015d3fo8yozk9ia","content":"<h3 id=\"一、实现思路：\"><a href=\"#一、实现思路：\" class=\"headerlink\" title=\"一、实现思路：\"></a>一、实现思路：</h3><ol>\n<li>1.获取彩色图片的RGB分量；</li>\n<li>2.根据公式<code>Gray = R*0.299 + G*0.587 + B*0.114</code>,获取图像灰度值（范围在0~255） </li>\n<li>3.不同灰度值用复杂度不同的字符输出即可</li>\n</ol>\n<h3 id=\"二、项目地址\"><a href=\"#二、项目地址\" class=\"headerlink\" title=\"二、项目地址\"></a>二、项目地址</h3><p><a href=\"https://github.com/fishrong/Pic2Char.git\" target=\"_blank\" rel=\"noopener\">https://github.com/fishrong/Pic2Char.git</a> </p>\n<h3 id=\"三、项目相关说明\"><a href=\"#三、项目相关说明\" class=\"headerlink\" title=\"三、项目相关说明\"></a>三、项目相关说明</h3><ol>\n<li>1.生成了window可执行文件，可脱离Java开发环境运行 </li>\n<li>2.命令行中直接输入桌面下的图片名称即可进行转换 </li>\n<li>3.转换后在桌面生成与图片同名的txt文件，并自动打开 </li>\n<li>4.可多次转换</li>\n<li>5.设置最小字号才能看到效果</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、实现思路：\"><a href=\"#一、实现思路：\" class=\"headerlink\" title=\"一、实现思路：\"></a>一、实现思路：</h3><ol>\n<li>1.获取彩色图片的RGB分量；</li>\n<li>2.根据公式<code>Gray = R*0.299 + G*0.587 + B*0.114</code>,获取图像灰度值（范围在0~255） </li>\n<li>3.不同灰度值用复杂度不同的字符输出即可</li>\n</ol>\n<h3 id=\"二、项目地址\"><a href=\"#二、项目地址\" class=\"headerlink\" title=\"二、项目地址\"></a>二、项目地址</h3><p><a href=\"https://github.com/fishrong/Pic2Char.git\" target=\"_blank\" rel=\"noopener\">https://github.com/fishrong/Pic2Char.git</a> </p>\n<h3 id=\"三、项目相关说明\"><a href=\"#三、项目相关说明\" class=\"headerlink\" title=\"三、项目相关说明\"></a>三、项目相关说明</h3><ol>\n<li>1.生成了window可执行文件，可脱离Java开发环境运行 </li>\n<li>2.命令行中直接输入桌面下的图片名称即可进行转换 </li>\n<li>3.转换后在桌面生成与图片同名的txt文件，并自动打开 </li>\n<li>4.可多次转换</li>\n<li>5.设置最小字号才能看到效果</li>\n</ol>\n"},{"layout":"posts","title":"使用SSH连接Linux服务器","_content":"## 使用SSH连接Linux服务器有两种方式：  \n### 一、账号口令登录：\n```\n$ ssh root@host_ip\n```\n1. 即以root身份登录远程服务器，回车后需输入密码。\n2. 这种方式相对不是很安全。\n\n### 二、密钥登录(更安全的方式)\n#### 1.首先在本地生成密钥对\n```\nssh-keygen\n```\n#### 2.将公钥(id_rsa.pub)内容放到服务器的.ssh目录下的authorized_keys文件中(在客户端操作)\n```\nssh-copy-id root@host_ip\n```\n<!-- more -->\n这条命令会直接将本地公钥复制到服务器的.ssh/authorized_keys中。\n或者\n```\n$ ssh root@host_ip 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n或者\n使用scp命令将文件拷贝到服务器再重命名为authorized_keys\n```\nscp id_rsa.pub pi@192.168.43.253:~/.ssh\n```\n\n#### 3.设置完之后就不用输入密码登录了\n```\n$ ssh root@host_ip\n```\n## 参考博客\n[SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n","source":"_posts/2018/2018-06-18-SSH登录服务器.md","raw":"---\nlayout: posts\ntitle: 使用SSH连接Linux服务器\ncategories: Linux系统相关\ntags:\n    - SSH\n    - Linux\n---\n## 使用SSH连接Linux服务器有两种方式：  \n### 一、账号口令登录：\n```\n$ ssh root@host_ip\n```\n1. 即以root身份登录远程服务器，回车后需输入密码。\n2. 这种方式相对不是很安全。\n\n### 二、密钥登录(更安全的方式)\n#### 1.首先在本地生成密钥对\n```\nssh-keygen\n```\n#### 2.将公钥(id_rsa.pub)内容放到服务器的.ssh目录下的authorized_keys文件中(在客户端操作)\n```\nssh-copy-id root@host_ip\n```\n<!-- more -->\n这条命令会直接将本地公钥复制到服务器的.ssh/authorized_keys中。\n或者\n```\n$ ssh root@host_ip 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n```\n或者\n使用scp命令将文件拷贝到服务器再重命名为authorized_keys\n```\nscp id_rsa.pub pi@192.168.43.253:~/.ssh\n```\n\n#### 3.设置完之后就不用输入密码登录了\n```\n$ ssh root@host_ip\n```\n## 参考博客\n[SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n","slug":"2018-2018-06-18-SSH登录服务器","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:03:02.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9r0018d3foi2t1tij2","content":"<h2 id=\"使用SSH连接Linux服务器有两种方式：\"><a href=\"#使用SSH连接Linux服务器有两种方式：\" class=\"headerlink\" title=\"使用SSH连接Linux服务器有两种方式：\"></a>使用SSH连接Linux服务器有两种方式：</h2><h3 id=\"一、账号口令登录：\"><a href=\"#一、账号口令登录：\" class=\"headerlink\" title=\"一、账号口令登录：\"></a>一、账号口令登录：</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh root<span class=\"variable\">@host_ip</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>即以root身份登录远程服务器，回车后需输入密码。</li>\n<li>这种方式相对不是很安全。</li>\n</ol>\n<h3 id=\"二、密钥登录-更安全的方式\"><a href=\"#二、密钥登录-更安全的方式\" class=\"headerlink\" title=\"二、密钥登录(更安全的方式)\"></a>二、密钥登录(更安全的方式)</h3><h4 id=\"1-首先在本地生成密钥对\"><a href=\"#1-首先在本地生成密钥对\" class=\"headerlink\" title=\"1.首先在本地生成密钥对\"></a>1.首先在本地生成密钥对</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ssh-keygen</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-将公钥-id-rsa-pub-内容放到服务器的-ssh目录下的authorized-keys文件中-在客户端操作\"><a href=\"#2-将公钥-id-rsa-pub-内容放到服务器的-ssh目录下的authorized-keys文件中-在客户端操作\" class=\"headerlink\" title=\"2.将公钥(id_rsa.pub)内容放到服务器的.ssh目录下的authorized_keys文件中(在客户端操作)\"></a>2.将公钥(id_rsa.pub)内容放到服务器的.ssh目录下的authorized_keys文件中(在客户端操作)</h4><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-<span class=\"keyword\">copy</span>-<span class=\"built_in\">id</span> root@host_ip</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>这条命令会直接将本地公钥复制到服务器的.ssh/authorized_keys中。<br>或者<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh root<span class=\"variable\">@host_ip</span> <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~<span class=\"regexp\">/.ssh/id</span>_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>或者<br>使用scp命令将文件拷贝到服务器再重命名为authorized_keys<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp id_rsa.pub pi<span class=\"variable\">@192</span>.<span class=\"number\">168.43</span>.<span class=\"number\">253</span><span class=\"symbol\">:~/</span>.ssh</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-设置完之后就不用输入密码登录了\"><a href=\"#3-设置完之后就不用输入密码登录了\" class=\"headerlink\" title=\"3.设置完之后就不用输入密码登录了\"></a>3.设置完之后就不用输入密码登录了</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh root<span class=\"variable\">@host_ip</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"noopener\">SSH原理与运用（一）：远程登录</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用SSH连接Linux服务器有两种方式：\"><a href=\"#使用SSH连接Linux服务器有两种方式：\" class=\"headerlink\" title=\"使用SSH连接Linux服务器有两种方式：\"></a>使用SSH连接Linux服务器有两种方式：</h2><h3 id=\"一、账号口令登录：\"><a href=\"#一、账号口令登录：\" class=\"headerlink\" title=\"一、账号口令登录：\"></a>一、账号口令登录：</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh root<span class=\"variable\">@host_ip</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>即以root身份登录远程服务器，回车后需输入密码。</li>\n<li>这种方式相对不是很安全。</li>\n</ol>\n<h3 id=\"二、密钥登录-更安全的方式\"><a href=\"#二、密钥登录-更安全的方式\" class=\"headerlink\" title=\"二、密钥登录(更安全的方式)\"></a>二、密钥登录(更安全的方式)</h3><h4 id=\"1-首先在本地生成密钥对\"><a href=\"#1-首先在本地生成密钥对\" class=\"headerlink\" title=\"1.首先在本地生成密钥对\"></a>1.首先在本地生成密钥对</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ssh-keygen</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-将公钥-id-rsa-pub-内容放到服务器的-ssh目录下的authorized-keys文件中-在客户端操作\"><a href=\"#2-将公钥-id-rsa-pub-内容放到服务器的-ssh目录下的authorized-keys文件中-在客户端操作\" class=\"headerlink\" title=\"2.将公钥(id_rsa.pub)内容放到服务器的.ssh目录下的authorized_keys文件中(在客户端操作)\"></a>2.将公钥(id_rsa.pub)内容放到服务器的.ssh目录下的authorized_keys文件中(在客户端操作)</h4><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-<span class=\"keyword\">copy</span>-<span class=\"built_in\">id</span> root@host_ip</span><br></pre></td></tr></table></figure>","more":"<p>这条命令会直接将本地公钥复制到服务器的.ssh/authorized_keys中。<br>或者<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh root<span class=\"variable\">@host_ip</span> <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~<span class=\"regexp\">/.ssh/id</span>_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>或者<br>使用scp命令将文件拷贝到服务器再重命名为authorized_keys<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp id_rsa.pub pi<span class=\"variable\">@192</span>.<span class=\"number\">168.43</span>.<span class=\"number\">253</span><span class=\"symbol\">:~/</span>.ssh</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-设置完之后就不用输入密码登录了\"><a href=\"#3-设置完之后就不用输入密码登录了\" class=\"headerlink\" title=\"3.设置完之后就不用输入密码登录了\"></a>3.设置完之后就不用输入密码登录了</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh root<span class=\"variable\">@host_ip</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"noopener\">SSH原理与运用（一）：远程登录</a></p>"},{"layout":"posts","title":"hibernate常见问题","_content":"#### 报错：java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException（运行环境：jdk10)\n解决方法一：将JDK换成8或以下\n解决办法二：导入下面4个jar包\n1. [javax.activation-1.2.0.jar](http://search.maven.org/remotecontent?filepath=com/sun/activation/javax.activation/1.2.0/javax.activation-1.2.0.jar)  \n2. [jaxb-api-2.3.0.jar](http://search.maven.org/remotecontent?filepath=javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar)\n3. [jaxb-core-2.3.0.jar](http://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-core/2.3.0/jaxb-core-2.3.0.jar)\n4. [jaxb-impl-2.3.0.jar](http://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-impl/2.3.0/jaxb-impl-2.3.0.jar)  \n具体原因参考：https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j\n","source":"_posts/2018/2018-08-19-hibernate常见问题.md","raw":"---\nlayout: posts\ntitle: hibernate常见问题\ncategories: Java学习笔记\ntags: \n    - hibernate\n---\n#### 报错：java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException（运行环境：jdk10)\n解决方法一：将JDK换成8或以下\n解决办法二：导入下面4个jar包\n1. [javax.activation-1.2.0.jar](http://search.maven.org/remotecontent?filepath=com/sun/activation/javax.activation/1.2.0/javax.activation-1.2.0.jar)  \n2. [jaxb-api-2.3.0.jar](http://search.maven.org/remotecontent?filepath=javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar)\n3. [jaxb-core-2.3.0.jar](http://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-core/2.3.0/jaxb-core-2.3.0.jar)\n4. [jaxb-impl-2.3.0.jar](http://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-impl/2.3.0/jaxb-impl-2.3.0.jar)  \n具体原因参考：https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j\n","slug":"2018-2018-08-19-hibernate常见问题","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:02:06.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9s001bd3fo6n36kkjb","content":"<h4 id=\"报错：java-lang-NoClassDefFoundError-javax-xml-bind-JAXBException（运行环境：jdk10\"><a href=\"#报错：java-lang-NoClassDefFoundError-javax-xml-bind-JAXBException（运行环境：jdk10\" class=\"headerlink\" title=\"报错：java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException（运行环境：jdk10)\"></a>报错：java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException（运行环境：jdk10)</h4><p>解决方法一：将JDK换成8或以下<br>解决办法二：导入下面4个jar包</p>\n<ol>\n<li><a href=\"http://search.maven.org/remotecontent?filepath=com/sun/activation/javax.activation/1.2.0/javax.activation-1.2.0.jar\" target=\"_blank\" rel=\"noopener\">javax.activation-1.2.0.jar</a>  </li>\n<li><a href=\"http://search.maven.org/remotecontent?filepath=javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar\" target=\"_blank\" rel=\"noopener\">jaxb-api-2.3.0.jar</a></li>\n<li><a href=\"http://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-core/2.3.0/jaxb-core-2.3.0.jar\" target=\"_blank\" rel=\"noopener\">jaxb-core-2.3.0.jar</a></li>\n<li><a href=\"http://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-impl/2.3.0/jaxb-impl-2.3.0.jar\" target=\"_blank\" rel=\"noopener\">jaxb-impl-2.3.0.jar</a><br>具体原因参考：<a href=\"https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"报错：java-lang-NoClassDefFoundError-javax-xml-bind-JAXBException（运行环境：jdk10\"><a href=\"#报错：java-lang-NoClassDefFoundError-javax-xml-bind-JAXBException（运行环境：jdk10\" class=\"headerlink\" title=\"报错：java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException（运行环境：jdk10)\"></a>报错：java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException（运行环境：jdk10)</h4><p>解决方法一：将JDK换成8或以下<br>解决办法二：导入下面4个jar包</p>\n<ol>\n<li><a href=\"http://search.maven.org/remotecontent?filepath=com/sun/activation/javax.activation/1.2.0/javax.activation-1.2.0.jar\" target=\"_blank\" rel=\"noopener\">javax.activation-1.2.0.jar</a>  </li>\n<li><a href=\"http://search.maven.org/remotecontent?filepath=javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar\" target=\"_blank\" rel=\"noopener\">jaxb-api-2.3.0.jar</a></li>\n<li><a href=\"http://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-core/2.3.0/jaxb-core-2.3.0.jar\" target=\"_blank\" rel=\"noopener\">jaxb-core-2.3.0.jar</a></li>\n<li><a href=\"http://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-impl/2.3.0/jaxb-impl-2.3.0.jar\" target=\"_blank\" rel=\"noopener\">jaxb-impl-2.3.0.jar</a><br>具体原因参考：<a href=\"https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j</a></li>\n</ol>\n"},{"layout":"posts","title":"操作系统、软件及常用工具","_content":"## 一、Windows操作系统下载\n1. [MSDN,我告诉你](https://msdn.itellyou.cn/);\n2. [Microsoft官网](https://www.microsoft.com/zh-cn/software-download/windows10/);\n3. [亦是美网络](http://www.yishimei123.com/network/290.html);  \n\n## 二、office及visio下载  \n1. [MSDN,我告诉你](https://msdn.itellyou.cn/);\n2. [亦是美网络](http://www.yishimei123.com/network/290.html);\n##### (office与Visio版本需一致都为零售或者都为VOL，否则不能安装)\n\n## 三、系统及Office破解工具  \n1. [MicroKMS](http://www.yishimei123.com/network/319.html);\n\n## 四、解压工具  \n1. [bandizip](http://www.bandisoft.com/bandizip/);\n## (不要下2345好压,会劫持浏览器主页,非常流氓)\n\n## 五、科学上网工具\n1. [蓝灯](https://github.com/getlantern/lantern);\n","source":"_posts/2018/2018-07-29-系统、软件及常用工具.md","raw":"---\nlayout: posts\ntitle: 操作系统、软件及常用工具\ncategories: 其它\ntags:\n    - 重装系统\n    - 常用软件\n---\n## 一、Windows操作系统下载\n1. [MSDN,我告诉你](https://msdn.itellyou.cn/);\n2. [Microsoft官网](https://www.microsoft.com/zh-cn/software-download/windows10/);\n3. [亦是美网络](http://www.yishimei123.com/network/290.html);  \n\n## 二、office及visio下载  \n1. [MSDN,我告诉你](https://msdn.itellyou.cn/);\n2. [亦是美网络](http://www.yishimei123.com/network/290.html);\n##### (office与Visio版本需一致都为零售或者都为VOL，否则不能安装)\n\n## 三、系统及Office破解工具  \n1. [MicroKMS](http://www.yishimei123.com/network/319.html);\n\n## 四、解压工具  \n1. [bandizip](http://www.bandisoft.com/bandizip/);\n## (不要下2345好压,会劫持浏览器主页,非常流氓)\n\n## 五、科学上网工具\n1. [蓝灯](https://github.com/getlantern/lantern);\n","slug":"2018-2018-07-29-系统、软件及常用工具","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:02:34.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9u001ed3foobxu8t1m","content":"<h2 id=\"一、Windows操作系统下载\"><a href=\"#一、Windows操作系统下载\" class=\"headerlink\" title=\"一、Windows操作系统下载\"></a>一、Windows操作系统下载</h2><ol>\n<li><a href=\"https://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">MSDN,我告诉你</a>;</li>\n<li><a href=\"https://www.microsoft.com/zh-cn/software-download/windows10/\" target=\"_blank\" rel=\"noopener\">Microsoft官网</a>;</li>\n<li><a href=\"http://www.yishimei123.com/network/290.html\" target=\"_blank\" rel=\"noopener\">亦是美网络</a>;  </li>\n</ol>\n<h2 id=\"二、office及visio下载\"><a href=\"#二、office及visio下载\" class=\"headerlink\" title=\"二、office及visio下载\"></a>二、office及visio下载</h2><ol>\n<li><a href=\"https://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">MSDN,我告诉你</a>;</li>\n<li><a href=\"http://www.yishimei123.com/network/290.html\" target=\"_blank\" rel=\"noopener\">亦是美网络</a>;<h5 id=\"office与Visio版本需一致都为零售或者都为VOL，否则不能安装\"><a href=\"#office与Visio版本需一致都为零售或者都为VOL，否则不能安装\" class=\"headerlink\" title=\"(office与Visio版本需一致都为零售或者都为VOL，否则不能安装)\"></a>(office与Visio版本需一致都为零售或者都为VOL，否则不能安装)</h5></li>\n</ol>\n<h2 id=\"三、系统及Office破解工具\"><a href=\"#三、系统及Office破解工具\" class=\"headerlink\" title=\"三、系统及Office破解工具\"></a>三、系统及Office破解工具</h2><ol>\n<li><a href=\"http://www.yishimei123.com/network/319.html\" target=\"_blank\" rel=\"noopener\">MicroKMS</a>;</li>\n</ol>\n<h2 id=\"四、解压工具\"><a href=\"#四、解压工具\" class=\"headerlink\" title=\"四、解压工具\"></a>四、解压工具</h2><ol>\n<li><a href=\"http://www.bandisoft.com/bandizip/\" target=\"_blank\" rel=\"noopener\">bandizip</a>;<h2 id=\"不要下2345好压-会劫持浏览器主页-非常流氓\"><a href=\"#不要下2345好压-会劫持浏览器主页-非常流氓\" class=\"headerlink\" title=\"(不要下2345好压,会劫持浏览器主页,非常流氓)\"></a>(不要下2345好压,会劫持浏览器主页,非常流氓)</h2></li>\n</ol>\n<h2 id=\"五、科学上网工具\"><a href=\"#五、科学上网工具\" class=\"headerlink\" title=\"五、科学上网工具\"></a>五、科学上网工具</h2><ol>\n<li><a href=\"https://github.com/getlantern/lantern\" target=\"_blank\" rel=\"noopener\">蓝灯</a>;</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Windows操作系统下载\"><a href=\"#一、Windows操作系统下载\" class=\"headerlink\" title=\"一、Windows操作系统下载\"></a>一、Windows操作系统下载</h2><ol>\n<li><a href=\"https://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">MSDN,我告诉你</a>;</li>\n<li><a href=\"https://www.microsoft.com/zh-cn/software-download/windows10/\" target=\"_blank\" rel=\"noopener\">Microsoft官网</a>;</li>\n<li><a href=\"http://www.yishimei123.com/network/290.html\" target=\"_blank\" rel=\"noopener\">亦是美网络</a>;  </li>\n</ol>\n<h2 id=\"二、office及visio下载\"><a href=\"#二、office及visio下载\" class=\"headerlink\" title=\"二、office及visio下载\"></a>二、office及visio下载</h2><ol>\n<li><a href=\"https://msdn.itellyou.cn/\" target=\"_blank\" rel=\"noopener\">MSDN,我告诉你</a>;</li>\n<li><a href=\"http://www.yishimei123.com/network/290.html\" target=\"_blank\" rel=\"noopener\">亦是美网络</a>;<h5 id=\"office与Visio版本需一致都为零售或者都为VOL，否则不能安装\"><a href=\"#office与Visio版本需一致都为零售或者都为VOL，否则不能安装\" class=\"headerlink\" title=\"(office与Visio版本需一致都为零售或者都为VOL，否则不能安装)\"></a>(office与Visio版本需一致都为零售或者都为VOL，否则不能安装)</h5></li>\n</ol>\n<h2 id=\"三、系统及Office破解工具\"><a href=\"#三、系统及Office破解工具\" class=\"headerlink\" title=\"三、系统及Office破解工具\"></a>三、系统及Office破解工具</h2><ol>\n<li><a href=\"http://www.yishimei123.com/network/319.html\" target=\"_blank\" rel=\"noopener\">MicroKMS</a>;</li>\n</ol>\n<h2 id=\"四、解压工具\"><a href=\"#四、解压工具\" class=\"headerlink\" title=\"四、解压工具\"></a>四、解压工具</h2><ol>\n<li><a href=\"http://www.bandisoft.com/bandizip/\" target=\"_blank\" rel=\"noopener\">bandizip</a>;<h2 id=\"不要下2345好压-会劫持浏览器主页-非常流氓\"><a href=\"#不要下2345好压-会劫持浏览器主页-非常流氓\" class=\"headerlink\" title=\"(不要下2345好压,会劫持浏览器主页,非常流氓)\"></a>(不要下2345好压,会劫持浏览器主页,非常流氓)</h2></li>\n</ol>\n<h2 id=\"五、科学上网工具\"><a href=\"#五、科学上网工具\" class=\"headerlink\" title=\"五、科学上网工具\"></a>五、科学上网工具</h2><ol>\n<li><a href=\"https://github.com/getlantern/lantern\" target=\"_blank\" rel=\"noopener\">蓝灯</a>;</li>\n</ol>\n"},{"layout":"posts","title":"hibernate的基本使用","_content":"hibernate框架的主要作用就是将面向对象语言转化为操作关系数据的语言。\n## 一、导入相关jar包\n1. 1、将下载的hibernate解压缩，导入`hibernate-release-5.3.5.Final\\lib\\required`目录下的所有jar包。\n2. 2、导入mysql驱动\n## 二、编写持久化类\n注意几点：\n1. 1、类名对应表名\n2. 2、成员变量对应数据库字段\n3. 3、提供getter和setter方法即可\n## 三、创建持久类的映射文件\n注意：\n* 命名规则为：类名.hbm.xml\n* 位置：和持久化类同目录下\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 以下来自hibernate核心类下的 /org/hibernate/hibernate-mapping-3.0.dtd的约束-->\n<!DOCTYPE hibernate-mapping PUBLIC\n    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n<hibernate-mapping package=\"cn.wangsr.domain\"><!-- 包名 -->\n\t<class name=\"Customer\" table=\"Customer\"><!-- 表名 -->\n\t\t<id name=\"custId\" column=\"cust_id\"></id><!-- 主键 -->\n\t\t<property name=\"custName\" column=\"cust_name\"></property><!-- 其它字段 -->\n\t</class>\n</hibernate-mapping>\n```\n<!-- more -->\n## 创建主配置文件\n注意：\n* 命名规则为：hibernate.cfg.xml\n* 位置：在src目录下\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 在hibernate核心包目录下 /org/hibernate/hibernate-configuration-3.0.dtd-->\n<!DOCTYPE hibernate-configuration PUBLIC\n\t\"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n\t\"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\n<hibernate-configuration>\n\t<session-factory>\n\t<!-- 连接数据库信息 -->\n\t\t<property name=\"hibernate.connection.driver_class\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"hibernate.connection.url\">jdbc:mysql://localhost:3306/first_hibernate</property>\n\t\t<property name=\"hibernate.connection.username\">root</property>\n\t\t<property name=\"hibernate.connection.password\">123456</property>\n\t\t<property name=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</property>\n\t<!-- 可选项 -->\n\t\t<property name=\"hibernate.hbm2ddl.auto\">update</property>\n\t\t<property name=\"hibernate.show_sql\">true</property>\n\t<!-- 映射文件位置 -->\n\t\t<mapping resource=\"cn/wangsr/domain/Customer.hbm.xml\"/>\n\t</session-factory>\n</hibernate-configuration>\n```\n\n## 使用\n```\npublic class HibernateDemo1 {\n\t@Test\n\tpublic void test1() {\n\t\tCustomer c = new Customer();\n\t\tc.setCustName(\"abc\");\n\t\t//解析主配置文件\n\t\tConfiguration cfg =new Configuration();\n\t\tcfg.configure();\n\t\t//根据配置创建SessionFactory\n\t\tSessionFactory factory = cfg.buildSessionFactory();\n\t\t//根据SessionFactory创建Session\n\t\tSession session = factory.openSession();\n\t\t//开启事务\n\t\tTransaction tx = session.beginTransaction();\n\t\t//执行操作（保存）\n\t\tsession.save(c);\n\n    /*更新\n\t\tCustomer c = session.get(Customer.class, 1L);\n\t\tc.setCustName(\"666\");\n\t\tsession.update(c);*/\n    /*删除id未1\n\t\tCustomer c = session.get(Customer.class, 1L);\n\t\tsession.delete(c);*/\n\n\n\t\t//提交事务\n\t\ttx.commit();\n\t\t//释放资源\n\t\tsession.close();\n\t\tfactory.close();\n\t}\n}\n```\n## 抽取工具类\n目的：是SessionFactory只创建一次\n实现：使用静态初始化块\n```\npublic class HibernateUtil{\n  private static SessionFactory factory;\n  static{\n    Configuration cfg = new Configuration();\n    cfg.configure();\n    factory = cfg.buildSessionFactory();\n  }\n  public static Session openSession(){\n    return factory.openSession();\n  }\n\n}\n```\n","source":"_posts/2018/2018-08-19-hibernate的基本使用.md","raw":"---\nlayout: posts\ntitle: hibernate的基本使用\ncategories: Java学习笔记\ntags:\n    - hibernate\n---\nhibernate框架的主要作用就是将面向对象语言转化为操作关系数据的语言。\n## 一、导入相关jar包\n1. 1、将下载的hibernate解压缩，导入`hibernate-release-5.3.5.Final\\lib\\required`目录下的所有jar包。\n2. 2、导入mysql驱动\n## 二、编写持久化类\n注意几点：\n1. 1、类名对应表名\n2. 2、成员变量对应数据库字段\n3. 3、提供getter和setter方法即可\n## 三、创建持久类的映射文件\n注意：\n* 命名规则为：类名.hbm.xml\n* 位置：和持久化类同目录下\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 以下来自hibernate核心类下的 /org/hibernate/hibernate-mapping-3.0.dtd的约束-->\n<!DOCTYPE hibernate-mapping PUBLIC\n    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n<hibernate-mapping package=\"cn.wangsr.domain\"><!-- 包名 -->\n\t<class name=\"Customer\" table=\"Customer\"><!-- 表名 -->\n\t\t<id name=\"custId\" column=\"cust_id\"></id><!-- 主键 -->\n\t\t<property name=\"custName\" column=\"cust_name\"></property><!-- 其它字段 -->\n\t</class>\n</hibernate-mapping>\n```\n<!-- more -->\n## 创建主配置文件\n注意：\n* 命名规则为：hibernate.cfg.xml\n* 位置：在src目录下\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 在hibernate核心包目录下 /org/hibernate/hibernate-configuration-3.0.dtd-->\n<!DOCTYPE hibernate-configuration PUBLIC\n\t\"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n\t\"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\n<hibernate-configuration>\n\t<session-factory>\n\t<!-- 连接数据库信息 -->\n\t\t<property name=\"hibernate.connection.driver_class\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"hibernate.connection.url\">jdbc:mysql://localhost:3306/first_hibernate</property>\n\t\t<property name=\"hibernate.connection.username\">root</property>\n\t\t<property name=\"hibernate.connection.password\">123456</property>\n\t\t<property name=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</property>\n\t<!-- 可选项 -->\n\t\t<property name=\"hibernate.hbm2ddl.auto\">update</property>\n\t\t<property name=\"hibernate.show_sql\">true</property>\n\t<!-- 映射文件位置 -->\n\t\t<mapping resource=\"cn/wangsr/domain/Customer.hbm.xml\"/>\n\t</session-factory>\n</hibernate-configuration>\n```\n\n## 使用\n```\npublic class HibernateDemo1 {\n\t@Test\n\tpublic void test1() {\n\t\tCustomer c = new Customer();\n\t\tc.setCustName(\"abc\");\n\t\t//解析主配置文件\n\t\tConfiguration cfg =new Configuration();\n\t\tcfg.configure();\n\t\t//根据配置创建SessionFactory\n\t\tSessionFactory factory = cfg.buildSessionFactory();\n\t\t//根据SessionFactory创建Session\n\t\tSession session = factory.openSession();\n\t\t//开启事务\n\t\tTransaction tx = session.beginTransaction();\n\t\t//执行操作（保存）\n\t\tsession.save(c);\n\n    /*更新\n\t\tCustomer c = session.get(Customer.class, 1L);\n\t\tc.setCustName(\"666\");\n\t\tsession.update(c);*/\n    /*删除id未1\n\t\tCustomer c = session.get(Customer.class, 1L);\n\t\tsession.delete(c);*/\n\n\n\t\t//提交事务\n\t\ttx.commit();\n\t\t//释放资源\n\t\tsession.close();\n\t\tfactory.close();\n\t}\n}\n```\n## 抽取工具类\n目的：是SessionFactory只创建一次\n实现：使用静态初始化块\n```\npublic class HibernateUtil{\n  private static SessionFactory factory;\n  static{\n    Configuration cfg = new Configuration();\n    cfg.configure();\n    factory = cfg.buildSessionFactory();\n  }\n  public static Session openSession(){\n    return factory.openSession();\n  }\n\n}\n```\n","slug":"2018-2018-08-19-hibernate的基本使用","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:01:50.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9w001hd3fo02hpco09","content":"<p>hibernate框架的主要作用就是将面向对象语言转化为操作关系数据的语言。</p>\n<h2 id=\"一、导入相关jar包\"><a href=\"#一、导入相关jar包\" class=\"headerlink\" title=\"一、导入相关jar包\"></a>一、导入相关jar包</h2><ol>\n<li>1、将下载的hibernate解压缩，导入<code>hibernate-release-5.3.5.Final\\lib\\required</code>目录下的所有jar包。</li>\n<li>2、导入mysql驱动<h2 id=\"二、编写持久化类\"><a href=\"#二、编写持久化类\" class=\"headerlink\" title=\"二、编写持久化类\"></a>二、编写持久化类</h2>注意几点：</li>\n<li>1、类名对应表名</li>\n<li>2、成员变量对应数据库字段</li>\n<li>3、提供getter和setter方法即可<h2 id=\"三、创建持久类的映射文件\"><a href=\"#三、创建持久类的映射文件\" class=\"headerlink\" title=\"三、创建持久类的映射文件\"></a>三、创建持久类的映射文件</h2>注意：</li>\n</ol>\n<ul>\n<li>命名规则为：类名.hbm.xml</li>\n<li>位置：和持久化类同目录下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以下来自hibernate核心类下的 /org/hibernate/hibernate-mapping-3.0.dtd的约束--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\">    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-mapping</span> <span class=\"attr\">package</span>=<span class=\"string\">\"cn.wangsr.domain\"</span>&gt;</span><span class=\"comment\">&lt;!-- 包名 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Customer\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"Customer\"</span>&gt;</span><span class=\"comment\">&lt;!-- 表名 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custId\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"cust_id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span><span class=\"comment\">&lt;!-- 主键 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custName\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"cust_name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span><span class=\"comment\">&lt;!-- 其它字段 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"创建主配置文件\"><a href=\"#创建主配置文件\" class=\"headerlink\" title=\"创建主配置文件\"></a>创建主配置文件</h2><p>注意：</p>\n<ul>\n<li>命名规则为：hibernate.cfg.xml</li>\n<li>位置：在src目录下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在hibernate核心包目录下 /org/hibernate/hibernate-configuration-3.0.dtd--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\">\t\"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">\t\"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">session-factory</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 连接数据库信息 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span>&gt;</span>jdbc:mysql://localhost:3306/first_hibernate<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可选项 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 映射文件位置 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/wangsr/domain/Customer.hbm.xml\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">session-factory</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateDemo1</span> &#123;</span></span><br><span class=\"line\">\t@<span class=\"type\">Test</span></span><br><span class=\"line\">\tpublic void test1() &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Customer</span> c = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Customer</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">c</span>.<span class=\"title\">setCustName</span>(\"abc\");</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//解析主配置文件</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Configuration</span> <span class=\"title\">cfg</span> =<span class=\"title\">new</span> <span class=\"title\">Configuration</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">cfg</span>.<span class=\"title\">configure</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//根据配置创建SessionFactory</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">SessionFactory</span> <span class=\"title\">factory</span> = <span class=\"title\">cfg</span>.<span class=\"title\">buildSessionFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//根据SessionFactory创建Session</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Session</span> <span class=\"title\">session</span> = <span class=\"title\">factory</span>.<span class=\"title\">openSession</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//开启事务</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Transaction</span> <span class=\"title\">tx</span> = <span class=\"title\">session</span>.<span class=\"title\">beginTransaction</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//执行操作（保存）</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">session</span>.<span class=\"title\">save</span>(c);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    /*更新</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Customer</span> <span class=\"title\">c</span> = <span class=\"title\">session</span>.<span class=\"title\">get</span>(<span class=\"type\">Customer</span>.class, <span class=\"number\">1</span>L);</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">c</span>.<span class=\"title\">setCustName</span>(\"<span class=\"number\">666</span>\");</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">session</span>.<span class=\"title\">update</span>(c);*/</span></span><br><span class=\"line\"><span class=\"function\">    /*删除<span class=\"title\">id</span>未1</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Customer</span> <span class=\"title\">c</span> = <span class=\"title\">session</span>.<span class=\"title\">get</span>(<span class=\"type\">Customer</span>.class, <span class=\"number\">1</span>L);</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">session</span>.<span class=\"title\">delete</span>(c);*/</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//提交事务</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">tx</span>.<span class=\"title\">commit</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//释放资源</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">session</span>.<span class=\"title\">close</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">factory</span>.<span class=\"title\">close</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t&#125;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"抽取工具类\"><a href=\"#抽取工具类\" class=\"headerlink\" title=\"抽取工具类\"></a>抽取工具类</h2><p>目的：是SessionFactory只创建一次<br>实现：使用静态初始化块<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateUtil</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SessionFactory factory;</span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    Configuration cfg = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">    cfg.configure();</span><br><span class=\"line\">    factory = cfg.buildSessionFactory();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Session <span class=\"title\">openSession</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory.openSession();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>hibernate框架的主要作用就是将面向对象语言转化为操作关系数据的语言。</p>\n<h2 id=\"一、导入相关jar包\"><a href=\"#一、导入相关jar包\" class=\"headerlink\" title=\"一、导入相关jar包\"></a>一、导入相关jar包</h2><ol>\n<li>1、将下载的hibernate解压缩，导入<code>hibernate-release-5.3.5.Final\\lib\\required</code>目录下的所有jar包。</li>\n<li>2、导入mysql驱动<h2 id=\"二、编写持久化类\"><a href=\"#二、编写持久化类\" class=\"headerlink\" title=\"二、编写持久化类\"></a>二、编写持久化类</h2>注意几点：</li>\n<li>1、类名对应表名</li>\n<li>2、成员变量对应数据库字段</li>\n<li>3、提供getter和setter方法即可<h2 id=\"三、创建持久类的映射文件\"><a href=\"#三、创建持久类的映射文件\" class=\"headerlink\" title=\"三、创建持久类的映射文件\"></a>三、创建持久类的映射文件</h2>注意：</li>\n</ol>\n<ul>\n<li>命名规则为：类名.hbm.xml</li>\n<li>位置：和持久化类同目录下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 以下来自hibernate核心类下的 /org/hibernate/hibernate-mapping-3.0.dtd的约束--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\">    \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">    \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-mapping</span> <span class=\"attr\">package</span>=<span class=\"string\">\"cn.wangsr.domain\"</span>&gt;</span><span class=\"comment\">&lt;!-- 包名 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">class</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Customer\"</span> <span class=\"attr\">table</span>=<span class=\"string\">\"Customer\"</span>&gt;</span><span class=\"comment\">&lt;!-- 表名 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custId\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"cust_id\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span><span class=\"comment\">&lt;!-- 主键 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"custName\"</span> <span class=\"attr\">column</span>=<span class=\"string\">\"cust_name\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span><span class=\"comment\">&lt;!-- 其它字段 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h2 id=\"创建主配置文件\"><a href=\"#创建主配置文件\" class=\"headerlink\" title=\"创建主配置文件\"></a>创建主配置文件</h2><p>注意：</p>\n<ul>\n<li>命名规则为：hibernate.cfg.xml</li>\n<li>位置：在src目录下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 在hibernate核心包目录下 /org/hibernate/hibernate-configuration-3.0.dtd--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\">\t\"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">\t\"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">session-factory</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 连接数据库信息 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span>&gt;</span>jdbc:mysql://localhost:3306/first_hibernate<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 可选项 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 映射文件位置 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/wangsr/domain/Customer.hbm.xml\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">session-factory</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateDemo1</span> &#123;</span></span><br><span class=\"line\">\t@<span class=\"type\">Test</span></span><br><span class=\"line\">\tpublic void test1() &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Customer</span> c = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Customer</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">c</span>.<span class=\"title\">setCustName</span>(\"abc\");</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//解析主配置文件</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Configuration</span> <span class=\"title\">cfg</span> =<span class=\"title\">new</span> <span class=\"title\">Configuration</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">cfg</span>.<span class=\"title\">configure</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//根据配置创建SessionFactory</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">SessionFactory</span> <span class=\"title\">factory</span> = <span class=\"title\">cfg</span>.<span class=\"title\">buildSessionFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//根据SessionFactory创建Session</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Session</span> <span class=\"title\">session</span> = <span class=\"title\">factory</span>.<span class=\"title\">openSession</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//开启事务</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Transaction</span> <span class=\"title\">tx</span> = <span class=\"title\">session</span>.<span class=\"title\">beginTransaction</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//执行操作（保存）</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">session</span>.<span class=\"title\">save</span>(c);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    /*更新</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Customer</span> <span class=\"title\">c</span> = <span class=\"title\">session</span>.<span class=\"title\">get</span>(<span class=\"type\">Customer</span>.class, <span class=\"number\">1</span>L);</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">c</span>.<span class=\"title\">setCustName</span>(\"<span class=\"number\">666</span>\");</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">session</span>.<span class=\"title\">update</span>(c);*/</span></span><br><span class=\"line\"><span class=\"function\">    /*删除<span class=\"title\">id</span>未1</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">Customer</span> <span class=\"title\">c</span> = <span class=\"title\">session</span>.<span class=\"title\">get</span>(<span class=\"type\">Customer</span>.class, <span class=\"number\">1</span>L);</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">session</span>.<span class=\"title\">delete</span>(c);*/</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//提交事务</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">tx</span>.<span class=\"title\">commit</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"comment\">//释放资源</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">session</span>.<span class=\"title\">close</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"title\">factory</span>.<span class=\"title\">close</span>();</span></span><br><span class=\"line\"><span class=\"function\">\t&#125;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"抽取工具类\"><a href=\"#抽取工具类\" class=\"headerlink\" title=\"抽取工具类\"></a>抽取工具类</h2><p>目的：是SessionFactory只创建一次<br>实现：使用静态初始化块<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HibernateUtil</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SessionFactory factory;</span><br><span class=\"line\">  <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    Configuration cfg = <span class=\"keyword\">new</span> Configuration();</span><br><span class=\"line\">    cfg.configure();</span><br><span class=\"line\">    factory = cfg.buildSessionFactory();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Session <span class=\"title\">openSession</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> factory.openSession();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"layout":"posts","title":"Linux 常用操作","_content":"## 一、python相关\n* 1、安装python包\n```\npip3 install baidu-aip\n```\n* 2、列出所安装的python包\n```\npip3 list\n```\n* 3、卸载包\n```\npip3 unstall baidu-aip\n```\n* 4、使用python模拟键盘输入（输入快捷键）\n安装PyUserInput包\n```\npip3 install PyUserInput\n```\n<!--more-->\n导入包\n```\nfrom pymouse import PyMouse\nfrom pykeyboard import PyKeyboard\nm = PyMouse()#鼠标\nk = PyKeyboard()#键盘\n```\n\n使用\n```\nx_dim, y_dim = m.screen_size()\nm.click(x_dim/2, y_dim/2, 1)#点击屏幕中间\nk.type_string('Hello, World!')#输入\"Hello,World\"\n# pressing a key\nk.press_key('H')#按下键\n# which you then follow with a release of the key\nk.release_key('H')#松开键\n# or you can 'tap' a key which does both\nk.tap_key('e')\n# note that that tap_key does support a way of     repeating keystrokes with a interval time between each\nk.tap_key('l',n=2,interval=5)#隔5秒点击\n\nk.press_keys([k.windows_l_key,'d'])#组合键\n```\n\n## 二、网络相关\n* 1、查询IP地址\n```\nifconfig\n```\n## 三、文件/文件夹相关\n* 1、列出当前目录文件\n* *ls\n* *ls -a:列出包含隐藏文件\n* 2、新建目录\n```\nmkdir filename\n```\n* 3、重命名或移动文件\n重命名：\n```\nmv filename_old filename_new\n```\n移动到上一级：\n```\nmv file ../\n```\n## 系统相关\n* 1、播放音频\n```\nmplayer auido.mp3\n```\n注：可以播放地址为url的音乐\n* 2、执行定时任务\n\n* crontab -e 进入编辑\n```\n#min hour date month week command\n0 11 * * * /usr/bin/python3 /home/pi/PycharmProjects/alarm.py\n```\n上面代码意思：每天11点执行`python3 alarm.py`这个脚本\n* crontab -l 列出当前任务\n具体参考[http://man.linuxde.net/crontab](http://man.linuxde.net/crontab)\n","source":"_posts/2018/2018-09-08-Linux常用操作.md","raw":"---\nlayout: posts\ntitle: Linux 常用操作\ncategories: Linux系统相关\ntags:\n    - Liunx\n---\n## 一、python相关\n* 1、安装python包\n```\npip3 install baidu-aip\n```\n* 2、列出所安装的python包\n```\npip3 list\n```\n* 3、卸载包\n```\npip3 unstall baidu-aip\n```\n* 4、使用python模拟键盘输入（输入快捷键）\n安装PyUserInput包\n```\npip3 install PyUserInput\n```\n<!--more-->\n导入包\n```\nfrom pymouse import PyMouse\nfrom pykeyboard import PyKeyboard\nm = PyMouse()#鼠标\nk = PyKeyboard()#键盘\n```\n\n使用\n```\nx_dim, y_dim = m.screen_size()\nm.click(x_dim/2, y_dim/2, 1)#点击屏幕中间\nk.type_string('Hello, World!')#输入\"Hello,World\"\n# pressing a key\nk.press_key('H')#按下键\n# which you then follow with a release of the key\nk.release_key('H')#松开键\n# or you can 'tap' a key which does both\nk.tap_key('e')\n# note that that tap_key does support a way of     repeating keystrokes with a interval time between each\nk.tap_key('l',n=2,interval=5)#隔5秒点击\n\nk.press_keys([k.windows_l_key,'d'])#组合键\n```\n\n## 二、网络相关\n* 1、查询IP地址\n```\nifconfig\n```\n## 三、文件/文件夹相关\n* 1、列出当前目录文件\n* *ls\n* *ls -a:列出包含隐藏文件\n* 2、新建目录\n```\nmkdir filename\n```\n* 3、重命名或移动文件\n重命名：\n```\nmv filename_old filename_new\n```\n移动到上一级：\n```\nmv file ../\n```\n## 系统相关\n* 1、播放音频\n```\nmplayer auido.mp3\n```\n注：可以播放地址为url的音乐\n* 2、执行定时任务\n\n* crontab -e 进入编辑\n```\n#min hour date month week command\n0 11 * * * /usr/bin/python3 /home/pi/PycharmProjects/alarm.py\n```\n上面代码意思：每天11点执行`python3 alarm.py`这个脚本\n* crontab -l 列出当前任务\n具体参考[http://man.linuxde.net/crontab](http://man.linuxde.net/crontab)\n","slug":"2018-2018-09-08-Linux常用操作","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:00:48.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9x001kd3fotq0morjn","content":"<h2 id=\"一、python相关\"><a href=\"#一、python相关\" class=\"headerlink\" title=\"一、python相关\"></a>一、python相关</h2><ul>\n<li><p>1、安装python包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> baidu-aip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、列出所安装的python包</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、卸载包</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">pip3</span> unstall baidu-aip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4、使用python模拟键盘输入（输入快捷键）<br>安装PyUserInput包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> PyUserInput</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>导入包<br><figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymouse <span class=\"keyword\">import</span> PyMouse</span><br><span class=\"line\"><span class=\"keyword\">from</span> pykeyboard <span class=\"keyword\">import</span> PyKeyboard</span><br><span class=\"line\">m = PyMouse()<span class=\"comment\">#鼠标</span></span><br><span class=\"line\">k = PyKeyboard()<span class=\"comment\">#键盘</span></span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_dim, y_dim = m.screen_size()</span><br><span class=\"line\">m.click(x_dim<span class=\"regexp\">/2, y_dim/</span><span class=\"number\">2</span>, <span class=\"number\">1</span>)<span class=\"comment\">#点击屏幕中间</span></span><br><span class=\"line\">k.type_string(<span class=\"string\">'Hello, World!'</span>)<span class=\"comment\">#输入\"Hello,World\"</span></span><br><span class=\"line\"><span class=\"comment\"># pressing a key</span></span><br><span class=\"line\">k.press_key(<span class=\"string\">'H'</span>)<span class=\"comment\">#按下键</span></span><br><span class=\"line\"><span class=\"comment\"># which you then follow with a release of the key</span></span><br><span class=\"line\">k.release_key(<span class=\"string\">'H'</span>)<span class=\"comment\">#松开键</span></span><br><span class=\"line\"><span class=\"comment\"># or you can 'tap' a key which does both</span></span><br><span class=\"line\">k.tap_key(<span class=\"string\">'e'</span>)</span><br><span class=\"line\"><span class=\"comment\"># note that that tap_key does support a way of     repeating keystrokes with a interval time between each</span></span><br><span class=\"line\">k.tap_key(<span class=\"string\">'l'</span>,n=<span class=\"number\">2</span>,interval=<span class=\"number\">5</span>)<span class=\"comment\">#隔5秒点击</span></span><br><span class=\"line\"></span><br><span class=\"line\">k.press_keys([k.windows_l_key,<span class=\"string\">'d'</span>])<span class=\"comment\">#组合键</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、网络相关\"><a href=\"#二、网络相关\" class=\"headerlink\" title=\"二、网络相关\"></a>二、网络相关</h2><ul>\n<li>1、查询IP地址<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ifconfig</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"三、文件-文件夹相关\"><a href=\"#三、文件-文件夹相关\" class=\"headerlink\" title=\"三、文件/文件夹相关\"></a>三、文件/文件夹相关</h2><ul>\n<li>1、列出当前目录文件</li>\n<li>*ls</li>\n<li>*ls -a:列出包含隐藏文件</li>\n<li><p>2、新建目录</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> filename</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、重命名或移动文件<br>重命名：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mv</span> filename_old filename_new</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>移动到上一级：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mv</span></span> <span class=\"keyword\">file</span> ../</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"系统相关\"><a href=\"#系统相关\" class=\"headerlink\" title=\"系统相关\"></a>系统相关</h2><ul>\n<li>1、播放音频<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mplayer</span> <span class=\"selector-tag\">auido</span><span class=\"selector-class\">.mp3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注：可以播放地址为url的音乐</p>\n<ul>\n<li><p>2、执行定时任务</p>\n</li>\n<li><p>crontab -e 进入编辑</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"built_in\">min</span> <span class=\"built_in\">hour</span> <span class=\"built_in\">date</span> <span class=\"built_in\">month</span> week command</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">11</span> * * * /usr/bin/python3 /home/<span class=\"built_in\">pi</span>/PycharmProjects/alarm.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面代码意思：每天11点执行<code>python3 alarm.py</code>这个脚本</p>\n<ul>\n<li>crontab -l 列出当前任务<br>具体参考<a href=\"http://man.linuxde.net/crontab\" target=\"_blank\" rel=\"noopener\">http://man.linuxde.net/crontab</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、python相关\"><a href=\"#一、python相关\" class=\"headerlink\" title=\"一、python相关\"></a>一、python相关</h2><ul>\n<li><p>1、安装python包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> baidu-aip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、列出所安装的python包</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、卸载包</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">pip3</span> unstall baidu-aip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4、使用python模拟键盘输入（输入快捷键）<br>安装PyUserInput包</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> PyUserInput</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<p>导入包<br><figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pymouse <span class=\"keyword\">import</span> PyMouse</span><br><span class=\"line\"><span class=\"keyword\">from</span> pykeyboard <span class=\"keyword\">import</span> PyKeyboard</span><br><span class=\"line\">m = PyMouse()<span class=\"comment\">#鼠标</span></span><br><span class=\"line\">k = PyKeyboard()<span class=\"comment\">#键盘</span></span><br></pre></td></tr></table></figure></p>\n<p>使用<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x_dim, y_dim = m.screen_size()</span><br><span class=\"line\">m.click(x_dim<span class=\"regexp\">/2, y_dim/</span><span class=\"number\">2</span>, <span class=\"number\">1</span>)<span class=\"comment\">#点击屏幕中间</span></span><br><span class=\"line\">k.type_string(<span class=\"string\">'Hello, World!'</span>)<span class=\"comment\">#输入\"Hello,World\"</span></span><br><span class=\"line\"><span class=\"comment\"># pressing a key</span></span><br><span class=\"line\">k.press_key(<span class=\"string\">'H'</span>)<span class=\"comment\">#按下键</span></span><br><span class=\"line\"><span class=\"comment\"># which you then follow with a release of the key</span></span><br><span class=\"line\">k.release_key(<span class=\"string\">'H'</span>)<span class=\"comment\">#松开键</span></span><br><span class=\"line\"><span class=\"comment\"># or you can 'tap' a key which does both</span></span><br><span class=\"line\">k.tap_key(<span class=\"string\">'e'</span>)</span><br><span class=\"line\"><span class=\"comment\"># note that that tap_key does support a way of     repeating keystrokes with a interval time between each</span></span><br><span class=\"line\">k.tap_key(<span class=\"string\">'l'</span>,n=<span class=\"number\">2</span>,interval=<span class=\"number\">5</span>)<span class=\"comment\">#隔5秒点击</span></span><br><span class=\"line\"></span><br><span class=\"line\">k.press_keys([k.windows_l_key,<span class=\"string\">'d'</span>])<span class=\"comment\">#组合键</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、网络相关\"><a href=\"#二、网络相关\" class=\"headerlink\" title=\"二、网络相关\"></a>二、网络相关</h2><ul>\n<li>1、查询IP地址<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ifconfig</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"三、文件-文件夹相关\"><a href=\"#三、文件-文件夹相关\" class=\"headerlink\" title=\"三、文件/文件夹相关\"></a>三、文件/文件夹相关</h2><ul>\n<li>1、列出当前目录文件</li>\n<li>*ls</li>\n<li>*ls -a:列出包含隐藏文件</li>\n<li><p>2、新建目录</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> filename</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、重命名或移动文件<br>重命名：</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mv</span> filename_old filename_new</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>移动到上一级：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mv</span></span> <span class=\"keyword\">file</span> ../</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"系统相关\"><a href=\"#系统相关\" class=\"headerlink\" title=\"系统相关\"></a>系统相关</h2><ul>\n<li>1、播放音频<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mplayer</span> <span class=\"selector-tag\">auido</span><span class=\"selector-class\">.mp3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>注：可以播放地址为url的音乐</p>\n<ul>\n<li><p>2、执行定时任务</p>\n</li>\n<li><p>crontab -e 进入编辑</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"built_in\">min</span> <span class=\"built_in\">hour</span> <span class=\"built_in\">date</span> <span class=\"built_in\">month</span> week command</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">11</span> * * * /usr/bin/python3 /home/<span class=\"built_in\">pi</span>/PycharmProjects/alarm.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面代码意思：每天11点执行<code>python3 alarm.py</code>这个脚本</p>\n<ul>\n<li>crontab -l 列出当前任务<br>具体参考<a href=\"http://man.linuxde.net/crontab\" target=\"_blank\" rel=\"noopener\">http://man.linuxde.net/crontab</a></li>\n</ul>"},{"layout":"posts","title":"python使用openpyxl库操作Excel","_content":"## 一、加载表格\n```\nwb = openpyxl.load_workbook(\"abc.xlsx\")#加载工作簿\nws = wb[\"Sheet2\"]#加载工作表\n```\n## 二、读取单元格数值\n```\nws[\"A1\"].value#读取A1单元格的值\n```\n## 三、单元格填充颜色\n```\nfill = PatternFill(fill_type=\"solid\", fgColor=\"54FF9F\")\nws[\"A1\"].fill = fill\nwb.save(\"abc.xlsx\")\n```\n注：操作一次就执行一次`save()`方法，否则可能只保留最后一次的操作\n","source":"_posts/2018/2018-08-25-python操作excel.md","raw":"---\nlayout: posts\ntitle: python使用openpyxl库操作Excel\ncategories: python学习笔记\ntags: \n    - python\n    - openpyxl\n---\n## 一、加载表格\n```\nwb = openpyxl.load_workbook(\"abc.xlsx\")#加载工作簿\nws = wb[\"Sheet2\"]#加载工作表\n```\n## 二、读取单元格数值\n```\nws[\"A1\"].value#读取A1单元格的值\n```\n## 三、单元格填充颜色\n```\nfill = PatternFill(fill_type=\"solid\", fgColor=\"54FF9F\")\nws[\"A1\"].fill = fill\nwb.save(\"abc.xlsx\")\n```\n注：操作一次就执行一次`save()`方法，否则可能只保留最后一次的操作\n","slug":"2018-2018-08-25-python操作excel","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:01:36.000Z","comments":1,"photos":[],"link":"","_id":"cjp191u9z001nd3fowhknlcov","content":"<h2 id=\"一、加载表格\"><a href=\"#一、加载表格\" class=\"headerlink\" title=\"一、加载表格\"></a>一、加载表格</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb = openpyxl.load_workbook(<span class=\"string\">\"abc.xlsx\"</span>)<span class=\"comment\">#加载工作簿</span></span><br><span class=\"line\">ws = wb[<span class=\"string\">\"Sheet2\"</span>]<span class=\"comment\">#加载工作表</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、读取单元格数值\"><a href=\"#二、读取单元格数值\" class=\"headerlink\" title=\"二、读取单元格数值\"></a>二、读取单元格数值</h2><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws[<span class=\"string\">\"A1\"</span>].<span class=\"keyword\">value</span><span class=\"meta\">#读取A1单元格的值</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、单元格填充颜色\"><a href=\"#三、单元格填充颜色\" class=\"headerlink\" title=\"三、单元格填充颜色\"></a>三、单元格填充颜色</h2><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fill = PatternFill(fill_type=<span class=\"string\">\"solid\"</span>, fgColor=<span class=\"string\">\"54FF9F\"</span>)</span><br><span class=\"line\">ws[<span class=\"string\">\"A1\"</span>].fill = fill</span><br><span class=\"line\">wb.save(<span class=\"string\">\"abc.xlsx\"</span>)</span><br></pre></td></tr></table></figure>\n<p>注：操作一次就执行一次<code>save()</code>方法，否则可能只保留最后一次的操作</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、加载表格\"><a href=\"#一、加载表格\" class=\"headerlink\" title=\"一、加载表格\"></a>一、加载表格</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wb = openpyxl.load_workbook(<span class=\"string\">\"abc.xlsx\"</span>)<span class=\"comment\">#加载工作簿</span></span><br><span class=\"line\">ws = wb[<span class=\"string\">\"Sheet2\"</span>]<span class=\"comment\">#加载工作表</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、读取单元格数值\"><a href=\"#二、读取单元格数值\" class=\"headerlink\" title=\"二、读取单元格数值\"></a>二、读取单元格数值</h2><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws[<span class=\"string\">\"A1\"</span>].<span class=\"keyword\">value</span><span class=\"meta\">#读取A1单元格的值</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、单元格填充颜色\"><a href=\"#三、单元格填充颜色\" class=\"headerlink\" title=\"三、单元格填充颜色\"></a>三、单元格填充颜色</h2><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fill = PatternFill(fill_type=<span class=\"string\">\"solid\"</span>, fgColor=<span class=\"string\">\"54FF9F\"</span>)</span><br><span class=\"line\">ws[<span class=\"string\">\"A1\"</span>].fill = fill</span><br><span class=\"line\">wb.save(<span class=\"string\">\"abc.xlsx\"</span>)</span><br></pre></td></tr></table></figure>\n<p>注：操作一次就执行一次<code>save()</code>方法，否则可能只保留最后一次的操作</p>\n"},{"layout":"posts","title":"使用struts2的拦截器实现权限验证","_content":"应用场景：对于需要用户登录的网页进行身份验证，比如未登录不能浏览相关内容并跳转到登录页面。\n## 一、在struts.xml配置文件中定义拦截器\n```\n<package name=\"default\" extends=\"struts-default\">\n   <!-- 定义了一个名为authority的拦截器 -->\n   <interceptors>\n        <interceptor name=\"authority\" class=\"cn.wangsr.AuthorityInterceptor\"/>\n   </interceptors>\n</package>\n```\n## 二、在需要进行拦截的action中使用拦截器\n```\n<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n<interceptor-ref name=\"authority\"></interceptor-ref>\n```\n注：第一行为默认拦截器，如果不适用通过拦截器后将会丢失表单所提交数据。\n<!--more-->\n## 三、定义全局结果映射\n如果在多个action中使用了拦截器，可以定义一个全局结果映射来作为拦截器处理后的结果页。\n```\n<global-results>\n \t\t\t<result name=\"login\">/WEB-INF/contents/index.jsp</result>\n</global-results>\n```\n\n## 四、定义一个拦截器实现类\n```\npublic class AuthorityInterceptor extends AbstractInterceptor{\n\n\t@Override\n\tpublic String intercept(ActionInvocation invocation) throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tActionContext ctx = invocation.getInvocationContext();\n\t\tUser user = (User)ctx.getSession().get(\"user\");//在拦截器获取session中的值\n\n\t\tif(user!=null) {\n\t\t\treturn invocation.invoke();//继续执行其它拦截器或action\n\t\t}\n\t\tctx.put(\"timeout_tip\", \"请重新登录\");\n\t\treturn Action.LOGIN;//返回字符串所对应的result结果页\n\t}\n}\n```\n","source":"_posts/2018/2018-09-06-使用struts2的拦截器实现权限验证.md","raw":"---\nlayout: posts\ntitle: 使用struts2的拦截器实现权限验证\ncategories: Java学习笔记\ntags:\n    - Java\n    - struts2\n---\n应用场景：对于需要用户登录的网页进行身份验证，比如未登录不能浏览相关内容并跳转到登录页面。\n## 一、在struts.xml配置文件中定义拦截器\n```\n<package name=\"default\" extends=\"struts-default\">\n   <!-- 定义了一个名为authority的拦截器 -->\n   <interceptors>\n        <interceptor name=\"authority\" class=\"cn.wangsr.AuthorityInterceptor\"/>\n   </interceptors>\n</package>\n```\n## 二、在需要进行拦截的action中使用拦截器\n```\n<interceptor-ref name=\"defaultStack\"></interceptor-ref>\n<interceptor-ref name=\"authority\"></interceptor-ref>\n```\n注：第一行为默认拦截器，如果不适用通过拦截器后将会丢失表单所提交数据。\n<!--more-->\n## 三、定义全局结果映射\n如果在多个action中使用了拦截器，可以定义一个全局结果映射来作为拦截器处理后的结果页。\n```\n<global-results>\n \t\t\t<result name=\"login\">/WEB-INF/contents/index.jsp</result>\n</global-results>\n```\n\n## 四、定义一个拦截器实现类\n```\npublic class AuthorityInterceptor extends AbstractInterceptor{\n\n\t@Override\n\tpublic String intercept(ActionInvocation invocation) throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tActionContext ctx = invocation.getInvocationContext();\n\t\tUser user = (User)ctx.getSession().get(\"user\");//在拦截器获取session中的值\n\n\t\tif(user!=null) {\n\t\t\treturn invocation.invoke();//继续执行其它拦截器或action\n\t\t}\n\t\tctx.put(\"timeout_tip\", \"请重新登录\");\n\t\treturn Action.LOGIN;//返回字符串所对应的result结果页\n\t}\n}\n```\n","slug":"2018-2018-09-06-使用struts2的拦截器实现权限验证","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:01:14.000Z","comments":1,"photos":[],"link":"","_id":"cjp191ua0001qd3fozszjmm0m","content":"<p>应用场景：对于需要用户登录的网页进行身份验证，比如未登录不能浏览相关内容并跳转到登录页面。</p>\n<h2 id=\"一、在struts-xml配置文件中定义拦截器\"><a href=\"#一、在struts-xml配置文件中定义拦截器\" class=\"headerlink\" title=\"一、在struts.xml配置文件中定义拦截器\"></a>一、在struts.xml配置文件中定义拦截器</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 定义了一个名为authority的拦截器 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"authority\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.wangsr.AuthorityInterceptor\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、在需要进行拦截的action中使用拦截器\"><a href=\"#二、在需要进行拦截的action中使用拦截器\" class=\"headerlink\" title=\"二、在需要进行拦截的action中使用拦截器\"></a>二、在需要进行拦截的action中使用拦截器</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;interceptor-<span class=\"keyword\">ref</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;&lt;/interceptor-<span class=\"keyword\">ref</span>&gt;</span><br><span class=\"line\">&lt;interceptor-<span class=\"keyword\">ref</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"authority\"</span>&gt;&lt;/interceptor-<span class=\"keyword\">ref</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>注：第一行为默认拦截器，如果不适用通过拦截器后将会丢失表单所提交数据。<br><a id=\"more\"></a></p>\n<h2 id=\"三、定义全局结果映射\"><a href=\"#三、定义全局结果映射\" class=\"headerlink\" title=\"三、定义全局结果映射\"></a>三、定义全局结果映射</h2><p>如果在多个action中使用了拦截器，可以定义一个全局结果映射来作为拦截器处理后的结果页。<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">global</span>-results&gt;</span><br><span class=\"line\"> \t\t\t&lt;<span class=\"literal\">result</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"login\"</span>&gt;/WEB-INF/<span class=\"built_in\">contents</span>/index.jsp&lt;/<span class=\"literal\">result</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">global</span>-results&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、定义一个拦截器实现类\"><a href=\"#四、定义一个拦截器实现类\" class=\"headerlink\" title=\"四、定义一个拦截器实现类\"></a>四、定义一个拦截器实现类</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorityInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractInterceptor</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\tpublic <span class=\"type\">String</span> intercept(<span class=\"type\">ActionInvocation</span> invocation) <span class=\"keyword\">throws</span> <span class=\"type\">Exception</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"type\">ActionContext</span> ctx = invocation.getInvocationContext();</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> user = (<span class=\"type\">User</span>)ctx.getSession().get(<span class=\"string\">\"user\"</span>);<span class=\"comment\">//在拦截器获取session中的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(user!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> invocation.invoke();<span class=\"comment\">//继续执行其它拦截器或action</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tctx.put(<span class=\"string\">\"timeout_tip\"</span>, <span class=\"string\">\"请重新登录\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">Action</span>.<span class=\"type\">LOGIN</span>;<span class=\"comment\">//返回字符串所对应的result结果页</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>应用场景：对于需要用户登录的网页进行身份验证，比如未登录不能浏览相关内容并跳转到登录页面。</p>\n<h2 id=\"一、在struts-xml配置文件中定义拦截器\"><a href=\"#一、在struts-xml配置文件中定义拦截器\" class=\"headerlink\" title=\"一、在struts.xml配置文件中定义拦截器\"></a>一、在struts.xml配置文件中定义拦截器</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"default\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 定义了一个名为authority的拦截器 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">interceptors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">interceptor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"authority\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.wangsr.AuthorityInterceptor\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">interceptors</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、在需要进行拦截的action中使用拦截器\"><a href=\"#二、在需要进行拦截的action中使用拦截器\" class=\"headerlink\" title=\"二、在需要进行拦截的action中使用拦截器\"></a>二、在需要进行拦截的action中使用拦截器</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;interceptor-<span class=\"keyword\">ref</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"defaultStack\"</span>&gt;&lt;/interceptor-<span class=\"keyword\">ref</span>&gt;</span><br><span class=\"line\">&lt;interceptor-<span class=\"keyword\">ref</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"authority\"</span>&gt;&lt;/interceptor-<span class=\"keyword\">ref</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>注：第一行为默认拦截器，如果不适用通过拦截器后将会丢失表单所提交数据。<br>","more":"</p>\n<h2 id=\"三、定义全局结果映射\"><a href=\"#三、定义全局结果映射\" class=\"headerlink\" title=\"三、定义全局结果映射\"></a>三、定义全局结果映射</h2><p>如果在多个action中使用了拦截器，可以定义一个全局结果映射来作为拦截器处理后的结果页。<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">global</span>-results&gt;</span><br><span class=\"line\"> \t\t\t&lt;<span class=\"literal\">result</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"login\"</span>&gt;/WEB-INF/<span class=\"built_in\">contents</span>/index.jsp&lt;/<span class=\"literal\">result</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">global</span>-results&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四、定义一个拦截器实现类\"><a href=\"#四、定义一个拦截器实现类\" class=\"headerlink\" title=\"四、定义一个拦截器实现类\"></a>四、定义一个拦截器实现类</h2><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorityInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractInterceptor</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\tpublic <span class=\"type\">String</span> intercept(<span class=\"type\">ActionInvocation</span> invocation) <span class=\"keyword\">throws</span> <span class=\"type\">Exception</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"type\">ActionContext</span> ctx = invocation.getInvocationContext();</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> user = (<span class=\"type\">User</span>)ctx.getSession().get(<span class=\"string\">\"user\"</span>);<span class=\"comment\">//在拦截器获取session中的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(user!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> invocation.invoke();<span class=\"comment\">//继续执行其它拦截器或action</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tctx.put(<span class=\"string\">\"timeout_tip\"</span>, <span class=\"string\">\"请重新登录\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">Action</span>.<span class=\"type\">LOGIN</span>;<span class=\"comment\">//返回字符串所对应的result结果页</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"posts","title":"树莓派爬坑系列（二）配置WiFi热点","_content":"## 实现功能\n   使其它设备可以连接树莓派的热点，并实现上网。\n## 实现方式\n  基本上有两种方式：1、手动配置，2、使用开源库\n## 方式二的具体操作\n  使用GitHub开源库[https://github.com/oblique/create_ap](https://github.com/oblique/create_ap)来配置WiFi热点，\n  此种方式简单快捷。\n* 1、安装依赖\n```\nsudo apt-get install dnsmasq hostapd\n```\n<!--more-->\n* 2、\n```\ngit clone https://github.com/oblique/create_ap\ncd create_ap\nsudo make install\n```\n\n* 3、开启热点并设置无线和有线共享网络，设置后只要有线可以访问互联网连接热点的设备才能正常上网。\n```\nsudo create_ap wlan0 eth0 WiFi名称 WiFi密码\n```\n\n* ***设置后如果可以搜索到热点就ok了。\n* 3、设置开机启动\n```\nsudo nano /etc/rc.local\n```\n添加以下内容：\n```\nsudo create_ap wlan0 eth0 WiFi名称 WiFi密码\n```\n## 其它问题\n  * 1、使用时如果报错`Error: Failed to run hostapd, maybe a program is interfering`\n  尝试执行以下代码：\n```\nsudo service dhcpcd restart\n```\n  * 2、隐藏WiFi热点\n```\nsudo create_ap --hidden wlan0 eth0 WiFi名称 WiFi密码\n```\n","source":"_posts/2018/2018-09-16-树莓派爬坑系列（二）配置WiFi热点.md","raw":"---\nlayout: posts\ntitle: 树莓派爬坑系列（二）配置WiFi热点\ncategories: 树莓派爬坑系列\ntags:\n    - 树莓派\n    - WiFi热点\n---\n## 实现功能\n   使其它设备可以连接树莓派的热点，并实现上网。\n## 实现方式\n  基本上有两种方式：1、手动配置，2、使用开源库\n## 方式二的具体操作\n  使用GitHub开源库[https://github.com/oblique/create_ap](https://github.com/oblique/create_ap)来配置WiFi热点，\n  此种方式简单快捷。\n* 1、安装依赖\n```\nsudo apt-get install dnsmasq hostapd\n```\n<!--more-->\n* 2、\n```\ngit clone https://github.com/oblique/create_ap\ncd create_ap\nsudo make install\n```\n\n* 3、开启热点并设置无线和有线共享网络，设置后只要有线可以访问互联网连接热点的设备才能正常上网。\n```\nsudo create_ap wlan0 eth0 WiFi名称 WiFi密码\n```\n\n* ***设置后如果可以搜索到热点就ok了。\n* 3、设置开机启动\n```\nsudo nano /etc/rc.local\n```\n添加以下内容：\n```\nsudo create_ap wlan0 eth0 WiFi名称 WiFi密码\n```\n## 其它问题\n  * 1、使用时如果报错`Error: Failed to run hostapd, maybe a program is interfering`\n  尝试执行以下代码：\n```\nsudo service dhcpcd restart\n```\n  * 2、隐藏WiFi热点\n```\nsudo create_ap --hidden wlan0 eth0 WiFi名称 WiFi密码\n```\n","slug":"2018-2018-09-16-树莓派爬坑系列（二）配置WiFi热点","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T01:13:28.000Z","comments":1,"photos":[],"link":"","_id":"cjp191ua2001td3foozeqzjk0","content":"<h2 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h2><p>   使其它设备可以连接树莓派的热点，并实现上网。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>  基本上有两种方式：1、手动配置，2、使用开源库</p>\n<h2 id=\"方式二的具体操作\"><a href=\"#方式二的具体操作\" class=\"headerlink\" title=\"方式二的具体操作\"></a>方式二的具体操作</h2><p>  使用GitHub开源库<a href=\"https://github.com/oblique/create_ap\" target=\"_blank\" rel=\"noopener\">https://github.com/oblique/create_ap</a>来配置WiFi热点，<br>  此种方式简单快捷。</p>\n<ul>\n<li>1、安装依赖<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install dnsmasq hostapd</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>2、</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/oblique/create_ap</span><br><span class=\"line\"><span class=\"keyword\">cd</span> create_ap</span><br><span class=\"line\">sudo <span class=\"keyword\">make</span> install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、开启热点并设置无线和有线共享网络，设置后只要有线可以访问互联网连接热点的设备才能正常上网。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo create_ap wlan0 eth0 <span class=\"built_in\">WiFi</span>名称 <span class=\"built_in\">WiFi</span>密码</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>***设置后如果可以搜索到热点就ok了。</p>\n</li>\n<li>3、设置开机启动<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/rc.<span class=\"keyword\">local</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>添加以下内容：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo create_ap wlan0 eth0 <span class=\"built_in\">WiFi</span>名称 <span class=\"built_in\">WiFi</span>密码</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其它问题\"><a href=\"#其它问题\" class=\"headerlink\" title=\"其它问题\"></a>其它问题</h2><ul>\n<li><p>1、使用时如果报错<code>Error: Failed to run hostapd, maybe a program is interfering</code><br>尝试执行以下代码：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo<span class=\"built_in\"> service </span>dhcpcd restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、隐藏WiFi热点</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo create_ap --hidden wlan0 eth0 <span class=\"built_in\">WiFi</span>名称 <span class=\"built_in\">WiFi</span>密码</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h2><p>   使其它设备可以连接树莓派的热点，并实现上网。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>  基本上有两种方式：1、手动配置，2、使用开源库</p>\n<h2 id=\"方式二的具体操作\"><a href=\"#方式二的具体操作\" class=\"headerlink\" title=\"方式二的具体操作\"></a>方式二的具体操作</h2><p>  使用GitHub开源库<a href=\"https://github.com/oblique/create_ap\" target=\"_blank\" rel=\"noopener\">https://github.com/oblique/create_ap</a>来配置WiFi热点，<br>  此种方式简单快捷。</p>\n<ul>\n<li>1、安装依赖<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install dnsmasq hostapd</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>2、</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/oblique/create_ap</span><br><span class=\"line\"><span class=\"keyword\">cd</span> create_ap</span><br><span class=\"line\">sudo <span class=\"keyword\">make</span> install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、开启热点并设置无线和有线共享网络，设置后只要有线可以访问互联网连接热点的设备才能正常上网。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo create_ap wlan0 eth0 <span class=\"built_in\">WiFi</span>名称 <span class=\"built_in\">WiFi</span>密码</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>***设置后如果可以搜索到热点就ok了。</p>\n</li>\n<li>3、设置开机启动<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/rc.<span class=\"keyword\">local</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>添加以下内容：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo create_ap wlan0 eth0 <span class=\"built_in\">WiFi</span>名称 <span class=\"built_in\">WiFi</span>密码</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其它问题\"><a href=\"#其它问题\" class=\"headerlink\" title=\"其它问题\"></a>其它问题</h2><ul>\n<li><p>1、使用时如果报错<code>Error: Failed to run hostapd, maybe a program is interfering</code><br>尝试执行以下代码：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo<span class=\"built_in\"> service </span>dhcpcd restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、隐藏WiFi热点</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo create_ap --hidden wlan0 eth0 <span class=\"built_in\">WiFi</span>名称 <span class=\"built_in\">WiFi</span>密码</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"layout":"posts","title":"树莓派爬坑系列（一）电脑连接树莓派","_content":"电脑连接树莓派有以下几种方式：\n* 1、ssh连接\n* 2、Windows远程桌面连接\n* 3、VNC连接\n\n不管是以上哪一种都需要先知道树莓派ip。\n## 树莓派IP的获取\n  * 第一种方式：与电脑连接在同一个路由器或者wifi下。然后通过路由器查看树莓派IP（带屏幕的可在树莓派上查看）。\n  前提是在该网络中没有对一些端口（如3389、22）屏蔽，这种方法才适用。\n  * 第二种方式：网线直连。用网线直接连接树莓派和电脑，将电脑的无线的网络分享到以太网还能实现访问互联网。\n  命令行使用`arp -a`来查看树莓派ip,其IP在192.168.137.1接口下，一般为第一个。如图：\n  ![arp -a](/images/arp.png)\n  注意：使用网线直连，默认树莓派为自动获取ip,也就意味着，ip地址是动态变化的。可以使用以下方法设置静态ip:\n  * 1、第一种方式：树莓派图形界面进行配置网络参数\n  * 2、第二种方式：编辑配置文件\n```\nsudo vim /etc/dhcpcd.conf\n```\n<!-- more -->\n在末尾添加以下内容：\n```\ninterface eth0\ninform 192.168.137.2\nstatic routers=192.168.1.1\n```\n注意自己的网卡名字是否一致。\n\n## 获取IP后\n  获取IP后就可以连接了，但需要注意以下几点。\n* 1、ssh连接时，使用以下命令：\n```\nssh pi@host_ip\n```\n其中host_ip为树莓派IP，如果是新装系统，需在SD卡根目录新建一个ssh的文件(无后缀)\n* 2、对于Windows远程桌面连接：需要在树莓派中先安装依赖：\n```\nsudo apt-get install xrdp;\n```\n* 3、对于VNC连接需要在设置中打开允许VNC连接：\n```\nsudo raspi-config\n```\n![vnc1](/images/vnc1.png)\n进入选择vnc ENABLE 就ok.\n","source":"_posts/2018/2018-09-16-树莓派爬坑系列（一）电脑连接树莓派.md","raw":"---\nlayout: posts\ntitle: 树莓派爬坑系列（一）电脑连接树莓派\ncategories: 树莓派爬坑系列\ntags:\n    - 树莓派\n    - 网线直连树莓派\n---\n电脑连接树莓派有以下几种方式：\n* 1、ssh连接\n* 2、Windows远程桌面连接\n* 3、VNC连接\n\n不管是以上哪一种都需要先知道树莓派ip。\n## 树莓派IP的获取\n  * 第一种方式：与电脑连接在同一个路由器或者wifi下。然后通过路由器查看树莓派IP（带屏幕的可在树莓派上查看）。\n  前提是在该网络中没有对一些端口（如3389、22）屏蔽，这种方法才适用。\n  * 第二种方式：网线直连。用网线直接连接树莓派和电脑，将电脑的无线的网络分享到以太网还能实现访问互联网。\n  命令行使用`arp -a`来查看树莓派ip,其IP在192.168.137.1接口下，一般为第一个。如图：\n  ![arp -a](/images/arp.png)\n  注意：使用网线直连，默认树莓派为自动获取ip,也就意味着，ip地址是动态变化的。可以使用以下方法设置静态ip:\n  * 1、第一种方式：树莓派图形界面进行配置网络参数\n  * 2、第二种方式：编辑配置文件\n```\nsudo vim /etc/dhcpcd.conf\n```\n<!-- more -->\n在末尾添加以下内容：\n```\ninterface eth0\ninform 192.168.137.2\nstatic routers=192.168.1.1\n```\n注意自己的网卡名字是否一致。\n\n## 获取IP后\n  获取IP后就可以连接了，但需要注意以下几点。\n* 1、ssh连接时，使用以下命令：\n```\nssh pi@host_ip\n```\n其中host_ip为树莓派IP，如果是新装系统，需在SD卡根目录新建一个ssh的文件(无后缀)\n* 2、对于Windows远程桌面连接：需要在树莓派中先安装依赖：\n```\nsudo apt-get install xrdp;\n```\n* 3、对于VNC连接需要在设置中打开允许VNC连接：\n```\nsudo raspi-config\n```\n![vnc1](/images/vnc1.png)\n进入选择vnc ENABLE 就ok.\n","slug":"2018-2018-09-16-树莓派爬坑系列（一）电脑连接树莓派","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T08:38:20.000Z","comments":1,"photos":[],"link":"","_id":"cjp191ua3001wd3fojfiqa50i","content":"<p>电脑连接树莓派有以下几种方式：</p>\n<ul>\n<li>1、ssh连接</li>\n<li>2、Windows远程桌面连接</li>\n<li>3、VNC连接</li>\n</ul>\n<p>不管是以上哪一种都需要先知道树莓派ip。</p>\n<h2 id=\"树莓派IP的获取\"><a href=\"#树莓派IP的获取\" class=\"headerlink\" title=\"树莓派IP的获取\"></a>树莓派IP的获取</h2><ul>\n<li>第一种方式：与电脑连接在同一个路由器或者wifi下。然后通过路由器查看树莓派IP（带屏幕的可在树莓派上查看）。<br>前提是在该网络中没有对一些端口（如3389、22）屏蔽，这种方法才适用。</li>\n<li>第二种方式：网线直连。用网线直接连接树莓派和电脑，将电脑的无线的网络分享到以太网还能实现访问互联网。<br>命令行使用<code>arp -a</code>来查看树莓派ip,其IP在192.168.137.1接口下，一般为第一个。如图：<br><img src=\"/images/arp.png\" alt=\"arp -a\"><br>注意：使用网线直连，默认树莓派为自动获取ip,也就意味着，ip地址是动态变化的。可以使用以下方法设置静态ip:</li>\n<li>1、第一种方式：树莓派图形界面进行配置网络参数</li>\n<li>2、第二种方式：编辑配置文件<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"keyword\">vim</span> /etc/dhcpcd.<span class=\"keyword\">conf</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p>在末尾添加以下内容：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface eth0</span><br><span class=\"line\">inform <span class=\"number\">192.168</span><span class=\"number\">.137</span><span class=\"number\">.2</span></span><br><span class=\"line\">static routers=<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure></p>\n<p>注意自己的网卡名字是否一致。</p>\n<h2 id=\"获取IP后\"><a href=\"#获取IP后\" class=\"headerlink\" title=\"获取IP后\"></a>获取IP后</h2><p>  获取IP后就可以连接了，但需要注意以下几点。</p>\n<ul>\n<li>1、ssh连接时，使用以下命令：<figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"literal\">pi</span><span class=\"meta\">@host_ip</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中host_ip为树莓派IP，如果是新装系统，需在SD卡根目录新建一个ssh的文件(无后缀)</p>\n<ul>\n<li><p>2、对于Windows远程桌面连接：需要在树莓派中先安装依赖：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get <span class=\"keyword\">install </span>xrdp<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、对于VNC连接需要在设置中打开允许VNC连接：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-<span class=\"built_in\">config</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/vnc1.png\" alt=\"vnc1\"><br>进入选择vnc ENABLE 就ok.</p>\n","site":{"data":{}},"excerpt":"<p>电脑连接树莓派有以下几种方式：</p>\n<ul>\n<li>1、ssh连接</li>\n<li>2、Windows远程桌面连接</li>\n<li>3、VNC连接</li>\n</ul>\n<p>不管是以上哪一种都需要先知道树莓派ip。</p>\n<h2 id=\"树莓派IP的获取\"><a href=\"#树莓派IP的获取\" class=\"headerlink\" title=\"树莓派IP的获取\"></a>树莓派IP的获取</h2><ul>\n<li>第一种方式：与电脑连接在同一个路由器或者wifi下。然后通过路由器查看树莓派IP（带屏幕的可在树莓派上查看）。<br>前提是在该网络中没有对一些端口（如3389、22）屏蔽，这种方法才适用。</li>\n<li>第二种方式：网线直连。用网线直接连接树莓派和电脑，将电脑的无线的网络分享到以太网还能实现访问互联网。<br>命令行使用<code>arp -a</code>来查看树莓派ip,其IP在192.168.137.1接口下，一般为第一个。如图：<br><img src=\"/images/arp.png\" alt=\"arp -a\"><br>注意：使用网线直连，默认树莓派为自动获取ip,也就意味着，ip地址是动态变化的。可以使用以下方法设置静态ip:</li>\n<li>1、第一种方式：树莓派图形界面进行配置网络参数</li>\n<li>2、第二种方式：编辑配置文件<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"keyword\">vim</span> /etc/dhcpcd.<span class=\"keyword\">conf</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<p>在末尾添加以下内容：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface eth0</span><br><span class=\"line\">inform <span class=\"number\">192.168</span><span class=\"number\">.137</span><span class=\"number\">.2</span></span><br><span class=\"line\">static routers=<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure></p>\n<p>注意自己的网卡名字是否一致。</p>\n<h2 id=\"获取IP后\"><a href=\"#获取IP后\" class=\"headerlink\" title=\"获取IP后\"></a>获取IP后</h2><p>  获取IP后就可以连接了，但需要注意以下几点。</p>\n<ul>\n<li>1、ssh连接时，使用以下命令：<figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"literal\">pi</span><span class=\"meta\">@host_ip</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中host_ip为树莓派IP，如果是新装系统，需在SD卡根目录新建一个ssh的文件(无后缀)</p>\n<ul>\n<li><p>2、对于Windows远程桌面连接：需要在树莓派中先安装依赖：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get <span class=\"keyword\">install </span>xrdp<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、对于VNC连接需要在设置中打开允许VNC连接：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo raspi-<span class=\"built_in\">config</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"/images/vnc1.png\" alt=\"vnc1\"><br>进入选择vnc ENABLE 就ok.</p>"},{"layout":"posts","title":"树莓派爬坑系列（三）使用USB录音设备进行录音","_content":"## 说明\n  树莓派本身不带录音功能，即使连接有麦的耳机也不ok。所以需要另外购买麦克风设备\n  可以是下面这种：\n  ![麦克风](/images/micro.jpg)\n\n## 第一步【连接】\n    将麦克风插到树莓派上。\n\n## 第二步【配置】\n  树莓派没有设置默认的录音设备，而且我们需要使用不同的声卡进行录音和播放。\n  所以需要进行配置。否则就可能出现下面这种报错：  \n```\n  raspberry rec FAIL formats: can't open input `default': snd_pcm_open error: No such file or directory\n```\n首先进入配置文件：\n```\nnano ~/.asoundrc\n```\n<!--more-->\n把配置文件替换为以下内容：\n```\npcm.!default {\ntype asym\n    playback.pcm {\n        type plug\n        slave.pcm \"hw:0,0\"\n      }\ncapture.pcm {\n    type plug\n    slave.pcm \"hw:1,0\"\n    }\n}\n```\n配置的意思为：输入使用声卡1（即USB声卡），输出使用板载的声卡0（这样耳机才能有声音）\n\n## 第三步【使用】\n录音：\n```\nrec temp.wav\n```\n播放：\n```\nmplayer temp.wav\n```\n其中录音、播放命令可视自己喜好选择\n\n## 其它\n* 1、查看播放设备：\n```\naplay -l\n```\n* 2、查看录音设备\n```\narecord -l\n```\n","source":"_posts/2018/2018-09-19-树莓派爬坑系列（三）使用USB麦克风进行录音.md","raw":"---\nlayout: posts\ntitle: 树莓派爬坑系列（三）使用USB录音设备进行录音\ncategories: 树莓派爬坑系列\ntags:\n  - 树莓派 \n---\n## 说明\n  树莓派本身不带录音功能，即使连接有麦的耳机也不ok。所以需要另外购买麦克风设备\n  可以是下面这种：\n  ![麦克风](/images/micro.jpg)\n\n## 第一步【连接】\n    将麦克风插到树莓派上。\n\n## 第二步【配置】\n  树莓派没有设置默认的录音设备，而且我们需要使用不同的声卡进行录音和播放。\n  所以需要进行配置。否则就可能出现下面这种报错：  \n```\n  raspberry rec FAIL formats: can't open input `default': snd_pcm_open error: No such file or directory\n```\n首先进入配置文件：\n```\nnano ~/.asoundrc\n```\n<!--more-->\n把配置文件替换为以下内容：\n```\npcm.!default {\ntype asym\n    playback.pcm {\n        type plug\n        slave.pcm \"hw:0,0\"\n      }\ncapture.pcm {\n    type plug\n    slave.pcm \"hw:1,0\"\n    }\n}\n```\n配置的意思为：输入使用声卡1（即USB声卡），输出使用板载的声卡0（这样耳机才能有声音）\n\n## 第三步【使用】\n录音：\n```\nrec temp.wav\n```\n播放：\n```\nmplayer temp.wav\n```\n其中录音、播放命令可视自己喜好选择\n\n## 其它\n* 1、查看播放设备：\n```\naplay -l\n```\n* 2、查看录音设备\n```\narecord -l\n```\n","slug":"2018-2018-09-19-树莓派爬坑系列（三）使用USB麦克风进行录音","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T07:47:36.000Z","comments":1,"photos":[],"link":"","_id":"cjp191ua4001zd3fozk3dg3vh","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>  树莓派本身不带录音功能，即使连接有麦的耳机也不ok。所以需要另外购买麦克风设备<br>  可以是下面这种：<br>  <img src=\"/images/micro.jpg\" alt=\"麦克风\"></p>\n<h2 id=\"第一步【连接】\"><a href=\"#第一步【连接】\" class=\"headerlink\" title=\"第一步【连接】\"></a>第一步【连接】</h2><pre><code>将麦克风插到树莓派上。\n</code></pre><h2 id=\"第二步【配置】\"><a href=\"#第二步【配置】\" class=\"headerlink\" title=\"第二步【配置】\"></a>第二步【配置】</h2><p>  树莓派没有设置默认的录音设备，而且我们需要使用不同的声卡进行录音和播放。<br>  所以需要进行配置。否则就可能出现下面这种报错：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raspberry rec FAIL formats: can't <span class=\"keyword\">open</span> <span class=\"keyword\">input</span> <span class=\"symbol\">`default'</span>: snd_pcm_open <span class=\"keyword\">error</span>: <span class=\"keyword\">No</span> such <span class=\"keyword\">file</span> or directory</span><br></pre></td></tr></table></figure></p>\n<p>首先进入配置文件：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~<span class=\"string\">/.asoundrc</span></span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>把配置文件替换为以下内容：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcm.!default &#123;</span><br><span class=\"line\">type asym</span><br><span class=\"line\">    playback.pcm &#123;</span><br><span class=\"line\">       <span class=\"built_in\"> type </span>plug</span><br><span class=\"line\">        slave.pcm <span class=\"string\">\"hw:0,0\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">capture.pcm &#123;</span><br><span class=\"line\">   <span class=\"built_in\"> type </span>plug</span><br><span class=\"line\">    slave.pcm <span class=\"string\">\"hw:1,0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置的意思为：输入使用声卡1（即USB声卡），输出使用板载的声卡0（这样耳机才能有声音）</p>\n<h2 id=\"第三步【使用】\"><a href=\"#第三步【使用】\" class=\"headerlink\" title=\"第三步【使用】\"></a>第三步【使用】</h2><p>录音：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">rec</span> <span class=\"selector-tag\">temp</span><span class=\"selector-class\">.wav</span></span><br></pre></td></tr></table></figure></p>\n<p>播放：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mplayer</span> <span class=\"selector-tag\">temp</span><span class=\"selector-class\">.wav</span></span><br></pre></td></tr></table></figure></p>\n<p>其中录音、播放命令可视自己喜好选择</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li><p>1、查看播放设备：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">aplay -l</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、查看录音设备</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">arecord -l</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>  树莓派本身不带录音功能，即使连接有麦的耳机也不ok。所以需要另外购买麦克风设备<br>  可以是下面这种：<br>  <img src=\"/images/micro.jpg\" alt=\"麦克风\"></p>\n<h2 id=\"第一步【连接】\"><a href=\"#第一步【连接】\" class=\"headerlink\" title=\"第一步【连接】\"></a>第一步【连接】</h2><pre><code>将麦克风插到树莓派上。\n</code></pre><h2 id=\"第二步【配置】\"><a href=\"#第二步【配置】\" class=\"headerlink\" title=\"第二步【配置】\"></a>第二步【配置】</h2><p>  树莓派没有设置默认的录音设备，而且我们需要使用不同的声卡进行录音和播放。<br>  所以需要进行配置。否则就可能出现下面这种报错：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">raspberry rec FAIL formats: can't <span class=\"keyword\">open</span> <span class=\"keyword\">input</span> <span class=\"symbol\">`default'</span>: snd_pcm_open <span class=\"keyword\">error</span>: <span class=\"keyword\">No</span> such <span class=\"keyword\">file</span> or directory</span><br></pre></td></tr></table></figure></p>\n<p>首先进入配置文件：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~<span class=\"string\">/.asoundrc</span></span><br></pre></td></tr></table></figure></p>","more":"<p>把配置文件替换为以下内容：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pcm.!default &#123;</span><br><span class=\"line\">type asym</span><br><span class=\"line\">    playback.pcm &#123;</span><br><span class=\"line\">       <span class=\"built_in\"> type </span>plug</span><br><span class=\"line\">        slave.pcm <span class=\"string\">\"hw:0,0\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">capture.pcm &#123;</span><br><span class=\"line\">   <span class=\"built_in\"> type </span>plug</span><br><span class=\"line\">    slave.pcm <span class=\"string\">\"hw:1,0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置的意思为：输入使用声卡1（即USB声卡），输出使用板载的声卡0（这样耳机才能有声音）</p>\n<h2 id=\"第三步【使用】\"><a href=\"#第三步【使用】\" class=\"headerlink\" title=\"第三步【使用】\"></a>第三步【使用】</h2><p>录音：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">rec</span> <span class=\"selector-tag\">temp</span><span class=\"selector-class\">.wav</span></span><br></pre></td></tr></table></figure></p>\n<p>播放：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mplayer</span> <span class=\"selector-tag\">temp</span><span class=\"selector-class\">.wav</span></span><br></pre></td></tr></table></figure></p>\n<p>其中录音、播放命令可视自己喜好选择</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li><p>1、查看播放设备：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">aplay -l</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、查看录音设备</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">arecord -l</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"layout":"posts","title":"树莓派爬坑系列（四）安装浏览器驱动","_content":"使用树莓派做爬虫或一些自动化测试时难免需要安装浏览器驱动。\n树莓派原装系统带的浏览器为Chromium,是谷歌浏览器的一个开源版本。但用正常的chromedeiver却\n不能驱动，需要使用[chromium-chromedriver](https://launchpad.net/ubuntu/xenial/arm64/chromium-chromedriver)来驱动Chromium。\n## 一、下载相应版本的[chromium-chromedriver](https://launchpad.net/ubuntu/xenial/arm64/chromium-chromedriver)\n\n## 二、执行安装\n```\nsudo dpkg -i chromium-chromedriver_65.0.3325.181-0ubuntu0.14.04.1_armhf.deb\n```\n注意安装后在/usr/lib/chromium-chromedriver下会多一个chromedriver文件\n\n## 三、编写代码\n注意驱动路径\n```\nfrom selenium import webdriver\nbrowser = webdriver.Chrome(executable_path=\"/usr/lib/chromium-browser/chromedriver\")\nbrowser.get(\"http://www.kugou.com/\")\n```\n","source":"_posts/2018/2018-09-30-树莓派爬坑系列（四）安装浏览器驱动.md","raw":"---\nlayout: posts\ntitle: 树莓派爬坑系列（四）安装浏览器驱动\ncategories: 树莓派爬坑系列\ntags:\n    - 树莓派 \n    - chromium-chromedriver\n---\n使用树莓派做爬虫或一些自动化测试时难免需要安装浏览器驱动。\n树莓派原装系统带的浏览器为Chromium,是谷歌浏览器的一个开源版本。但用正常的chromedeiver却\n不能驱动，需要使用[chromium-chromedriver](https://launchpad.net/ubuntu/xenial/arm64/chromium-chromedriver)来驱动Chromium。\n## 一、下载相应版本的[chromium-chromedriver](https://launchpad.net/ubuntu/xenial/arm64/chromium-chromedriver)\n\n## 二、执行安装\n```\nsudo dpkg -i chromium-chromedriver_65.0.3325.181-0ubuntu0.14.04.1_armhf.deb\n```\n注意安装后在/usr/lib/chromium-chromedriver下会多一个chromedriver文件\n\n## 三、编写代码\n注意驱动路径\n```\nfrom selenium import webdriver\nbrowser = webdriver.Chrome(executable_path=\"/usr/lib/chromium-browser/chromedriver\")\nbrowser.get(\"http://www.kugou.com/\")\n```\n","slug":"2018-2018-09-30-树莓派爬坑系列（四）安装浏览器驱动","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T00:59:20.000Z","comments":1,"photos":[],"link":"","_id":"cjp191ua60022d3fouymn42co","content":"<p>使用树莓派做爬虫或一些自动化测试时难免需要安装浏览器驱动。<br>树莓派原装系统带的浏览器为Chromium,是谷歌浏览器的一个开源版本。但用正常的chromedeiver却<br>不能驱动，需要使用<a href=\"https://launchpad.net/ubuntu/xenial/arm64/chromium-chromedriver\" target=\"_blank\" rel=\"noopener\">chromium-chromedriver</a>来驱动Chromium。</p>\n<h2 id=\"一、下载相应版本的chromium-chromedriver\"><a href=\"#一、下载相应版本的chromium-chromedriver\" class=\"headerlink\" title=\"一、下载相应版本的chromium-chromedriver\"></a>一、下载相应版本的<a href=\"https://launchpad.net/ubuntu/xenial/arm64/chromium-chromedriver\" target=\"_blank\" rel=\"noopener\">chromium-chromedriver</a></h2><h2 id=\"二、执行安装\"><a href=\"#二、执行安装\" class=\"headerlink\" title=\"二、执行安装\"></a>二、执行安装</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">dpkg</span> <span class=\"selector-tag\">-i</span> <span class=\"selector-tag\">chromium-chromedriver_65</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.3325</span><span class=\"selector-class\">.181-0ubuntu0</span><span class=\"selector-class\">.14</span><span class=\"selector-class\">.04</span><span class=\"selector-class\">.1_armhf</span><span class=\"selector-class\">.deb</span></span><br></pre></td></tr></table></figure>\n<p>注意安装后在/usr/lib/chromium-chromedriver下会多一个chromedriver文件</p>\n<h2 id=\"三、编写代码\"><a href=\"#三、编写代码\" class=\"headerlink\" title=\"三、编写代码\"></a>三、编写代码</h2><p>注意驱动路径<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium import webdriver</span><br><span class=\"line\">browser = webdriver.Chrome(<span class=\"attribute\">executable_path</span>=<span class=\"string\">\"/usr/lib/chromium-browser/chromedriver\"</span>)</span><br><span class=\"line\">browser.<span class=\"builtin-name\">get</span>(<span class=\"string\">\"http://www.kugou.com/\"</span>)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用树莓派做爬虫或一些自动化测试时难免需要安装浏览器驱动。<br>树莓派原装系统带的浏览器为Chromium,是谷歌浏览器的一个开源版本。但用正常的chromedeiver却<br>不能驱动，需要使用<a href=\"https://launchpad.net/ubuntu/xenial/arm64/chromium-chromedriver\" target=\"_blank\" rel=\"noopener\">chromium-chromedriver</a>来驱动Chromium。</p>\n<h2 id=\"一、下载相应版本的chromium-chromedriver\"><a href=\"#一、下载相应版本的chromium-chromedriver\" class=\"headerlink\" title=\"一、下载相应版本的chromium-chromedriver\"></a>一、下载相应版本的<a href=\"https://launchpad.net/ubuntu/xenial/arm64/chromium-chromedriver\" target=\"_blank\" rel=\"noopener\">chromium-chromedriver</a></h2><h2 id=\"二、执行安装\"><a href=\"#二、执行安装\" class=\"headerlink\" title=\"二、执行安装\"></a>二、执行安装</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">dpkg</span> <span class=\"selector-tag\">-i</span> <span class=\"selector-tag\">chromium-chromedriver_65</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.3325</span><span class=\"selector-class\">.181-0ubuntu0</span><span class=\"selector-class\">.14</span><span class=\"selector-class\">.04</span><span class=\"selector-class\">.1_armhf</span><span class=\"selector-class\">.deb</span></span><br></pre></td></tr></table></figure>\n<p>注意安装后在/usr/lib/chromium-chromedriver下会多一个chromedriver文件</p>\n<h2 id=\"三、编写代码\"><a href=\"#三、编写代码\" class=\"headerlink\" title=\"三、编写代码\"></a>三、编写代码</h2><p>注意驱动路径<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium import webdriver</span><br><span class=\"line\">browser = webdriver.Chrome(<span class=\"attribute\">executable_path</span>=<span class=\"string\">\"/usr/lib/chromium-browser/chromedriver\"</span>)</span><br><span class=\"line\">browser.<span class=\"builtin-name\">get</span>(<span class=\"string\">\"http://www.kugou.com/\"</span>)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Django框架的快速入门笔记","_content":"## 安装Django\n```\npip install django\n```\n## 创建项目\n```\ndjango-admin startproject mysite\n```\n<!-- more-->\n将会生成以下目录文件：\n```\nmysite/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n```\n## 创建应用\n 进入manage.py 所在的目录下，然后运行这行命令来创建一个应用：\n```\npython manage.py startapp polls\n```\n\n生成目录如下：\n```\npolls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py\n```\n## 编写视图控制函数\n在`views.py`添加以下内容：\n```\nfrom django.shortcuts import get_object_or_404, render\ndef index(request):\n    return render(request, 'polls/index.html')\ndef results(request):\n    name = request.POST['name']\n    return render(request, 'polls/results.html',{'name':name})\n```\n**几点理解：**\n* 1、`views.py`里的一个函数对应一个请求控制。类似于Java web中struts2的作用。\n* 2、通过return `render()`函数可以跳转到相应的html页面并且把参数转发到该页面。\n* 3、可直接通过`return HttpResponse(\"info\")`来返回一个response。\n\n## 配置路由\n配置路由是为了让浏览者输入相应的链接时可以访问相应的内容。\n*  在`mysite/urls.py`下的路由插入一条`include()`如下：\n```\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('polls/', include('polls.urls')),\n    path('admin/', admin.site.urls),\n]\n```\n这一部分的意思为：当匹配到`polls/`则截断匹配的URL部分，并把剩余的字符串发送到\n`polls.urls`\n\n* 在`polls/urls.py`中路由编辑如下：\n```\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path('index', views.index, name='index'),\n    path('results/', views.results, name='results'),\n]\n```\n这一部分的意思为：上一个路由截断剩余的部分如果匹配到`index`则跳转到`views.py`下的`index`函数。\n## 编写视图\n在`polls`目录下新建一个`templates`的文件夹，在`templates`下再建一个`polls`文件夹，然后将html文件放在该文件夹下。比如新建一个`index.html`文件。\n路径如下：\n\n```\npolls/\n    __init__.py\n    admin.py\n    apps.py\n    templates/\n        polls/\n            index.html\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py\n```\nindex.html内容如下：\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form action=\"/polls/results\" method=\"post\">\n    <!--此处有坑--->\n    {% csrf_token %}\n    <input name=\"name\" type=\"text\">\n    <input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n```\n\n此处action的链接可替换为：\n```\n{% url 'results' %}\n```\nresults为路由中的name。\n同理再新建一个`results.html`\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    {{name}}\n</body>\n</html>\n```\n\n**html内容注意地方:**\n* 1、`{% raw %}{% csrf_token %}{% endraw %}`必写，否则无法提交表单。这个标签将会自动生成一个`input`\n标签，包含name和value属性，作用是为了校验。\n到此一个基本的web框架就形成了。\n## 启动网站服务\n回到网站根目录，执行如下命令：\n```\npython manage.py runserver\n```\n## 其它几点问题\n### 获取表单数据\n* 获取post请求的数据：\n在`views.py`的函数中使用以下方法获得：\n```\nname = request.POST['name']\n```\n* `views.py`函数里的参数传到`html`中：\nrender参数加一字典\n```\nreturn render(request, 'polls/results.html',{'name':name})\n```\n* `html`页面获取响应的参数：\n使用花双括号，里面变量名即render参数字典的key\n```\n{{name}}\n```\n* 获取POST上传的blob数据\n```\nfile = request.FILES.get(\"file\")\ndefault_storage.save(\"./temp.wav\",ContentFile(file.read()))\n```\n`save`的第一个参数为路径及名字，第二个参数`ContentFile()`为要写入的内容。\n### 让其他人可以访问Django应用\n* 开服务时用以下命令\n```\npython manage.py runserver 0.0.0.0:8000\n```\n* `settings.py`中`ALLOWED_HOSTS`设置如下：\n```\nALLOWED_HOSTS = ['*',]\n```\n* 打开电脑的8000端口，设置入站规则即可。\nwindows设置如图：\n![windows设置防火墙](/images/defender.png)\n**三步缺一不可**\n### Django runserver配置https\n* pip命令安装以下包\n```\npip install django-extensions\npip install django-werkzeug-debugger-runserver\npip install pyOpenSSL\n```\n\n* 在`settings.py`加入以下两项\n```\n'werkzeug_debugger_runserver',\n'django_extensions',\n```\n* 用以下命令开启服务\n```\npython manage.py runserver_plus --cert server.crt 0:8000\n```\n## 总结\nDjango框架整体的运行流程如图：\n![Django整体的运行流程](/images/django.jpg)\n\n## 参考链接\nDjango中文官方文档\n[https://docs.djangoproject.com/zh-hans/2.1/]https://docs.djangoproject.com/zh-hans/2.1/\n","source":"_posts/2018/2018-10-06-Django框架的快速入门笔记.md","raw":"---\ntitle: Django框架的快速入门笔记\ntags:\n  - python\n  - Django\ncategories: python学习笔记\n---\n## 安装Django\n```\npip install django\n```\n## 创建项目\n```\ndjango-admin startproject mysite\n```\n<!-- more-->\n将会生成以下目录文件：\n```\nmysite/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n```\n## 创建应用\n 进入manage.py 所在的目录下，然后运行这行命令来创建一个应用：\n```\npython manage.py startapp polls\n```\n\n生成目录如下：\n```\npolls/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py\n```\n## 编写视图控制函数\n在`views.py`添加以下内容：\n```\nfrom django.shortcuts import get_object_or_404, render\ndef index(request):\n    return render(request, 'polls/index.html')\ndef results(request):\n    name = request.POST['name']\n    return render(request, 'polls/results.html',{'name':name})\n```\n**几点理解：**\n* 1、`views.py`里的一个函数对应一个请求控制。类似于Java web中struts2的作用。\n* 2、通过return `render()`函数可以跳转到相应的html页面并且把参数转发到该页面。\n* 3、可直接通过`return HttpResponse(\"info\")`来返回一个response。\n\n## 配置路由\n配置路由是为了让浏览者输入相应的链接时可以访问相应的内容。\n*  在`mysite/urls.py`下的路由插入一条`include()`如下：\n```\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('polls/', include('polls.urls')),\n    path('admin/', admin.site.urls),\n]\n```\n这一部分的意思为：当匹配到`polls/`则截断匹配的URL部分，并把剩余的字符串发送到\n`polls.urls`\n\n* 在`polls/urls.py`中路由编辑如下：\n```\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path('index', views.index, name='index'),\n    path('results/', views.results, name='results'),\n]\n```\n这一部分的意思为：上一个路由截断剩余的部分如果匹配到`index`则跳转到`views.py`下的`index`函数。\n## 编写视图\n在`polls`目录下新建一个`templates`的文件夹，在`templates`下再建一个`polls`文件夹，然后将html文件放在该文件夹下。比如新建一个`index.html`文件。\n路径如下：\n\n```\npolls/\n    __init__.py\n    admin.py\n    apps.py\n    templates/\n        polls/\n            index.html\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py\n```\nindex.html内容如下：\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<form action=\"/polls/results\" method=\"post\">\n    <!--此处有坑--->\n    {% csrf_token %}\n    <input name=\"name\" type=\"text\">\n    <input type=\"submit\" value=\"提交\">\n</form>\n</body>\n</html>\n```\n\n此处action的链接可替换为：\n```\n{% url 'results' %}\n```\nresults为路由中的name。\n同理再新建一个`results.html`\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    {{name}}\n</body>\n</html>\n```\n\n**html内容注意地方:**\n* 1、`{% raw %}{% csrf_token %}{% endraw %}`必写，否则无法提交表单。这个标签将会自动生成一个`input`\n标签，包含name和value属性，作用是为了校验。\n到此一个基本的web框架就形成了。\n## 启动网站服务\n回到网站根目录，执行如下命令：\n```\npython manage.py runserver\n```\n## 其它几点问题\n### 获取表单数据\n* 获取post请求的数据：\n在`views.py`的函数中使用以下方法获得：\n```\nname = request.POST['name']\n```\n* `views.py`函数里的参数传到`html`中：\nrender参数加一字典\n```\nreturn render(request, 'polls/results.html',{'name':name})\n```\n* `html`页面获取响应的参数：\n使用花双括号，里面变量名即render参数字典的key\n```\n{{name}}\n```\n* 获取POST上传的blob数据\n```\nfile = request.FILES.get(\"file\")\ndefault_storage.save(\"./temp.wav\",ContentFile(file.read()))\n```\n`save`的第一个参数为路径及名字，第二个参数`ContentFile()`为要写入的内容。\n### 让其他人可以访问Django应用\n* 开服务时用以下命令\n```\npython manage.py runserver 0.0.0.0:8000\n```\n* `settings.py`中`ALLOWED_HOSTS`设置如下：\n```\nALLOWED_HOSTS = ['*',]\n```\n* 打开电脑的8000端口，设置入站规则即可。\nwindows设置如图：\n![windows设置防火墙](/images/defender.png)\n**三步缺一不可**\n### Django runserver配置https\n* pip命令安装以下包\n```\npip install django-extensions\npip install django-werkzeug-debugger-runserver\npip install pyOpenSSL\n```\n\n* 在`settings.py`加入以下两项\n```\n'werkzeug_debugger_runserver',\n'django_extensions',\n```\n* 用以下命令开启服务\n```\npython manage.py runserver_plus --cert server.crt 0:8000\n```\n## 总结\nDjango框架整体的运行流程如图：\n![Django整体的运行流程](/images/django.jpg)\n\n## 参考链接\nDjango中文官方文档\n[https://docs.djangoproject.com/zh-hans/2.1/]https://docs.djangoproject.com/zh-hans/2.1/\n","slug":"2018-2018-10-06-Django框架的快速入门笔记","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-14T13:20:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp191ua70025d3fo4n4ohd00","content":"<h2 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> django</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">django-admin startproject mysite</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>将会生成以下目录文件：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysite/</span><br><span class=\"line\">    manage.py</span><br><span class=\"line\">    mysite/</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        settings.py</span><br><span class=\"line\">        urls.py</span><br><span class=\"line\">        wsgi.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h2><p> 进入manage.py 所在的目录下，然后运行这行命令来创建一个应用：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage<span class=\"selector-class\">.py</span> startapp polls</span><br></pre></td></tr></table></figure></p>\n<p>生成目录如下：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">polls/</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    admin.py</span><br><span class=\"line\">    apps.py</span><br><span class=\"line\">    migrations/</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">    models.py</span><br><span class=\"line\">    tests.py</span><br><span class=\"line\">    views.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写视图控制函数\"><a href=\"#编写视图控制函数\" class=\"headerlink\" title=\"编写视图控制函数\"></a>编写视图控制函数</h2><p>在<code>views.py</code>添加以下内容：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">results</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    name = request.POST[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/results.html'</span>,&#123;<span class=\"string\">'name'</span>:name&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>几点理解：</strong></p>\n<ul>\n<li>1、<code>views.py</code>里的一个函数对应一个请求控制。类似于Java web中struts2的作用。</li>\n<li>2、通过return <code>render()</code>函数可以跳转到相应的html页面并且把参数转发到该页面。</li>\n<li>3、可直接通过<code>return HttpResponse(&quot;info&quot;)</code>来返回一个response。</li>\n</ul>\n<h2 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h2><p>配置路由是为了让浏览者输入相应的链接时可以访问相应的内容。</p>\n<ul>\n<li>在<code>mysite/urls.py</code>下的路由插入一条<code>include()</code>如下：<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django<span class=\"selector-class\">.contrib</span> import admin</span><br><span class=\"line\">from django<span class=\"selector-class\">.urls</span> import include, path</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'polls/'</span>, include(<span class=\"string\">'polls.urls'</span>)),</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin<span class=\"selector-class\">.site</span><span class=\"selector-class\">.urls</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这一部分的意思为：当匹配到<code>polls/</code>则截断匹配的URL部分，并把剩余的字符串发送到<br><code>polls.urls</code></p>\n<ul>\n<li>在<code>polls/urls.py</code>中路由编辑如下：<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.urls <span class=\"keyword\">import</span> <span class=\"built_in\">path</span></span><br><span class=\"line\">from . <span class=\"keyword\">import</span> views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"built_in\">path</span>(<span class=\"string\">'index'</span>, views.index, <span class=\"keyword\">name</span>=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    <span class=\"built_in\">path</span>(<span class=\"string\">'results/'</span>, views.results, <span class=\"keyword\">name</span>=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这一部分的意思为：上一个路由截断剩余的部分如果匹配到<code>index</code>则跳转到<code>views.py</code>下的<code>index</code>函数。</p>\n<h2 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a>编写视图</h2><p>在<code>polls</code>目录下新建一个<code>templates</code>的文件夹，在<code>templates</code>下再建一个<code>polls</code>文件夹，然后将html文件放在该文件夹下。比如新建一个<code>index.html</code>文件。<br>路径如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">polls/</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    admin.py</span><br><span class=\"line\">    apps.py</span><br><span class=\"line\">    templates/</span><br><span class=\"line\">        polls/</span><br><span class=\"line\">            index.html</span><br><span class=\"line\">    migrations/</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">    models.py</span><br><span class=\"line\">    tests.py</span><br><span class=\"line\">    views.py</span><br></pre></td></tr></table></figure>\n<p>index.html内容如下：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/polls/results\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"comment\">&lt;!--此处有坑---&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">csrf_token</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>此处action的链接可替换为：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">url</span></span> 'results' %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure></p>\n<p>results为路由中的name。<br>同理再新建一个<code>results.html</code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!doctype html&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span></span><br><span class=\"line\"><span class=\"xml\">          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p><strong>html内容注意地方:</strong></p>\n<ul>\n<li>1、<code>{% csrf_token %}</code>必写，否则无法提交表单。这个标签将会自动生成一个<code>input</code><br>标签，包含name和value属性，作用是为了校验。<br>到此一个基本的web框架就形成了。<h2 id=\"启动网站服务\"><a href=\"#启动网站服务\" class=\"headerlink\" title=\"启动网站服务\"></a>启动网站服务</h2>回到网站根目录，执行如下命令：<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage<span class=\"selector-class\">.py</span> runserver</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"其它几点问题\"><a href=\"#其它几点问题\" class=\"headerlink\" title=\"其它几点问题\"></a>其它几点问题</h2><h3 id=\"获取表单数据\"><a href=\"#获取表单数据\" class=\"headerlink\" title=\"获取表单数据\"></a>获取表单数据</h3><ul>\n<li><p>获取post请求的数据：<br>在<code>views.py</code>的函数中使用以下方法获得：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name</span> = request.POST[<span class=\"string\">'name'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>views.py</code>函数里的参数传到<code>html</code>中：<br>render参数加一字典</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return render(<span class=\"name\">request</span>, 'polls/results.html',&#123;'name'<span class=\"symbol\">:name</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>html</code>页面获取响应的参数：<br>使用花双括号，里面变量名即render参数字典的key</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;name&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取POST上传的blob数据</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">file</span> = request.FILES.<span class=\"built_in\">get</span>(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\">default_storage.<span class=\"keyword\">save</span>(<span class=\"string\">\"./temp.wav\"</span>,ContentFile(<span class=\"keyword\">file</span>.<span class=\"keyword\">read</span>()))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>save</code>的第一个参数为路径及名字，第二个参数<code>ContentFile()</code>为要写入的内容。</p>\n<h3 id=\"让其他人可以访问Django应用\"><a href=\"#让其他人可以访问Django应用\" class=\"headerlink\" title=\"让其他人可以访问Django应用\"></a>让其他人可以访问Django应用</h3><ul>\n<li><p>开服务时用以下命令</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">python</span> <span class=\"selector-tag\">manage</span><span class=\"selector-class\">.py</span> <span class=\"selector-tag\">runserver</span> 0<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-pseudo\">:8000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>settings.py</code>中<code>ALLOWED_HOSTS</code>设置如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ALLOWED_HOSTS</span> = [<span class=\"string\">'*'</span>,]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开电脑的8000端口，设置入站规则即可。<br>windows设置如图：<br><img src=\"/images/defender.png\" alt=\"windows设置防火墙\"><br><strong>三步缺一不可</strong></p>\n<h3 id=\"Django-runserver配置https\"><a href=\"#Django-runserver配置https\" class=\"headerlink\" title=\"Django runserver配置https\"></a>Django runserver配置https</h3></li>\n<li><p>pip命令安装以下包</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install </span>django-<span class=\"keyword\">extensions</span></span><br><span class=\"line\"><span class=\"keyword\">pip </span><span class=\"keyword\">install </span>django-werkzeug-debugger-runserver</span><br><span class=\"line\">pip <span class=\"keyword\">install </span>pyOpenSSL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>settings.py</code>加入以下两项</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">'werkzeug_debugger_runserver',</span><br><span class=\"line\">'django_extensions',</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用以下命令开启服务</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage<span class=\"selector-class\">.py</span> runserver_plus --cert server<span class=\"selector-class\">.crt</span> <span class=\"number\">0</span>:<span class=\"number\">8000</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Django框架整体的运行流程如图：<br><img src=\"/images/django.jpg\" alt=\"Django整体的运行流程\"></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>Django中文官方文档<br>[<a href=\"https://docs.djangoproject.com/zh-hans/2.1/]https://docs.djangoproject.com/zh-hans/2.1/\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/zh-hans/2.1/]https://docs.djangoproject.com/zh-hans/2.1/</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install</span> django</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">django-admin startproject mysite</span></span><br></pre></td></tr></table></figure>","more":"<p>将会生成以下目录文件：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysite/</span><br><span class=\"line\">    manage.py</span><br><span class=\"line\">    mysite/</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">        settings.py</span><br><span class=\"line\">        urls.py</span><br><span class=\"line\">        wsgi.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h2><p> 进入manage.py 所在的目录下，然后运行这行命令来创建一个应用：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage<span class=\"selector-class\">.py</span> startapp polls</span><br></pre></td></tr></table></figure></p>\n<p>生成目录如下：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">polls/</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    admin.py</span><br><span class=\"line\">    apps.py</span><br><span class=\"line\">    migrations/</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">    models.py</span><br><span class=\"line\">    tests.py</span><br><span class=\"line\">    views.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写视图控制函数\"><a href=\"#编写视图控制函数\" class=\"headerlink\" title=\"编写视图控制函数\"></a>编写视图控制函数</h2><p>在<code>views.py</code>添加以下内容：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> get_object_or_404, render</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/index.html'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">results</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    name = request.POST[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'polls/results.html'</span>,&#123;<span class=\"string\">'name'</span>:name&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><strong>几点理解：</strong></p>\n<ul>\n<li>1、<code>views.py</code>里的一个函数对应一个请求控制。类似于Java web中struts2的作用。</li>\n<li>2、通过return <code>render()</code>函数可以跳转到相应的html页面并且把参数转发到该页面。</li>\n<li>3、可直接通过<code>return HttpResponse(&quot;info&quot;)</code>来返回一个response。</li>\n</ul>\n<h2 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h2><p>配置路由是为了让浏览者输入相应的链接时可以访问相应的内容。</p>\n<ul>\n<li>在<code>mysite/urls.py</code>下的路由插入一条<code>include()</code>如下：<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django<span class=\"selector-class\">.contrib</span> import admin</span><br><span class=\"line\">from django<span class=\"selector-class\">.urls</span> import include, path</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">'polls/'</span>, include(<span class=\"string\">'polls.urls'</span>)),</span><br><span class=\"line\">    path(<span class=\"string\">'admin/'</span>, admin<span class=\"selector-class\">.site</span><span class=\"selector-class\">.urls</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这一部分的意思为：当匹配到<code>polls/</code>则截断匹配的URL部分，并把剩余的字符串发送到<br><code>polls.urls</code></p>\n<ul>\n<li>在<code>polls/urls.py</code>中路由编辑如下：<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.urls <span class=\"keyword\">import</span> <span class=\"built_in\">path</span></span><br><span class=\"line\">from . <span class=\"keyword\">import</span> views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    <span class=\"built_in\">path</span>(<span class=\"string\">'index'</span>, views.index, <span class=\"keyword\">name</span>=<span class=\"string\">'index'</span>),</span><br><span class=\"line\">    <span class=\"built_in\">path</span>(<span class=\"string\">'results/'</span>, views.results, <span class=\"keyword\">name</span>=<span class=\"string\">'results'</span>),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这一部分的意思为：上一个路由截断剩余的部分如果匹配到<code>index</code>则跳转到<code>views.py</code>下的<code>index</code>函数。</p>\n<h2 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a>编写视图</h2><p>在<code>polls</code>目录下新建一个<code>templates</code>的文件夹，在<code>templates</code>下再建一个<code>polls</code>文件夹，然后将html文件放在该文件夹下。比如新建一个<code>index.html</code>文件。<br>路径如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">polls/</span><br><span class=\"line\">    __init__.py</span><br><span class=\"line\">    admin.py</span><br><span class=\"line\">    apps.py</span><br><span class=\"line\">    templates/</span><br><span class=\"line\">        polls/</span><br><span class=\"line\">            index.html</span><br><span class=\"line\">    migrations/</span><br><span class=\"line\">        __init__.py</span><br><span class=\"line\">    models.py</span><br><span class=\"line\">    tests.py</span><br><span class=\"line\">    views.py</span><br></pre></td></tr></table></figure>\n<p>index.html内容如下：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/polls/results\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"comment\">&lt;!--此处有坑---&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">csrf_token</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>此处action的链接可替换为：<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">url</span></span> 'results' %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure></p>\n<p>results为路由中的name。<br>同理再新建一个<code>results.html</code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!doctype html&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span></span><br><span class=\"line\"><span class=\"xml\">          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"&gt;</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123;name&#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p><strong>html内容注意地方:</strong></p>\n<ul>\n<li>1、<code>{% csrf_token %}</code>必写，否则无法提交表单。这个标签将会自动生成一个<code>input</code><br>标签，包含name和value属性，作用是为了校验。<br>到此一个基本的web框架就形成了。<h2 id=\"启动网站服务\"><a href=\"#启动网站服务\" class=\"headerlink\" title=\"启动网站服务\"></a>启动网站服务</h2>回到网站根目录，执行如下命令：<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage<span class=\"selector-class\">.py</span> runserver</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"其它几点问题\"><a href=\"#其它几点问题\" class=\"headerlink\" title=\"其它几点问题\"></a>其它几点问题</h2><h3 id=\"获取表单数据\"><a href=\"#获取表单数据\" class=\"headerlink\" title=\"获取表单数据\"></a>获取表单数据</h3><ul>\n<li><p>获取post请求的数据：<br>在<code>views.py</code>的函数中使用以下方法获得：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name</span> = request.POST[<span class=\"string\">'name'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>views.py</code>函数里的参数传到<code>html</code>中：<br>render参数加一字典</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return render(<span class=\"name\">request</span>, 'polls/results.html',&#123;'name'<span class=\"symbol\">:name</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>html</code>页面获取响应的参数：<br>使用花双括号，里面变量名即render参数字典的key</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;name&#125;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取POST上传的blob数据</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">file</span> = request.FILES.<span class=\"built_in\">get</span>(<span class=\"string\">\"file\"</span>)</span><br><span class=\"line\">default_storage.<span class=\"keyword\">save</span>(<span class=\"string\">\"./temp.wav\"</span>,ContentFile(<span class=\"keyword\">file</span>.<span class=\"keyword\">read</span>()))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>save</code>的第一个参数为路径及名字，第二个参数<code>ContentFile()</code>为要写入的内容。</p>\n<h3 id=\"让其他人可以访问Django应用\"><a href=\"#让其他人可以访问Django应用\" class=\"headerlink\" title=\"让其他人可以访问Django应用\"></a>让其他人可以访问Django应用</h3><ul>\n<li><p>开服务时用以下命令</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">python</span> <span class=\"selector-tag\">manage</span><span class=\"selector-class\">.py</span> <span class=\"selector-tag\">runserver</span> 0<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-pseudo\">:8000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>settings.py</code>中<code>ALLOWED_HOSTS</code>设置如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ALLOWED_HOSTS</span> = [<span class=\"string\">'*'</span>,]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开电脑的8000端口，设置入站规则即可。<br>windows设置如图：<br><img src=\"/images/defender.png\" alt=\"windows设置防火墙\"><br><strong>三步缺一不可</strong></p>\n<h3 id=\"Django-runserver配置https\"><a href=\"#Django-runserver配置https\" class=\"headerlink\" title=\"Django runserver配置https\"></a>Django runserver配置https</h3></li>\n<li><p>pip命令安装以下包</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip <span class=\"keyword\">install </span>django-<span class=\"keyword\">extensions</span></span><br><span class=\"line\"><span class=\"keyword\">pip </span><span class=\"keyword\">install </span>django-werkzeug-debugger-runserver</span><br><span class=\"line\">pip <span class=\"keyword\">install </span>pyOpenSSL</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>settings.py</code>加入以下两项</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">'werkzeug_debugger_runserver',</span><br><span class=\"line\">'django_extensions',</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用以下命令开启服务</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage<span class=\"selector-class\">.py</span> runserver_plus --cert server<span class=\"selector-class\">.crt</span> <span class=\"number\">0</span>:<span class=\"number\">8000</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Django框架整体的运行流程如图：<br><img src=\"/images/django.jpg\" alt=\"Django整体的运行流程\"></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>Django中文官方文档<br>[<a href=\"https://docs.djangoproject.com/zh-hans/2.1/]https://docs.djangoproject.com/zh-hans/2.1/\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/zh-hans/2.1/]https://docs.djangoproject.com/zh-hans/2.1/</a></p>"},{"layout":"posts","title":"树莓派爬坑系列（五）使用snowboy做热词唤醒","_content":"\n#### 一、简要说明\nsnowboy所实现的功能就是对说的话进行检测，如果与预设的语音信号匹配则做出响应。和微软小娜的唤醒功能类似。\n官方文档：[http://docs.kitt.ai/snowboy/](http://docs.kitt.ai/snowboy/)里面有具体介绍如何使用。\n\n#### 二、使用\nsnowboy可以使编译好的文件，也可以从github[https://github.com/Kitt-AI/snowboy](https://github.com/Kitt-AI/snowboy)下载源文件针对自己电脑环境进行编译。\n需要注意的是：下载编译好的树莓派版本不能使用python3执行。\n\n#### 三、自己编译成Python3版本\n* 1、从GitHub[https://github.com/Kitt-AI/snowboy](https://github.com/Kitt-AI/snowboy)中下载压缩包，解压。\n* 2、切换到swig/Python目录\n```\ncd swig/Python\nmake\n```\n\n* 3、执行完后在swig/Python目录下会生成几个文件，其中`snowboydetect.py`和`_snowboydetect.so`\n就是我们需要的，可以把它拷贝到我们的项目中\n\n* 4、完整的执行snowboy还需要examples/Python3目录下的`snowboydecoder.py`和`demo.py`及根目录下的`resources`文件夹。\n当然，还需要在官网训练自己的声音模型，然后下载下来放到相应目录。\n","source":"_posts/2018/2018-10-06-树莓派爬坑系列（五）使用snowboy做热词唤醒.md","raw":"---\nlayout: posts\ntitle: 树莓派爬坑系列（五）使用snowboy做热词唤醒\ncategories: 树莓派爬坑系列\ntags: \n    - 树莓派 \n    - 热词唤醒\n---\n\n#### 一、简要说明\nsnowboy所实现的功能就是对说的话进行检测，如果与预设的语音信号匹配则做出响应。和微软小娜的唤醒功能类似。\n官方文档：[http://docs.kitt.ai/snowboy/](http://docs.kitt.ai/snowboy/)里面有具体介绍如何使用。\n\n#### 二、使用\nsnowboy可以使编译好的文件，也可以从github[https://github.com/Kitt-AI/snowboy](https://github.com/Kitt-AI/snowboy)下载源文件针对自己电脑环境进行编译。\n需要注意的是：下载编译好的树莓派版本不能使用python3执行。\n\n#### 三、自己编译成Python3版本\n* 1、从GitHub[https://github.com/Kitt-AI/snowboy](https://github.com/Kitt-AI/snowboy)中下载压缩包，解压。\n* 2、切换到swig/Python目录\n```\ncd swig/Python\nmake\n```\n\n* 3、执行完后在swig/Python目录下会生成几个文件，其中`snowboydetect.py`和`_snowboydetect.so`\n就是我们需要的，可以把它拷贝到我们的项目中\n\n* 4、完整的执行snowboy还需要examples/Python3目录下的`snowboydecoder.py`和`demo.py`及根目录下的`resources`文件夹。\n当然，还需要在官网训练自己的声音模型，然后下载下来放到相应目录。\n","slug":"2018-2018-10-06-树莓派爬坑系列（五）使用snowboy做热词唤醒","published":1,"date":"2018-11-04T03:19:29.000Z","updated":"2018-10-07T00:59:12.000Z","comments":1,"photos":[],"link":"","_id":"cjp191ua90028d3foh1hoqn8d","content":"<h4 id=\"一、简要说明\"><a href=\"#一、简要说明\" class=\"headerlink\" title=\"一、简要说明\"></a>一、简要说明</h4><p>snowboy所实现的功能就是对说的话进行检测，如果与预设的语音信号匹配则做出响应。和微软小娜的唤醒功能类似。<br>官方文档：<a href=\"http://docs.kitt.ai/snowboy/\" target=\"_blank\" rel=\"noopener\">http://docs.kitt.ai/snowboy/</a>里面有具体介绍如何使用。</p>\n<h4 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h4><p>snowboy可以使编译好的文件，也可以从github<a href=\"https://github.com/Kitt-AI/snowboy\" target=\"_blank\" rel=\"noopener\">https://github.com/Kitt-AI/snowboy</a>下载源文件针对自己电脑环境进行编译。<br>需要注意的是：下载编译好的树莓派版本不能使用python3执行。</p>\n<h4 id=\"三、自己编译成Python3版本\"><a href=\"#三、自己编译成Python3版本\" class=\"headerlink\" title=\"三、自己编译成Python3版本\"></a>三、自己编译成Python3版本</h4><ul>\n<li>1、从GitHub<a href=\"https://github.com/Kitt-AI/snowboy\" target=\"_blank\" rel=\"noopener\">https://github.com/Kitt-AI/snowboy</a>中下载压缩包，解压。</li>\n<li><p>2、切换到swig/Python目录</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> swig/Python</span><br><span class=\"line\"><span class=\"keyword\">make</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、执行完后在swig/Python目录下会生成几个文件，其中<code>snowboydetect.py</code>和<code>_snowboydetect.so</code><br>就是我们需要的，可以把它拷贝到我们的项目中</p>\n</li>\n<li><p>4、完整的执行snowboy还需要examples/Python3目录下的<code>snowboydecoder.py</code>和<code>demo.py</code>及根目录下的<code>resources</code>文件夹。<br>当然，还需要在官网训练自己的声音模型，然后下载下来放到相应目录。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、简要说明\"><a href=\"#一、简要说明\" class=\"headerlink\" title=\"一、简要说明\"></a>一、简要说明</h4><p>snowboy所实现的功能就是对说的话进行检测，如果与预设的语音信号匹配则做出响应。和微软小娜的唤醒功能类似。<br>官方文档：<a href=\"http://docs.kitt.ai/snowboy/\" target=\"_blank\" rel=\"noopener\">http://docs.kitt.ai/snowboy/</a>里面有具体介绍如何使用。</p>\n<h4 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h4><p>snowboy可以使编译好的文件，也可以从github<a href=\"https://github.com/Kitt-AI/snowboy\" target=\"_blank\" rel=\"noopener\">https://github.com/Kitt-AI/snowboy</a>下载源文件针对自己电脑环境进行编译。<br>需要注意的是：下载编译好的树莓派版本不能使用python3执行。</p>\n<h4 id=\"三、自己编译成Python3版本\"><a href=\"#三、自己编译成Python3版本\" class=\"headerlink\" title=\"三、自己编译成Python3版本\"></a>三、自己编译成Python3版本</h4><ul>\n<li>1、从GitHub<a href=\"https://github.com/Kitt-AI/snowboy\" target=\"_blank\" rel=\"noopener\">https://github.com/Kitt-AI/snowboy</a>中下载压缩包，解压。</li>\n<li><p>2、切换到swig/Python目录</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> swig/Python</span><br><span class=\"line\"><span class=\"keyword\">make</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、执行完后在swig/Python目录下会生成几个文件，其中<code>snowboydetect.py</code>和<code>_snowboydetect.so</code><br>就是我们需要的，可以把它拷贝到我们的项目中</p>\n</li>\n<li><p>4、完整的执行snowboy还需要examples/Python3目录下的<code>snowboydecoder.py</code>和<code>demo.py</code>及根目录下的<code>resources</code>文件夹。<br>当然，还需要在官网训练自己的声音模型，然后下载下来放到相应目录。</p>\n</li>\n</ul>\n"},{"title":"hexo入坑小记","date":"2018-10-07T08:55:44.000Z","_content":"## 写在前面\n之前自己利用Jekyll搭建过一个网站，一开始使用起来还挺舒服。因为主题样式都是按自己喜欢来写的。直到最近几天发现网上使用hexo搭建的博客样式非常漂亮，于是开始入坑hexo。\n\n\n## 如何用hexo搭建博客\n* 网上都有非常详细的教程以下为官方文档：\n[https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\n* next主题（hexo博客评价较高的主题）使用文档：\n[http://theme-next.iissnan.com/](http://theme-next.iissnan.com/)\n\n## 两种博客系统使用感受\n### 样式上\n个人感觉Jekyll的主题样式没有hexo好看。Jekyll是直接通过git将文章样式上传到GitHub，然后由GitHub对其进行解析。而hexo是先在本地生成静态网页，再上传到github。\n### 使用上\nJekyll可以直接使用git命令上传，在atom编辑器里有可视化操作，还比较方便。\nhexo博客需要在命令行中使用命令：\n```\nhexo g -d\n```\n来将文章发布到GitHub。在atom编辑器里的话可以安装`atom-hexo`插件来完成相应命令。\n\n### hexo使用问题\n* 在文件中对`{% raw %}{% %}{% endraw %}`或 `{% raw %}{{}}{% endraw %}`或者关键字不进行解析。\n使用`{% raw %}{% raw %} {% endraw %}{% endraw %}`标签将不需要解析的内容包裹起来\n","source":"_posts/2018/2018-10-07-hexo入坑小记.md","raw":"---\ntitle: hexo入坑小记\ndate: 2018-10-07 16:55:44\ntags:\n  - 博客\n  - 搭建博客\ncategories: 博客建站\n---\n## 写在前面\n之前自己利用Jekyll搭建过一个网站，一开始使用起来还挺舒服。因为主题样式都是按自己喜欢来写的。直到最近几天发现网上使用hexo搭建的博客样式非常漂亮，于是开始入坑hexo。\n\n\n## 如何用hexo搭建博客\n* 网上都有非常详细的教程以下为官方文档：\n[https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\n* next主题（hexo博客评价较高的主题）使用文档：\n[http://theme-next.iissnan.com/](http://theme-next.iissnan.com/)\n\n## 两种博客系统使用感受\n### 样式上\n个人感觉Jekyll的主题样式没有hexo好看。Jekyll是直接通过git将文章样式上传到GitHub，然后由GitHub对其进行解析。而hexo是先在本地生成静态网页，再上传到github。\n### 使用上\nJekyll可以直接使用git命令上传，在atom编辑器里有可视化操作，还比较方便。\nhexo博客需要在命令行中使用命令：\n```\nhexo g -d\n```\n来将文章发布到GitHub。在atom编辑器里的话可以安装`atom-hexo`插件来完成相应命令。\n\n### hexo使用问题\n* 在文件中对`{% raw %}{% %}{% endraw %}`或 `{% raw %}{{}}{% endraw %}`或者关键字不进行解析。\n使用`{% raw %}{% raw %} {% endraw %}{% endraw %}`标签将不需要解析的内容包裹起来\n","slug":"2018-2018-10-07-hexo入坑小记","published":1,"updated":"2018-10-07T12:52:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp191uab002bd3foe6zk5mle","content":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>之前自己利用Jekyll搭建过一个网站，一开始使用起来还挺舒服。因为主题样式都是按自己喜欢来写的。直到最近几天发现网上使用hexo搭建的博客样式非常漂亮，于是开始入坑hexo。</p>\n<h2 id=\"如何用hexo搭建博客\"><a href=\"#如何用hexo搭建博客\" class=\"headerlink\" title=\"如何用hexo搭建博客\"></a>如何用hexo搭建博客</h2><ul>\n<li>网上都有非常详细的教程以下为官方文档：<br><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a></li>\n<li>next主题（hexo博客评价较高的主题）使用文档：<br><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/</a></li>\n</ul>\n<h2 id=\"两种博客系统使用感受\"><a href=\"#两种博客系统使用感受\" class=\"headerlink\" title=\"两种博客系统使用感受\"></a>两种博客系统使用感受</h2><h3 id=\"样式上\"><a href=\"#样式上\" class=\"headerlink\" title=\"样式上\"></a>样式上</h3><p>个人感觉Jekyll的主题样式没有hexo好看。Jekyll是直接通过git将文章样式上传到GitHub，然后由GitHub对其进行解析。而hexo是先在本地生成静态网页，再上传到github。</p>\n<h3 id=\"使用上\"><a href=\"#使用上\" class=\"headerlink\" title=\"使用上\"></a>使用上</h3><p>Jekyll可以直接使用git命令上传，在atom编辑器里有可视化操作，还比较方便。<br>hexo博客需要在命令行中使用命令：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo g -d</span></span><br></pre></td></tr></table></figure></p>\n<p>来将文章发布到GitHub。在atom编辑器里的话可以安装<code>atom-hexo</code>插件来完成相应命令。</p>\n<h3 id=\"hexo使用问题\"><a href=\"#hexo使用问题\" class=\"headerlink\" title=\"hexo使用问题\"></a>hexo使用问题</h3><ul>\n<li>在文件中对<code>{% %}</code>或 <code>{{}}</code>或者关键字不进行解析。<br>使用<code>{% raw %} {% endraw %}</code>标签将不需要解析的内容包裹起来</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>之前自己利用Jekyll搭建过一个网站，一开始使用起来还挺舒服。因为主题样式都是按自己喜欢来写的。直到最近几天发现网上使用hexo搭建的博客样式非常漂亮，于是开始入坑hexo。</p>\n<h2 id=\"如何用hexo搭建博客\"><a href=\"#如何用hexo搭建博客\" class=\"headerlink\" title=\"如何用hexo搭建博客\"></a>如何用hexo搭建博客</h2><ul>\n<li>网上都有非常详细的教程以下为官方文档：<br><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">https://hexo.io/zh-cn/docs/</a></li>\n<li>next主题（hexo博客评价较高的主题）使用文档：<br><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/</a></li>\n</ul>\n<h2 id=\"两种博客系统使用感受\"><a href=\"#两种博客系统使用感受\" class=\"headerlink\" title=\"两种博客系统使用感受\"></a>两种博客系统使用感受</h2><h3 id=\"样式上\"><a href=\"#样式上\" class=\"headerlink\" title=\"样式上\"></a>样式上</h3><p>个人感觉Jekyll的主题样式没有hexo好看。Jekyll是直接通过git将文章样式上传到GitHub，然后由GitHub对其进行解析。而hexo是先在本地生成静态网页，再上传到github。</p>\n<h3 id=\"使用上\"><a href=\"#使用上\" class=\"headerlink\" title=\"使用上\"></a>使用上</h3><p>Jekyll可以直接使用git命令上传，在atom编辑器里有可视化操作，还比较方便。<br>hexo博客需要在命令行中使用命令：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo g -d</span></span><br></pre></td></tr></table></figure></p>\n<p>来将文章发布到GitHub。在atom编辑器里的话可以安装<code>atom-hexo</code>插件来完成相应命令。</p>\n<h3 id=\"hexo使用问题\"><a href=\"#hexo使用问题\" class=\"headerlink\" title=\"hexo使用问题\"></a>hexo使用问题</h3><ul>\n<li>在文件中对<code>{% %}</code>或 <code>{{}}</code>或者关键字不进行解析。<br>使用<code>{% raw %} {% endraw %}</code>标签将不需要解析的内容包裹起来</li>\n</ul>\n"},{"title":"树莓派爬坑系列（六）Linux下双网卡上网问题","date":"2018-10-08T14:38:10.000Z","_content":"## 问题\n树莓派的无线网卡连接了校园网（可访问互联网），有线网卡通过网线直接连接电脑。\n电脑可以把网络共享给树莓派的有线网卡，也可以实现访问互联网。但当断开有线后树莓派不能访问互联网。\n\n## 想要实现功能\n电脑和树莓派通信时用用树莓派的有线网卡，树莓派访问互联网时用无线网卡。\n\n## 缘由\n使用`route`查看树莓派路由表如下：\n![路由表](/images/route.png)\n总共有4条路由，其中有两条默认路由，一个是有线网卡的，一个是无线网卡的。因为有线网卡的优先级比无线网卡高，\n所以当访问互联网时走的是有线网卡的默认路由。\n\n## 解决\n删除有线网卡的默认路由，删除后默认路由即为走无线网卡。\n```\nroute del default gw 192.168.1.1\n```\n其中`gw`为关键字 192.168.1.1为有线网卡网关\n\n## 附\n```\nRoute命令的正确用法使用\nRoute 命令行工具查看并编辑计算机的 IP 路由表。\nRoute 命令和语法如下所示：route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]]\n-f 清除所有网关入口的路由表。\n -p 与 add 命令一起使用时使路由具有永久性。\n```\n常用命令：\n```\nroute - p add 192.168.137.0 mask 255.255.255.0 192.168.137.1\n```\n意思为如果目的ip与mask相与等于192.168.137.0这个网段，则下一跳地址为192.168.137.1\n`-p` 为永久添加\n","source":"_posts/2018/2018-10-08-树莓派爬坑系列（六）Linux下双网卡上网问题.md","raw":"---\ntitle: 树莓派爬坑系列（六）Linux下双网卡上网问题\ndate: 2018-10-08 22:38:10\ncategories: 树莓派爬坑系列\ntags:\n  - Linux\n  - 双网卡\n---\n## 问题\n树莓派的无线网卡连接了校园网（可访问互联网），有线网卡通过网线直接连接电脑。\n电脑可以把网络共享给树莓派的有线网卡，也可以实现访问互联网。但当断开有线后树莓派不能访问互联网。\n\n## 想要实现功能\n电脑和树莓派通信时用用树莓派的有线网卡，树莓派访问互联网时用无线网卡。\n\n## 缘由\n使用`route`查看树莓派路由表如下：\n![路由表](/images/route.png)\n总共有4条路由，其中有两条默认路由，一个是有线网卡的，一个是无线网卡的。因为有线网卡的优先级比无线网卡高，\n所以当访问互联网时走的是有线网卡的默认路由。\n\n## 解决\n删除有线网卡的默认路由，删除后默认路由即为走无线网卡。\n```\nroute del default gw 192.168.1.1\n```\n其中`gw`为关键字 192.168.1.1为有线网卡网关\n\n## 附\n```\nRoute命令的正确用法使用\nRoute 命令行工具查看并编辑计算机的 IP 路由表。\nRoute 命令和语法如下所示：route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]]\n-f 清除所有网关入口的路由表。\n -p 与 add 命令一起使用时使路由具有永久性。\n```\n常用命令：\n```\nroute - p add 192.168.137.0 mask 255.255.255.0 192.168.137.1\n```\n意思为如果目的ip与mask相与等于192.168.137.0这个网段，则下一跳地址为192.168.137.1\n`-p` 为永久添加\n","slug":"2018-2018-10-08-树莓派爬坑系列（六）Linux下双网卡上网问题","published":1,"updated":"2018-10-08T15:11:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp191uac002ed3fomnu9sz3k","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>树莓派的无线网卡连接了校园网（可访问互联网），有线网卡通过网线直接连接电脑。<br>电脑可以把网络共享给树莓派的有线网卡，也可以实现访问互联网。但当断开有线后树莓派不能访问互联网。</p>\n<h2 id=\"想要实现功能\"><a href=\"#想要实现功能\" class=\"headerlink\" title=\"想要实现功能\"></a>想要实现功能</h2><p>电脑和树莓派通信时用用树莓派的有线网卡，树莓派访问互联网时用无线网卡。</p>\n<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>使用<code>route</code>查看树莓派路由表如下：<br><img src=\"/images/route.png\" alt=\"路由表\"><br>总共有4条路由，其中有两条默认路由，一个是有线网卡的，一个是无线网卡的。因为有线网卡的优先级比无线网卡高，<br>所以当访问互联网时走的是有线网卡的默认路由。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>删除有线网卡的默认路由，删除后默认路由即为走无线网卡。<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route del<span class=\"built_in\"> default </span>gw 192.168.1.1</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>gw</code>为关键字 192.168.1.1为有线网卡网关</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route命令的正确用法使用</span><br><span class=\"line\">Route 命令行工具查看并编辑计算机的<span class=\"built_in\"> IP </span>路由表。</span><br><span class=\"line\">Route 命令和语法如下所示：route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [<span class=\"keyword\">if</span> Interface]]</span><br><span class=\"line\">-f 清除所有网关入口的路由表。</span><br><span class=\"line\"> -p 与 <span class=\"builtin-name\">add</span> 命令一起使用时使路由具有永久性。</span><br></pre></td></tr></table></figure>\n<p>常用命令：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">route</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">add</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.137</span><span class=\"selector-class\">.0</span> <span class=\"selector-tag\">mask</span> 255<span class=\"selector-class\">.255</span><span class=\"selector-class\">.255</span><span class=\"selector-class\">.0</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.137</span><span class=\"selector-class\">.1</span></span><br></pre></td></tr></table></figure></p>\n<p>意思为如果目的ip与mask相与等于192.168.137.0这个网段，则下一跳地址为192.168.137.1<br><code>-p</code> 为永久添加</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>树莓派的无线网卡连接了校园网（可访问互联网），有线网卡通过网线直接连接电脑。<br>电脑可以把网络共享给树莓派的有线网卡，也可以实现访问互联网。但当断开有线后树莓派不能访问互联网。</p>\n<h2 id=\"想要实现功能\"><a href=\"#想要实现功能\" class=\"headerlink\" title=\"想要实现功能\"></a>想要实现功能</h2><p>电脑和树莓派通信时用用树莓派的有线网卡，树莓派访问互联网时用无线网卡。</p>\n<h2 id=\"缘由\"><a href=\"#缘由\" class=\"headerlink\" title=\"缘由\"></a>缘由</h2><p>使用<code>route</code>查看树莓派路由表如下：<br><img src=\"/images/route.png\" alt=\"路由表\"><br>总共有4条路由，其中有两条默认路由，一个是有线网卡的，一个是无线网卡的。因为有线网卡的优先级比无线网卡高，<br>所以当访问互联网时走的是有线网卡的默认路由。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>删除有线网卡的默认路由，删除后默认路由即为走无线网卡。<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">route del<span class=\"built_in\"> default </span>gw 192.168.1.1</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>gw</code>为关键字 192.168.1.1为有线网卡网关</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Route命令的正确用法使用</span><br><span class=\"line\">Route 命令行工具查看并编辑计算机的<span class=\"built_in\"> IP </span>路由表。</span><br><span class=\"line\">Route 命令和语法如下所示：route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [<span class=\"keyword\">if</span> Interface]]</span><br><span class=\"line\">-f 清除所有网关入口的路由表。</span><br><span class=\"line\"> -p 与 <span class=\"builtin-name\">add</span> 命令一起使用时使路由具有永久性。</span><br></pre></td></tr></table></figure>\n<p>常用命令：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">route</span> <span class=\"selector-tag\">-</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">add</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.137</span><span class=\"selector-class\">.0</span> <span class=\"selector-tag\">mask</span> 255<span class=\"selector-class\">.255</span><span class=\"selector-class\">.255</span><span class=\"selector-class\">.0</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.137</span><span class=\"selector-class\">.1</span></span><br></pre></td></tr></table></figure></p>\n<p>意思为如果目的ip与mask相与等于192.168.137.0这个网段，则下一跳地址为192.168.137.1<br><code>-p</code> 为永久添加</p>\n"},{"title":"Git与GitHub.md","date":"2018-11-17T06:40:11.000Z","_content":"# 推送到远程库\n* `git remote -v`:查看地址别名  \n* 添加别名：\n```\ngit remote add origin git@github.com:fishrong/TestGitInMac.git\n```\n即用`origin`代替地址。\n* 推送\n```\ngit push origin master\n```\n将`master`分支推送到远程仓库。\n<!--more-->\n# 分支\n## 查看当前分支\n```\ngit status\n```\n\n## 创建分支\n```\ngit branch hot_fix\n```\n\n## 查看分支（所有）\n```\ngit branch -v\n```\n\n## 切换分支\n```\ngit checkout [分支名]\n```\n\n## 合并分支\n* 切换到被合并分支\n* 执行以下命令(将`hot_fix`合并到`master`分支)\n```\ngit merge hot_fix\n```\n\n## 向远程库推送\n```\ngit push origin hot_fix\n```\n将`hot_fix`分支推送到远程库,如果远程库没有这个分支将会新建一个分支\n\n# 从远程库克隆\n```\ngit clone [远程库地址]\n```\n效果：\n* 完整复制远程库文件\n* 创建origin别名\n* 初始化本地库\n\n# 远程库的抓取\n两种方式：\n* 1、先`fetch`再`merge`  \n* 2、直接使用`git pull origin master`。\n* 抓取远程库的`master`分支\n```\ngit fetch origin master\n```\n此时并不会改变本地库的文件  \n查看抓取下来的文件，先切换到远程分支：\n```\ngit checkout origin/master\n```\n* 合并到本地\n```\ngit merge origin/master\n```\n","source":"_posts/2018/2018-11-17-Git与GitHub.md","raw":"---\ntitle: Git与GitHub.md\ndate: 2018-11-17 14:40:11\ntags:\n  - git\n---\n# 推送到远程库\n* `git remote -v`:查看地址别名  \n* 添加别名：\n```\ngit remote add origin git@github.com:fishrong/TestGitInMac.git\n```\n即用`origin`代替地址。\n* 推送\n```\ngit push origin master\n```\n将`master`分支推送到远程仓库。\n<!--more-->\n# 分支\n## 查看当前分支\n```\ngit status\n```\n\n## 创建分支\n```\ngit branch hot_fix\n```\n\n## 查看分支（所有）\n```\ngit branch -v\n```\n\n## 切换分支\n```\ngit checkout [分支名]\n```\n\n## 合并分支\n* 切换到被合并分支\n* 执行以下命令(将`hot_fix`合并到`master`分支)\n```\ngit merge hot_fix\n```\n\n## 向远程库推送\n```\ngit push origin hot_fix\n```\n将`hot_fix`分支推送到远程库,如果远程库没有这个分支将会新建一个分支\n\n# 从远程库克隆\n```\ngit clone [远程库地址]\n```\n效果：\n* 完整复制远程库文件\n* 创建origin别名\n* 初始化本地库\n\n# 远程库的抓取\n两种方式：\n* 1、先`fetch`再`merge`  \n* 2、直接使用`git pull origin master`。\n* 抓取远程库的`master`分支\n```\ngit fetch origin master\n```\n此时并不会改变本地库的文件  \n查看抓取下来的文件，先切换到远程分支：\n```\ngit checkout origin/master\n```\n* 合并到本地\n```\ngit merge origin/master\n```\n","slug":"2018-2018-11-17-Git与GitHub","published":1,"updated":"2018-11-28T08:55:44.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp191uae002hd3fo3fc4htiu","content":"<h1 id=\"推送到远程库\"><a href=\"#推送到远程库\" class=\"headerlink\" title=\"推送到远程库\"></a>推送到远程库</h1><ul>\n<li><code>git remote -v</code>:查看地址别名  </li>\n<li>添加别名：<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin git@github.com:fishrong/TestGitInMac.git</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>即用<code>origin</code>代替地址。</p>\n<ul>\n<li>推送<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>将<code>master</code>分支推送到远程仓库。<br><a id=\"more\"></a></p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><h2 id=\"查看当前分支\"><a href=\"#查看当前分支\" class=\"headerlink\" title=\"查看当前分支\"></a>查看当前分支</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git status</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">branch </span>hot_fix</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看分支（所有）\"><a href=\"#查看分支（所有）\" class=\"headerlink\" title=\"查看分支（所有）\"></a>查看分支（所有）</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">branch </span>-v</span><br></pre></td></tr></table></figure>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout <span class=\"string\">[分支名]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><ul>\n<li>切换到被合并分支</li>\n<li>执行以下命令(将<code>hot_fix</code>合并到<code>master</code>分支)<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">merge</span> hot_fix</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"向远程库推送\"><a href=\"#向远程库推送\" class=\"headerlink\" title=\"向远程库推送\"></a>向远程库推送</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> hot_fix</span><br></pre></td></tr></table></figure>\n<p>将<code>hot_fix</code>分支推送到远程库,如果远程库没有这个分支将会新建一个分支</p>\n<h1 id=\"从远程库克隆\"><a href=\"#从远程库克隆\" class=\"headerlink\" title=\"从远程库克隆\"></a>从远程库克隆</h1><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">[远程库地址]</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<ul>\n<li>完整复制远程库文件</li>\n<li>创建origin别名</li>\n<li>初始化本地库</li>\n</ul>\n<h1 id=\"远程库的抓取\"><a href=\"#远程库的抓取\" class=\"headerlink\" title=\"远程库的抓取\"></a>远程库的抓取</h1><p>两种方式：</p>\n<ul>\n<li>1、先<code>fetch</code>再<code>merge</code>  </li>\n<li>2、直接使用<code>git pull origin master</code>。</li>\n<li>抓取远程库的<code>master</code>分支<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin <span class=\"literal\">master</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时并不会改变本地库的文件<br>查看抓取下来的文件，先切换到远程分支：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout origin/<span class=\"literal\">master</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>合并到本地<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">merge</span> origin/<span class=\"keyword\">master</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"推送到远程库\"><a href=\"#推送到远程库\" class=\"headerlink\" title=\"推送到远程库\"></a>推送到远程库</h1><ul>\n<li><code>git remote -v</code>:查看地址别名  </li>\n<li>添加别名：<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin git@github.com:fishrong/TestGitInMac.git</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>即用<code>origin</code>代替地址。</p>\n<ul>\n<li>推送<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>将<code>master</code>分支推送到远程仓库。<br>","more":"</p>\n<h1 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h1><h2 id=\"查看当前分支\"><a href=\"#查看当前分支\" class=\"headerlink\" title=\"查看当前分支\"></a>查看当前分支</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git status</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">branch </span>hot_fix</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看分支（所有）\"><a href=\"#查看分支（所有）\" class=\"headerlink\" title=\"查看分支（所有）\"></a>查看分支（所有）</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">branch </span>-v</span><br></pre></td></tr></table></figure>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout <span class=\"string\">[分支名]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><ul>\n<li>切换到被合并分支</li>\n<li>执行以下命令(将<code>hot_fix</code>合并到<code>master</code>分支)<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">merge</span> hot_fix</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"向远程库推送\"><a href=\"#向远程库推送\" class=\"headerlink\" title=\"向远程库推送\"></a>向远程库推送</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> hot_fix</span><br></pre></td></tr></table></figure>\n<p>将<code>hot_fix</code>分支推送到远程库,如果远程库没有这个分支将会新建一个分支</p>\n<h1 id=\"从远程库克隆\"><a href=\"#从远程库克隆\" class=\"headerlink\" title=\"从远程库克隆\"></a>从远程库克隆</h1><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">[远程库地址]</span></span><br></pre></td></tr></table></figure>\n<p>效果：</p>\n<ul>\n<li>完整复制远程库文件</li>\n<li>创建origin别名</li>\n<li>初始化本地库</li>\n</ul>\n<h1 id=\"远程库的抓取\"><a href=\"#远程库的抓取\" class=\"headerlink\" title=\"远程库的抓取\"></a>远程库的抓取</h1><p>两种方式：</p>\n<ul>\n<li>1、先<code>fetch</code>再<code>merge</code>  </li>\n<li>2、直接使用<code>git pull origin master</code>。</li>\n<li>抓取远程库的<code>master</code>分支<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin <span class=\"literal\">master</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时并不会改变本地库的文件<br>查看抓取下来的文件，先切换到远程分支：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout origin/<span class=\"literal\">master</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>合并到本地<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">merge</span> origin/<span class=\"keyword\">master</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Android初体验(一)目录结构及作用","date":"2018-11-28T09:15:02.000Z","_content":"# 前言\n因为最近想把学的java知识进行应用一下，然后考虑到不管做什么项目基本上都用的上Android及它是使用java语言来编写的。学习的目标是了解安卓项目开发的流程，能够独立编写简单应用即可。因为以后可能不会经常编写Android程序，为了以后拾起的时候有个参考，所以对安卓的一些基本知识进行简单的记录一下。\n# 目录结构\n一个App项目的目录结构如下：\n<!--more-->\n![目录结构](/images/androidAppIndex.png)\n\n# 常用目录文件作用\n## `/app/manifests/AndroidManifest.xml`\n这个是app的全局配置文件相关属性说明如下：  \n* `android:icon`：应用图标\n* `android:label`：应用名称\n* 设置应用启动的入口，在`activity`标签中加入下面代码\n```\n<intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n```\n## `/app/java/myapplication`\n这个目录存放的是java代码，包含`activity`和自定义类。\n\n## `res`目录\n该目下存放资源文件  \n* `/res/drawable`：存放自定义形状、位图等。\n*  `/res/layout`：存放布局代码，类似于html的css。\n\n## `/app/mipmap`\n存放app启动图标、多种分辨率图片资源。\n## `/app/values`目录\n存放颜色、字符串、样式资源，也就是存放定义相关的常量。\n","source":"_posts/2018/2018-11-28-Android初体验(一)目录结构及左右.md","raw":"---\ntitle: Android初体验(一)目录结构及作用\ndate: 2018-11-28 17:15:02\ntags:\n    - Android\n---\n# 前言\n因为最近想把学的java知识进行应用一下，然后考虑到不管做什么项目基本上都用的上Android及它是使用java语言来编写的。学习的目标是了解安卓项目开发的流程，能够独立编写简单应用即可。因为以后可能不会经常编写Android程序，为了以后拾起的时候有个参考，所以对安卓的一些基本知识进行简单的记录一下。\n# 目录结构\n一个App项目的目录结构如下：\n<!--more-->\n![目录结构](/images/androidAppIndex.png)\n\n# 常用目录文件作用\n## `/app/manifests/AndroidManifest.xml`\n这个是app的全局配置文件相关属性说明如下：  \n* `android:icon`：应用图标\n* `android:label`：应用名称\n* 设置应用启动的入口，在`activity`标签中加入下面代码\n```\n<intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n</intent-filter>\n```\n## `/app/java/myapplication`\n这个目录存放的是java代码，包含`activity`和自定义类。\n\n## `res`目录\n该目下存放资源文件  \n* `/res/drawable`：存放自定义形状、位图等。\n*  `/res/layout`：存放布局代码，类似于html的css。\n\n## `/app/mipmap`\n存放app启动图标、多种分辨率图片资源。\n## `/app/values`目录\n存放颜色、字符串、样式资源，也就是存放定义相关的常量。\n","slug":"2018-2018-11-28-Android初体验-一-目录结构及左右","published":1,"updated":"2018-11-28T13:40:35.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp191uaf002kd3foc1k1hg7d","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>因为最近想把学的java知识进行应用一下，然后考虑到不管做什么项目基本上都用的上Android及它是使用java语言来编写的。学习的目标是了解安卓项目开发的流程，能够独立编写简单应用即可。因为以后可能不会经常编写Android程序，为了以后拾起的时候有个参考，所以对安卓的一些基本知识进行简单的记录一下。</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><p>一个App项目的目录结构如下：<br><a id=\"more\"></a><br><img src=\"/images/androidAppIndex.png\" alt=\"目录结构\"></p>\n<h1 id=\"常用目录文件作用\"><a href=\"#常用目录文件作用\" class=\"headerlink\" title=\"常用目录文件作用\"></a>常用目录文件作用</h1><h2 id=\"app-manifests-AndroidManifest-xml\"><a href=\"#app-manifests-AndroidManifest-xml\" class=\"headerlink\" title=\"/app/manifests/AndroidManifest.xml\"></a><code>/app/manifests/AndroidManifest.xml</code></h2><p>这个是app的全局配置文件相关属性说明如下：  </p>\n<ul>\n<li><code>android:icon</code>：应用图标</li>\n<li><code>android:label</code>：应用名称</li>\n<li>设置应用启动的入口，在<code>activity</code>标签中加入下面代码<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"app-java-myapplication\"><a href=\"#app-java-myapplication\" class=\"headerlink\" title=\"/app/java/myapplication\"></a><code>/app/java/myapplication</code></h2><p>这个目录存放的是java代码，包含<code>activity</code>和自定义类。</p>\n<h2 id=\"res目录\"><a href=\"#res目录\" class=\"headerlink\" title=\"res目录\"></a><code>res</code>目录</h2><p>该目下存放资源文件  </p>\n<ul>\n<li><code>/res/drawable</code>：存放自定义形状、位图等。</li>\n<li><code>/res/layout</code>：存放布局代码，类似于html的css。</li>\n</ul>\n<h2 id=\"app-mipmap\"><a href=\"#app-mipmap\" class=\"headerlink\" title=\"/app/mipmap\"></a><code>/app/mipmap</code></h2><p>存放app启动图标、多种分辨率图片资源。</p>\n<h2 id=\"app-values目录\"><a href=\"#app-values目录\" class=\"headerlink\" title=\"/app/values目录\"></a><code>/app/values</code>目录</h2><p>存放颜色、字符串、样式资源，也就是存放定义相关的常量。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>因为最近想把学的java知识进行应用一下，然后考虑到不管做什么项目基本上都用的上Android及它是使用java语言来编写的。学习的目标是了解安卓项目开发的流程，能够独立编写简单应用即可。因为以后可能不会经常编写Android程序，为了以后拾起的时候有个参考，所以对安卓的一些基本知识进行简单的记录一下。</p>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><p>一个App项目的目录结构如下：<br>","more":"<br><img src=\"/images/androidAppIndex.png\" alt=\"目录结构\"></p>\n<h1 id=\"常用目录文件作用\"><a href=\"#常用目录文件作用\" class=\"headerlink\" title=\"常用目录文件作用\"></a>常用目录文件作用</h1><h2 id=\"app-manifests-AndroidManifest-xml\"><a href=\"#app-manifests-AndroidManifest-xml\" class=\"headerlink\" title=\"/app/manifests/AndroidManifest.xml\"></a><code>/app/manifests/AndroidManifest.xml</code></h2><p>这个是app的全局配置文件相关属性说明如下：  </p>\n<ul>\n<li><code>android:icon</code>：应用图标</li>\n<li><code>android:label</code>：应用名称</li>\n<li>设置应用启动的入口，在<code>activity</code>标签中加入下面代码<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"app-java-myapplication\"><a href=\"#app-java-myapplication\" class=\"headerlink\" title=\"/app/java/myapplication\"></a><code>/app/java/myapplication</code></h2><p>这个目录存放的是java代码，包含<code>activity</code>和自定义类。</p>\n<h2 id=\"res目录\"><a href=\"#res目录\" class=\"headerlink\" title=\"res目录\"></a><code>res</code>目录</h2><p>该目下存放资源文件  </p>\n<ul>\n<li><code>/res/drawable</code>：存放自定义形状、位图等。</li>\n<li><code>/res/layout</code>：存放布局代码，类似于html的css。</li>\n</ul>\n<h2 id=\"app-mipmap\"><a href=\"#app-mipmap\" class=\"headerlink\" title=\"/app/mipmap\"></a><code>/app/mipmap</code></h2><p>存放app启动图标、多种分辨率图片资源。</p>\n<h2 id=\"app-values目录\"><a href=\"#app-values目录\" class=\"headerlink\" title=\"/app/values目录\"></a><code>/app/values</code>目录</h2><p>存放颜色、字符串、样式资源，也就是存放定义相关的常量。</p>"},{"title":"黑苹果的折腾手记","date":"2018-11-04T16:00:00.000Z","_content":"# 写在前面\n情不知所起，一往而深。也不知道为什么突然就想折腾一下黑苹果，确实不负人们所说，黑苹果果然是比较难折腾的。\n但如果能顺利装上黑苹果，那你对装系统肯定会有更深的认识。苹果系统使用起来确实感觉比Windows有很多人性化的设计，界面也更加漂亮，酷炫，还是值得折腾的。花了一周左右的时间成功装上了`10.14`，目前已经驱动集显、声卡、网卡、电量显示、亮度调节基本使用了，简单记录一下自己爬过的那些坑。\n下面是系统界面。\n![桌面](/images/apple_home.png)\n需要注意的是每个人的电脑配置几乎都不一样，不可生搬硬套，方法仅供参考。\n我的电脑配置如下：\n电脑型号:ASUS FL5500L  \n主板：X555LD  \n处理器：i7 4510U  \n显卡（核显）：hd4400  \n**折腾黑苹果的几点建议**\n1. 准备两个u盘，一个做苹果镜像，一个做成pe盘。因为可能会经常进不去系统，所以需要pe盘来做修复。\n2. 善于使用搜索引擎，多尝试。每个人的硬件都不太一样，同一个问题别人的方法不一定适合你，但肯定是能找到一个解决办法的。\n3. 耐心。\n<!--more-->\n\n# 整个流程\n整个装黑苹果主要分成两部分工作：\n* 装系统\n* 装驱动、打补丁、配置clover文件\n\n# 具体操作及注意事项\n## 找合适的`efi`和`系统镜像`\n`efi`就是操作系统的引导文件，苹果系统一般可以用`clover`来做开机引导。\n这一步很简单也很难，因为资源网上都有，但是要找到适合你机型的比较困难。如果找不到合适的引导文件，直接就进不去装系统的界面。\n这里推荐一个博客[黑果小兵的部落阁](https://blog.daliansky.net),这里有做好的系统，可以找找有没适合自己的系统，博客里也有相关教程。\n[https://github.com/sqlsec/clover](https://github.com/sqlsec/clover)这里也整理了很多机型的efi。  \n这里有一篇我对[原版镜像制作的全过程记录](https://www.jianshu.com/p/5a8d07821cc0)\n\n## 开始装系统\n### 使用`etcher`烧写系统\n使用这款软件烧写系统比较方便。\n下载[etcher](https://www.balena.io/etcher/)，插入u盘，选择镜像点击烧写即可。\n\n### 使用Windows磁盘管理工具分出一块磁盘来装系统\n使用`压缩卷`来新建一个大小大于80G的卷。这里 **不需要分配盘符，不需要格式化**。\n\n### 开始装系统\n* 关闭电脑重新开机，开机时狂`Esc`（以自己电脑进入bios的方式为准）。进入bios后选择自己做好系统的u盘。\n\n* 不出意外会进入clover的引导界面类似下图\n![clover](/images/clover1.jpg)\n如果出现了这个界面但是找不到，苹果的系统盘，那可能是clover的版本不支持你下的镜像版本，需要找一个版本新一点的clover。\n\n* 选择苹果的安装盘，回车  \n一切正常的话会进入跑码阶段。这个阶段是将u盘的镜像读到电脑磁盘上。\n跑完码之后clover界面会多出一个启动项，选择回车。  \n如果跑码阶段挺住很久不动，那说明这份clover配置不适合你的机型，可以根据错误代码查找解决方法，也可以直接换一份efi。\n\n* 如果一切顺利将会进入安装界面\n1. 选择磁盘工具，对我们准备好的那个大于80g的磁盘抹盘，格式选择`mac扩展（日志式）`  \n如果抹盘失败，很大可能是你的esp分区小于200m，可以用diskGenius对esp重新分配大小。\n2. 回到安装界面，选择安装系统，等待安装完成即可。\n\n## 驱动安装及clover文件配置\n### 网卡\n很多人都说大部分笔记本的网卡无解，苹果系统驱动不了。有两种选择：\n1. 买一个可以驱动的无线给自己电脑装上。\n2. 买一个USB无线网卡，插上装个驱动即可。\n\n### 显卡\n显卡正确驱动的话dock应该是半透明的，且在关于本机中显存不会是7m或者其它更小的值。\n成功驱动显卡在于，选择正确的`ig-platform-id`,可以使用[clover configurator](https://mackie100projects.altervista.org/clover-configurator/)\n根据自己显卡的型号选择合适的`ig-platform-id`,而且这里还跟`smbios`的机型有关，这里需要设置成和自己cpu参数相近的参数。  \n**这两个参数还会影响到声卡是否能正常驱动**\n\n\n\n\n### 声卡\n两种方式  \n* 使用万能声卡驱动`VoodooHDA.kext`放在clover/kexts目录下.重启，成功驱动界面应该如下\n![](/images/voice.png)\n我的放上这个驱动后直接不能开机，所以我选择了第二种方式。\n\n* 使用`AppleALC.kext`。\n\nclover 中的`acpi`选中如下两项：\n![声卡配置](/images/voiceconfig.png)\n`boot` 中的`custom flags`中添加`-lilubetaall`参数\n\n###  电量显示\n* clover 开机界面按f4 提取`dsdt`,将会存放到`clover/ACPI/origin`目录下。\n* 使用`macisal`对提取的`DSDT.aml`改错。\n常见错误：一连串`zero`直接删掉，或注释；同一代码块在return 语句后面如果还有语句直接删除。\n* 改完错后开始电源打补丁。有两种选择，一、自己修改，将一些变量大于8的位数拆开。具体参考[http://bbs.appleosx.cn/forum.php?mod=viewthread&tid=128](http://bbs.appleosx.cn/forum.php?mod=viewthread&tid=128)\n二、在[这里](https://github.com/RehabMan/Laptop-DSDT-Patch/tree/master/battery)找有没有适合自己电脑的补丁,直接打上。修改完后放到`clover/ACPI/patch`\n* 打完补丁后把`ACPIBatteryManager.kext`放在clover的驱动目录下，重启。\n如果没有显示，尝试拔下充电线，重启是否有正常显示。\n\n### 亮度\n将`SSDT-PNLF.aml`、`SSDT-ALS0.aml`两个文件放在`clover/ACPI/patch`目录下，另外一个就是\n跟前面提的`ig-platform-id`设置也有关系，平台选对了就能正常显示。\n设置成功后应该有亮度调节滑块如下图：\n![亮度](/images/liangdu.png)\n\n### 触摸板\n* 使用`ApplePS2SmartTouchPad.kext`，正常驱动设置界面如下：\n![触摸板](/images/touchpad.png)\n可能会出现以下情况，触摸板可以正常用，比如双指滑动，但是可能不能点击，设置中还是没有找到触摸板。\n我遇到这种情况在装上电源驱动，打上`dsdt`补丁后就又正常显示了。\n* 修改`ApplePS2SmartTouchPad.kext`，定制自己的手势。\n驱动触摸板后发现一些双指和三指的手势并没有效果，这时候就需要修改源文件了。\n在`ApplePS2SmartTouchPad.kext/Resources`目录下有一个说明文档，给出了手势相对应的编号，我的版本是v 4.6.8,\n需要注意的是，有些编号已经失效，如3对应的启动器已失效，`f13-f24` 应对应`21-32`，33应为右键。\n![](/images/finger_gesture.png)\n修改思路：修改`ApplePS2SmartTouchPad.kext/info.plist`中的`preferences`相应手势对应动作编号,如果需要绑定其它快捷键，可以先在电脑中设置好快捷键，再修改\n`ApplePS2SmartTouchPad.kext/plugins`中的`ApplePS2Keyboard.kext`,将`f13-f24`定义为你设置的快捷键，再修改`ApplePS2SmartTouchPad.kext/info.plist`中手势对应`f13-f24`相应的编号。  \n修改后手势功能如下：\n**双指：**\n1. 点击---------右键\n2. 左边缘往右----切换到左空间\n3. 有边缘往左----切换到右空间  \n**三指：**\n1. 点击-----启动器（系统设置启动器快捷键为ALT CMD L）\n2. 向上-----桌面\n3. 向下-----调度器\n4. 向左-----后退\n5. 向右-----前进\n**四指：**\n1. 点击-----全屏\n2. 向上-----关闭应用\n3. 向下-----最小化应用\n发现问题：不知道什么原因，手势不能映射为锁屏快捷键。\n\n\n\n## 其它问题\n* 开机启动后8个苹果，登陆界面分裂花屏，按一下睡眠后唤醒又显示正常（对于1920*1080屏）。\n解决方案有两种：\n1、进入bios将`csm`设置为`enable`.\n2、将clover的分辨率设置为`1280*1024`,这种方式开机会由大苹果变成小苹果\n\n* `appstore`不能登录问题，如果你有appleid但是没有进过App Store那很可能不能登录。最快也是最方便的方法是，使用iPhone登录一下你的账号完善信息就OK。\n\n## 最后\n   感谢论坛、博客的各位大佬提供的资源及各种问题的解决方案。每个人的机型都不一样，它人的设置只能是当作参考，切勿生搬硬套。\n   **配置文件可到github [下载](https://github.com/fishrong/ASUS-FL5500L-EFI)。**\n   **原版镜像安装可参考简书文章[黑苹果折腾系列(一)原版镜像Mojave 10.14安装全过程记录](https://www.jianshu.com/p/5a8d07821cc0)\n","source":"_posts/2018/2018-11-08-黑苹果折腾手记.md","raw":"---\ntitle: 黑苹果的折腾手记\ndate: 2018-11-05\ncategories: 操作系统\ntags:\n  - hackintosh\n---\n# 写在前面\n情不知所起，一往而深。也不知道为什么突然就想折腾一下黑苹果，确实不负人们所说，黑苹果果然是比较难折腾的。\n但如果能顺利装上黑苹果，那你对装系统肯定会有更深的认识。苹果系统使用起来确实感觉比Windows有很多人性化的设计，界面也更加漂亮，酷炫，还是值得折腾的。花了一周左右的时间成功装上了`10.14`，目前已经驱动集显、声卡、网卡、电量显示、亮度调节基本使用了，简单记录一下自己爬过的那些坑。\n下面是系统界面。\n![桌面](/images/apple_home.png)\n需要注意的是每个人的电脑配置几乎都不一样，不可生搬硬套，方法仅供参考。\n我的电脑配置如下：\n电脑型号:ASUS FL5500L  \n主板：X555LD  \n处理器：i7 4510U  \n显卡（核显）：hd4400  \n**折腾黑苹果的几点建议**\n1. 准备两个u盘，一个做苹果镜像，一个做成pe盘。因为可能会经常进不去系统，所以需要pe盘来做修复。\n2. 善于使用搜索引擎，多尝试。每个人的硬件都不太一样，同一个问题别人的方法不一定适合你，但肯定是能找到一个解决办法的。\n3. 耐心。\n<!--more-->\n\n# 整个流程\n整个装黑苹果主要分成两部分工作：\n* 装系统\n* 装驱动、打补丁、配置clover文件\n\n# 具体操作及注意事项\n## 找合适的`efi`和`系统镜像`\n`efi`就是操作系统的引导文件，苹果系统一般可以用`clover`来做开机引导。\n这一步很简单也很难，因为资源网上都有，但是要找到适合你机型的比较困难。如果找不到合适的引导文件，直接就进不去装系统的界面。\n这里推荐一个博客[黑果小兵的部落阁](https://blog.daliansky.net),这里有做好的系统，可以找找有没适合自己的系统，博客里也有相关教程。\n[https://github.com/sqlsec/clover](https://github.com/sqlsec/clover)这里也整理了很多机型的efi。  \n这里有一篇我对[原版镜像制作的全过程记录](https://www.jianshu.com/p/5a8d07821cc0)\n\n## 开始装系统\n### 使用`etcher`烧写系统\n使用这款软件烧写系统比较方便。\n下载[etcher](https://www.balena.io/etcher/)，插入u盘，选择镜像点击烧写即可。\n\n### 使用Windows磁盘管理工具分出一块磁盘来装系统\n使用`压缩卷`来新建一个大小大于80G的卷。这里 **不需要分配盘符，不需要格式化**。\n\n### 开始装系统\n* 关闭电脑重新开机，开机时狂`Esc`（以自己电脑进入bios的方式为准）。进入bios后选择自己做好系统的u盘。\n\n* 不出意外会进入clover的引导界面类似下图\n![clover](/images/clover1.jpg)\n如果出现了这个界面但是找不到，苹果的系统盘，那可能是clover的版本不支持你下的镜像版本，需要找一个版本新一点的clover。\n\n* 选择苹果的安装盘，回车  \n一切正常的话会进入跑码阶段。这个阶段是将u盘的镜像读到电脑磁盘上。\n跑完码之后clover界面会多出一个启动项，选择回车。  \n如果跑码阶段挺住很久不动，那说明这份clover配置不适合你的机型，可以根据错误代码查找解决方法，也可以直接换一份efi。\n\n* 如果一切顺利将会进入安装界面\n1. 选择磁盘工具，对我们准备好的那个大于80g的磁盘抹盘，格式选择`mac扩展（日志式）`  \n如果抹盘失败，很大可能是你的esp分区小于200m，可以用diskGenius对esp重新分配大小。\n2. 回到安装界面，选择安装系统，等待安装完成即可。\n\n## 驱动安装及clover文件配置\n### 网卡\n很多人都说大部分笔记本的网卡无解，苹果系统驱动不了。有两种选择：\n1. 买一个可以驱动的无线给自己电脑装上。\n2. 买一个USB无线网卡，插上装个驱动即可。\n\n### 显卡\n显卡正确驱动的话dock应该是半透明的，且在关于本机中显存不会是7m或者其它更小的值。\n成功驱动显卡在于，选择正确的`ig-platform-id`,可以使用[clover configurator](https://mackie100projects.altervista.org/clover-configurator/)\n根据自己显卡的型号选择合适的`ig-platform-id`,而且这里还跟`smbios`的机型有关，这里需要设置成和自己cpu参数相近的参数。  \n**这两个参数还会影响到声卡是否能正常驱动**\n\n\n\n\n### 声卡\n两种方式  \n* 使用万能声卡驱动`VoodooHDA.kext`放在clover/kexts目录下.重启，成功驱动界面应该如下\n![](/images/voice.png)\n我的放上这个驱动后直接不能开机，所以我选择了第二种方式。\n\n* 使用`AppleALC.kext`。\n\nclover 中的`acpi`选中如下两项：\n![声卡配置](/images/voiceconfig.png)\n`boot` 中的`custom flags`中添加`-lilubetaall`参数\n\n###  电量显示\n* clover 开机界面按f4 提取`dsdt`,将会存放到`clover/ACPI/origin`目录下。\n* 使用`macisal`对提取的`DSDT.aml`改错。\n常见错误：一连串`zero`直接删掉，或注释；同一代码块在return 语句后面如果还有语句直接删除。\n* 改完错后开始电源打补丁。有两种选择，一、自己修改，将一些变量大于8的位数拆开。具体参考[http://bbs.appleosx.cn/forum.php?mod=viewthread&tid=128](http://bbs.appleosx.cn/forum.php?mod=viewthread&tid=128)\n二、在[这里](https://github.com/RehabMan/Laptop-DSDT-Patch/tree/master/battery)找有没有适合自己电脑的补丁,直接打上。修改完后放到`clover/ACPI/patch`\n* 打完补丁后把`ACPIBatteryManager.kext`放在clover的驱动目录下，重启。\n如果没有显示，尝试拔下充电线，重启是否有正常显示。\n\n### 亮度\n将`SSDT-PNLF.aml`、`SSDT-ALS0.aml`两个文件放在`clover/ACPI/patch`目录下，另外一个就是\n跟前面提的`ig-platform-id`设置也有关系，平台选对了就能正常显示。\n设置成功后应该有亮度调节滑块如下图：\n![亮度](/images/liangdu.png)\n\n### 触摸板\n* 使用`ApplePS2SmartTouchPad.kext`，正常驱动设置界面如下：\n![触摸板](/images/touchpad.png)\n可能会出现以下情况，触摸板可以正常用，比如双指滑动，但是可能不能点击，设置中还是没有找到触摸板。\n我遇到这种情况在装上电源驱动，打上`dsdt`补丁后就又正常显示了。\n* 修改`ApplePS2SmartTouchPad.kext`，定制自己的手势。\n驱动触摸板后发现一些双指和三指的手势并没有效果，这时候就需要修改源文件了。\n在`ApplePS2SmartTouchPad.kext/Resources`目录下有一个说明文档，给出了手势相对应的编号，我的版本是v 4.6.8,\n需要注意的是，有些编号已经失效，如3对应的启动器已失效，`f13-f24` 应对应`21-32`，33应为右键。\n![](/images/finger_gesture.png)\n修改思路：修改`ApplePS2SmartTouchPad.kext/info.plist`中的`preferences`相应手势对应动作编号,如果需要绑定其它快捷键，可以先在电脑中设置好快捷键，再修改\n`ApplePS2SmartTouchPad.kext/plugins`中的`ApplePS2Keyboard.kext`,将`f13-f24`定义为你设置的快捷键，再修改`ApplePS2SmartTouchPad.kext/info.plist`中手势对应`f13-f24`相应的编号。  \n修改后手势功能如下：\n**双指：**\n1. 点击---------右键\n2. 左边缘往右----切换到左空间\n3. 有边缘往左----切换到右空间  \n**三指：**\n1. 点击-----启动器（系统设置启动器快捷键为ALT CMD L）\n2. 向上-----桌面\n3. 向下-----调度器\n4. 向左-----后退\n5. 向右-----前进\n**四指：**\n1. 点击-----全屏\n2. 向上-----关闭应用\n3. 向下-----最小化应用\n发现问题：不知道什么原因，手势不能映射为锁屏快捷键。\n\n\n\n## 其它问题\n* 开机启动后8个苹果，登陆界面分裂花屏，按一下睡眠后唤醒又显示正常（对于1920*1080屏）。\n解决方案有两种：\n1、进入bios将`csm`设置为`enable`.\n2、将clover的分辨率设置为`1280*1024`,这种方式开机会由大苹果变成小苹果\n\n* `appstore`不能登录问题，如果你有appleid但是没有进过App Store那很可能不能登录。最快也是最方便的方法是，使用iPhone登录一下你的账号完善信息就OK。\n\n## 最后\n   感谢论坛、博客的各位大佬提供的资源及各种问题的解决方案。每个人的机型都不一样，它人的设置只能是当作参考，切勿生搬硬套。\n   **配置文件可到github [下载](https://github.com/fishrong/ASUS-FL5500L-EFI)。**\n   **原版镜像安装可参考简书文章[黑苹果折腾系列(一)原版镜像Mojave 10.14安装全过程记录](https://www.jianshu.com/p/5a8d07821cc0)\n","slug":"2018-2018-11-08-黑苹果折腾手记","published":1,"updated":"2018-11-20T03:21:05.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp191uag002nd3fo78c7a7p3","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>情不知所起，一往而深。也不知道为什么突然就想折腾一下黑苹果，确实不负人们所说，黑苹果果然是比较难折腾的。<br>但如果能顺利装上黑苹果，那你对装系统肯定会有更深的认识。苹果系统使用起来确实感觉比Windows有很多人性化的设计，界面也更加漂亮，酷炫，还是值得折腾的。花了一周左右的时间成功装上了<code>10.14</code>，目前已经驱动集显、声卡、网卡、电量显示、亮度调节基本使用了，简单记录一下自己爬过的那些坑。<br>下面是系统界面。<br><img src=\"/images/apple_home.png\" alt=\"桌面\"><br>需要注意的是每个人的电脑配置几乎都不一样，不可生搬硬套，方法仅供参考。<br>我的电脑配置如下：<br>电脑型号:ASUS FL5500L<br>主板：X555LD<br>处理器：i7 4510U<br>显卡（核显）：hd4400<br><strong>折腾黑苹果的几点建议</strong></p>\n<ol>\n<li>准备两个u盘，一个做苹果镜像，一个做成pe盘。因为可能会经常进不去系统，所以需要pe盘来做修复。</li>\n<li>善于使用搜索引擎，多尝试。每个人的硬件都不太一样，同一个问题别人的方法不一定适合你，但肯定是能找到一个解决办法的。</li>\n<li>耐心。<a id=\"more\"></a>\n</li>\n</ol>\n<h1 id=\"整个流程\"><a href=\"#整个流程\" class=\"headerlink\" title=\"整个流程\"></a>整个流程</h1><p>整个装黑苹果主要分成两部分工作：</p>\n<ul>\n<li>装系统</li>\n<li>装驱动、打补丁、配置clover文件</li>\n</ul>\n<h1 id=\"具体操作及注意事项\"><a href=\"#具体操作及注意事项\" class=\"headerlink\" title=\"具体操作及注意事项\"></a>具体操作及注意事项</h1><h2 id=\"找合适的efi和系统镜像\"><a href=\"#找合适的efi和系统镜像\" class=\"headerlink\" title=\"找合适的efi和系统镜像\"></a>找合适的<code>efi</code>和<code>系统镜像</code></h2><p><code>efi</code>就是操作系统的引导文件，苹果系统一般可以用<code>clover</code>来做开机引导。<br>这一步很简单也很难，因为资源网上都有，但是要找到适合你机型的比较困难。如果找不到合适的引导文件，直接就进不去装系统的界面。<br>这里推荐一个博客<a href=\"https://blog.daliansky.net\" target=\"_blank\" rel=\"noopener\">黑果小兵的部落阁</a>,这里有做好的系统，可以找找有没适合自己的系统，博客里也有相关教程。<br><a href=\"https://github.com/sqlsec/clover\" target=\"_blank\" rel=\"noopener\">https://github.com/sqlsec/clover</a>这里也整理了很多机型的efi。<br>这里有一篇我对<a href=\"https://www.jianshu.com/p/5a8d07821cc0\" target=\"_blank\" rel=\"noopener\">原版镜像制作的全过程记录</a></p>\n<h2 id=\"开始装系统\"><a href=\"#开始装系统\" class=\"headerlink\" title=\"开始装系统\"></a>开始装系统</h2><h3 id=\"使用etcher烧写系统\"><a href=\"#使用etcher烧写系统\" class=\"headerlink\" title=\"使用etcher烧写系统\"></a>使用<code>etcher</code>烧写系统</h3><p>使用这款软件烧写系统比较方便。<br>下载<a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"noopener\">etcher</a>，插入u盘，选择镜像点击烧写即可。</p>\n<h3 id=\"使用Windows磁盘管理工具分出一块磁盘来装系统\"><a href=\"#使用Windows磁盘管理工具分出一块磁盘来装系统\" class=\"headerlink\" title=\"使用Windows磁盘管理工具分出一块磁盘来装系统\"></a>使用Windows磁盘管理工具分出一块磁盘来装系统</h3><p>使用<code>压缩卷</code>来新建一个大小大于80G的卷。这里 <strong>不需要分配盘符，不需要格式化</strong>。</p>\n<h3 id=\"开始装系统-1\"><a href=\"#开始装系统-1\" class=\"headerlink\" title=\"开始装系统\"></a>开始装系统</h3><ul>\n<li><p>关闭电脑重新开机，开机时狂<code>Esc</code>（以自己电脑进入bios的方式为准）。进入bios后选择自己做好系统的u盘。</p>\n</li>\n<li><p>不出意外会进入clover的引导界面类似下图<br><img src=\"/images/clover1.jpg\" alt=\"clover\"><br>如果出现了这个界面但是找不到，苹果的系统盘，那可能是clover的版本不支持你下的镜像版本，需要找一个版本新一点的clover。</p>\n</li>\n<li><p>选择苹果的安装盘，回车<br>一切正常的话会进入跑码阶段。这个阶段是将u盘的镜像读到电脑磁盘上。<br>跑完码之后clover界面会多出一个启动项，选择回车。<br>如果跑码阶段挺住很久不动，那说明这份clover配置不适合你的机型，可以根据错误代码查找解决方法，也可以直接换一份efi。</p>\n</li>\n<li><p>如果一切顺利将会进入安装界面</p>\n</li>\n</ul>\n<ol>\n<li>选择磁盘工具，对我们准备好的那个大于80g的磁盘抹盘，格式选择<code>mac扩展（日志式）</code><br>如果抹盘失败，很大可能是你的esp分区小于200m，可以用diskGenius对esp重新分配大小。</li>\n<li>回到安装界面，选择安装系统，等待安装完成即可。</li>\n</ol>\n<h2 id=\"驱动安装及clover文件配置\"><a href=\"#驱动安装及clover文件配置\" class=\"headerlink\" title=\"驱动安装及clover文件配置\"></a>驱动安装及clover文件配置</h2><h3 id=\"网卡\"><a href=\"#网卡\" class=\"headerlink\" title=\"网卡\"></a>网卡</h3><p>很多人都说大部分笔记本的网卡无解，苹果系统驱动不了。有两种选择：</p>\n<ol>\n<li>买一个可以驱动的无线给自己电脑装上。</li>\n<li>买一个USB无线网卡，插上装个驱动即可。</li>\n</ol>\n<h3 id=\"显卡\"><a href=\"#显卡\" class=\"headerlink\" title=\"显卡\"></a>显卡</h3><p>显卡正确驱动的话dock应该是半透明的，且在关于本机中显存不会是7m或者其它更小的值。<br>成功驱动显卡在于，选择正确的<code>ig-platform-id</code>,可以使用<a href=\"https://mackie100projects.altervista.org/clover-configurator/\" target=\"_blank\" rel=\"noopener\">clover configurator</a><br>根据自己显卡的型号选择合适的<code>ig-platform-id</code>,而且这里还跟<code>smbios</code>的机型有关，这里需要设置成和自己cpu参数相近的参数。<br><strong>这两个参数还会影响到声卡是否能正常驱动</strong></p>\n<h3 id=\"声卡\"><a href=\"#声卡\" class=\"headerlink\" title=\"声卡\"></a>声卡</h3><p>两种方式  </p>\n<ul>\n<li><p>使用万能声卡驱动<code>VoodooHDA.kext</code>放在clover/kexts目录下.重启，成功驱动界面应该如下<br><img src=\"/images/voice.png\" alt=\"\"><br>我的放上这个驱动后直接不能开机，所以我选择了第二种方式。</p>\n</li>\n<li><p>使用<code>AppleALC.kext</code>。</p>\n</li>\n</ul>\n<p>clover 中的<code>acpi</code>选中如下两项：<br><img src=\"/images/voiceconfig.png\" alt=\"声卡配置\"><br><code>boot</code> 中的<code>custom flags</code>中添加<code>-lilubetaall</code>参数</p>\n<h3 id=\"电量显示\"><a href=\"#电量显示\" class=\"headerlink\" title=\"电量显示\"></a>电量显示</h3><ul>\n<li>clover 开机界面按f4 提取<code>dsdt</code>,将会存放到<code>clover/ACPI/origin</code>目录下。</li>\n<li>使用<code>macisal</code>对提取的<code>DSDT.aml</code>改错。<br>常见错误：一连串<code>zero</code>直接删掉，或注释；同一代码块在return 语句后面如果还有语句直接删除。</li>\n<li>改完错后开始电源打补丁。有两种选择，一、自己修改，将一些变量大于8的位数拆开。具体参考<a href=\"http://bbs.appleosx.cn/forum.php?mod=viewthread&amp;tid=128\" target=\"_blank\" rel=\"noopener\">http://bbs.appleosx.cn/forum.php?mod=viewthread&amp;tid=128</a><br>二、在<a href=\"https://github.com/RehabMan/Laptop-DSDT-Patch/tree/master/battery\" target=\"_blank\" rel=\"noopener\">这里</a>找有没有适合自己电脑的补丁,直接打上。修改完后放到<code>clover/ACPI/patch</code></li>\n<li>打完补丁后把<code>ACPIBatteryManager.kext</code>放在clover的驱动目录下，重启。<br>如果没有显示，尝试拔下充电线，重启是否有正常显示。</li>\n</ul>\n<h3 id=\"亮度\"><a href=\"#亮度\" class=\"headerlink\" title=\"亮度\"></a>亮度</h3><p>将<code>SSDT-PNLF.aml</code>、<code>SSDT-ALS0.aml</code>两个文件放在<code>clover/ACPI/patch</code>目录下，另外一个就是<br>跟前面提的<code>ig-platform-id</code>设置也有关系，平台选对了就能正常显示。<br>设置成功后应该有亮度调节滑块如下图：<br><img src=\"/images/liangdu.png\" alt=\"亮度\"></p>\n<h3 id=\"触摸板\"><a href=\"#触摸板\" class=\"headerlink\" title=\"触摸板\"></a>触摸板</h3><ul>\n<li>使用<code>ApplePS2SmartTouchPad.kext</code>，正常驱动设置界面如下：<br><img src=\"/images/touchpad.png\" alt=\"触摸板\"><br>可能会出现以下情况，触摸板可以正常用，比如双指滑动，但是可能不能点击，设置中还是没有找到触摸板。<br>我遇到这种情况在装上电源驱动，打上<code>dsdt</code>补丁后就又正常显示了。</li>\n<li>修改<code>ApplePS2SmartTouchPad.kext</code>，定制自己的手势。<br>驱动触摸板后发现一些双指和三指的手势并没有效果，这时候就需要修改源文件了。<br>在<code>ApplePS2SmartTouchPad.kext/Resources</code>目录下有一个说明文档，给出了手势相对应的编号，我的版本是v 4.6.8,<br>需要注意的是，有些编号已经失效，如3对应的启动器已失效，<code>f13-f24</code> 应对应<code>21-32</code>，33应为右键。<br><img src=\"/images/finger_gesture.png\" alt=\"\"><br>修改思路：修改<code>ApplePS2SmartTouchPad.kext/info.plist</code>中的<code>preferences</code>相应手势对应动作编号,如果需要绑定其它快捷键，可以先在电脑中设置好快捷键，再修改<br><code>ApplePS2SmartTouchPad.kext/plugins</code>中的<code>ApplePS2Keyboard.kext</code>,将<code>f13-f24</code>定义为你设置的快捷键，再修改<code>ApplePS2SmartTouchPad.kext/info.plist</code>中手势对应<code>f13-f24</code>相应的编号。<br>修改后手势功能如下：<br><strong>双指：</strong></li>\n</ul>\n<ol>\n<li>点击———右键</li>\n<li>左边缘往右—-切换到左空间</li>\n<li>有边缘往左—-切换到右空间<br><strong>三指：</strong></li>\n<li>点击—–启动器（系统设置启动器快捷键为ALT CMD L）</li>\n<li>向上—–桌面</li>\n<li>向下—–调度器</li>\n<li>向左—–后退</li>\n<li>向右—–前进<br><strong>四指：</strong></li>\n<li>点击—–全屏</li>\n<li>向上—–关闭应用</li>\n<li>向下—–最小化应用<br>发现问题：不知道什么原因，手势不能映射为锁屏快捷键。</li>\n</ol>\n<h2 id=\"其它问题\"><a href=\"#其它问题\" class=\"headerlink\" title=\"其它问题\"></a>其它问题</h2><ul>\n<li><p>开机启动后8个苹果，登陆界面分裂花屏，按一下睡眠后唤醒又显示正常（对于1920<em>1080屏）。<br>解决方案有两种：<br>1、进入bios将<code>csm</code>设置为<code>enable</code>.<br>2、将clover的分辨率设置为`1280</em>1024`,这种方式开机会由大苹果变成小苹果</p>\n</li>\n<li><p><code>appstore</code>不能登录问题，如果你有appleid但是没有进过App Store那很可能不能登录。最快也是最方便的方法是，使用iPhone登录一下你的账号完善信息就OK。</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>   感谢论坛、博客的各位大佬提供的资源及各种问题的解决方案。每个人的机型都不一样，它人的设置只能是当作参考，切勿生搬硬套。<br>   <strong>配置文件可到github <a href=\"https://github.com/fishrong/ASUS-FL5500L-EFI\" target=\"_blank\" rel=\"noopener\">下载</a>。</strong><br>   **原版镜像安装可参考简书文章<a href=\"https://www.jianshu.com/p/5a8d07821cc0\" target=\"_blank\" rel=\"noopener\">黑苹果折腾系列(一)原版镜像Mojave 10.14安装全过程记录</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>情不知所起，一往而深。也不知道为什么突然就想折腾一下黑苹果，确实不负人们所说，黑苹果果然是比较难折腾的。<br>但如果能顺利装上黑苹果，那你对装系统肯定会有更深的认识。苹果系统使用起来确实感觉比Windows有很多人性化的设计，界面也更加漂亮，酷炫，还是值得折腾的。花了一周左右的时间成功装上了<code>10.14</code>，目前已经驱动集显、声卡、网卡、电量显示、亮度调节基本使用了，简单记录一下自己爬过的那些坑。<br>下面是系统界面。<br><img src=\"/images/apple_home.png\" alt=\"桌面\"><br>需要注意的是每个人的电脑配置几乎都不一样，不可生搬硬套，方法仅供参考。<br>我的电脑配置如下：<br>电脑型号:ASUS FL5500L<br>主板：X555LD<br>处理器：i7 4510U<br>显卡（核显）：hd4400<br><strong>折腾黑苹果的几点建议</strong></p>\n<ol>\n<li>准备两个u盘，一个做苹果镜像，一个做成pe盘。因为可能会经常进不去系统，所以需要pe盘来做修复。</li>\n<li>善于使用搜索引擎，多尝试。每个人的硬件都不太一样，同一个问题别人的方法不一定适合你，但肯定是能找到一个解决办法的。</li>\n<li>耐心。","more":"</li>\n</ol>\n<h1 id=\"整个流程\"><a href=\"#整个流程\" class=\"headerlink\" title=\"整个流程\"></a>整个流程</h1><p>整个装黑苹果主要分成两部分工作：</p>\n<ul>\n<li>装系统</li>\n<li>装驱动、打补丁、配置clover文件</li>\n</ul>\n<h1 id=\"具体操作及注意事项\"><a href=\"#具体操作及注意事项\" class=\"headerlink\" title=\"具体操作及注意事项\"></a>具体操作及注意事项</h1><h2 id=\"找合适的efi和系统镜像\"><a href=\"#找合适的efi和系统镜像\" class=\"headerlink\" title=\"找合适的efi和系统镜像\"></a>找合适的<code>efi</code>和<code>系统镜像</code></h2><p><code>efi</code>就是操作系统的引导文件，苹果系统一般可以用<code>clover</code>来做开机引导。<br>这一步很简单也很难，因为资源网上都有，但是要找到适合你机型的比较困难。如果找不到合适的引导文件，直接就进不去装系统的界面。<br>这里推荐一个博客<a href=\"https://blog.daliansky.net\" target=\"_blank\" rel=\"noopener\">黑果小兵的部落阁</a>,这里有做好的系统，可以找找有没适合自己的系统，博客里也有相关教程。<br><a href=\"https://github.com/sqlsec/clover\" target=\"_blank\" rel=\"noopener\">https://github.com/sqlsec/clover</a>这里也整理了很多机型的efi。<br>这里有一篇我对<a href=\"https://www.jianshu.com/p/5a8d07821cc0\" target=\"_blank\" rel=\"noopener\">原版镜像制作的全过程记录</a></p>\n<h2 id=\"开始装系统\"><a href=\"#开始装系统\" class=\"headerlink\" title=\"开始装系统\"></a>开始装系统</h2><h3 id=\"使用etcher烧写系统\"><a href=\"#使用etcher烧写系统\" class=\"headerlink\" title=\"使用etcher烧写系统\"></a>使用<code>etcher</code>烧写系统</h3><p>使用这款软件烧写系统比较方便。<br>下载<a href=\"https://www.balena.io/etcher/\" target=\"_blank\" rel=\"noopener\">etcher</a>，插入u盘，选择镜像点击烧写即可。</p>\n<h3 id=\"使用Windows磁盘管理工具分出一块磁盘来装系统\"><a href=\"#使用Windows磁盘管理工具分出一块磁盘来装系统\" class=\"headerlink\" title=\"使用Windows磁盘管理工具分出一块磁盘来装系统\"></a>使用Windows磁盘管理工具分出一块磁盘来装系统</h3><p>使用<code>压缩卷</code>来新建一个大小大于80G的卷。这里 <strong>不需要分配盘符，不需要格式化</strong>。</p>\n<h3 id=\"开始装系统-1\"><a href=\"#开始装系统-1\" class=\"headerlink\" title=\"开始装系统\"></a>开始装系统</h3><ul>\n<li><p>关闭电脑重新开机，开机时狂<code>Esc</code>（以自己电脑进入bios的方式为准）。进入bios后选择自己做好系统的u盘。</p>\n</li>\n<li><p>不出意外会进入clover的引导界面类似下图<br><img src=\"/images/clover1.jpg\" alt=\"clover\"><br>如果出现了这个界面但是找不到，苹果的系统盘，那可能是clover的版本不支持你下的镜像版本，需要找一个版本新一点的clover。</p>\n</li>\n<li><p>选择苹果的安装盘，回车<br>一切正常的话会进入跑码阶段。这个阶段是将u盘的镜像读到电脑磁盘上。<br>跑完码之后clover界面会多出一个启动项，选择回车。<br>如果跑码阶段挺住很久不动，那说明这份clover配置不适合你的机型，可以根据错误代码查找解决方法，也可以直接换一份efi。</p>\n</li>\n<li><p>如果一切顺利将会进入安装界面</p>\n</li>\n</ul>\n<ol>\n<li>选择磁盘工具，对我们准备好的那个大于80g的磁盘抹盘，格式选择<code>mac扩展（日志式）</code><br>如果抹盘失败，很大可能是你的esp分区小于200m，可以用diskGenius对esp重新分配大小。</li>\n<li>回到安装界面，选择安装系统，等待安装完成即可。</li>\n</ol>\n<h2 id=\"驱动安装及clover文件配置\"><a href=\"#驱动安装及clover文件配置\" class=\"headerlink\" title=\"驱动安装及clover文件配置\"></a>驱动安装及clover文件配置</h2><h3 id=\"网卡\"><a href=\"#网卡\" class=\"headerlink\" title=\"网卡\"></a>网卡</h3><p>很多人都说大部分笔记本的网卡无解，苹果系统驱动不了。有两种选择：</p>\n<ol>\n<li>买一个可以驱动的无线给自己电脑装上。</li>\n<li>买一个USB无线网卡，插上装个驱动即可。</li>\n</ol>\n<h3 id=\"显卡\"><a href=\"#显卡\" class=\"headerlink\" title=\"显卡\"></a>显卡</h3><p>显卡正确驱动的话dock应该是半透明的，且在关于本机中显存不会是7m或者其它更小的值。<br>成功驱动显卡在于，选择正确的<code>ig-platform-id</code>,可以使用<a href=\"https://mackie100projects.altervista.org/clover-configurator/\" target=\"_blank\" rel=\"noopener\">clover configurator</a><br>根据自己显卡的型号选择合适的<code>ig-platform-id</code>,而且这里还跟<code>smbios</code>的机型有关，这里需要设置成和自己cpu参数相近的参数。<br><strong>这两个参数还会影响到声卡是否能正常驱动</strong></p>\n<h3 id=\"声卡\"><a href=\"#声卡\" class=\"headerlink\" title=\"声卡\"></a>声卡</h3><p>两种方式  </p>\n<ul>\n<li><p>使用万能声卡驱动<code>VoodooHDA.kext</code>放在clover/kexts目录下.重启，成功驱动界面应该如下<br><img src=\"/images/voice.png\" alt=\"\"><br>我的放上这个驱动后直接不能开机，所以我选择了第二种方式。</p>\n</li>\n<li><p>使用<code>AppleALC.kext</code>。</p>\n</li>\n</ul>\n<p>clover 中的<code>acpi</code>选中如下两项：<br><img src=\"/images/voiceconfig.png\" alt=\"声卡配置\"><br><code>boot</code> 中的<code>custom flags</code>中添加<code>-lilubetaall</code>参数</p>\n<h3 id=\"电量显示\"><a href=\"#电量显示\" class=\"headerlink\" title=\"电量显示\"></a>电量显示</h3><ul>\n<li>clover 开机界面按f4 提取<code>dsdt</code>,将会存放到<code>clover/ACPI/origin</code>目录下。</li>\n<li>使用<code>macisal</code>对提取的<code>DSDT.aml</code>改错。<br>常见错误：一连串<code>zero</code>直接删掉，或注释；同一代码块在return 语句后面如果还有语句直接删除。</li>\n<li>改完错后开始电源打补丁。有两种选择，一、自己修改，将一些变量大于8的位数拆开。具体参考<a href=\"http://bbs.appleosx.cn/forum.php?mod=viewthread&amp;tid=128\" target=\"_blank\" rel=\"noopener\">http://bbs.appleosx.cn/forum.php?mod=viewthread&amp;tid=128</a><br>二、在<a href=\"https://github.com/RehabMan/Laptop-DSDT-Patch/tree/master/battery\" target=\"_blank\" rel=\"noopener\">这里</a>找有没有适合自己电脑的补丁,直接打上。修改完后放到<code>clover/ACPI/patch</code></li>\n<li>打完补丁后把<code>ACPIBatteryManager.kext</code>放在clover的驱动目录下，重启。<br>如果没有显示，尝试拔下充电线，重启是否有正常显示。</li>\n</ul>\n<h3 id=\"亮度\"><a href=\"#亮度\" class=\"headerlink\" title=\"亮度\"></a>亮度</h3><p>将<code>SSDT-PNLF.aml</code>、<code>SSDT-ALS0.aml</code>两个文件放在<code>clover/ACPI/patch</code>目录下，另外一个就是<br>跟前面提的<code>ig-platform-id</code>设置也有关系，平台选对了就能正常显示。<br>设置成功后应该有亮度调节滑块如下图：<br><img src=\"/images/liangdu.png\" alt=\"亮度\"></p>\n<h3 id=\"触摸板\"><a href=\"#触摸板\" class=\"headerlink\" title=\"触摸板\"></a>触摸板</h3><ul>\n<li>使用<code>ApplePS2SmartTouchPad.kext</code>，正常驱动设置界面如下：<br><img src=\"/images/touchpad.png\" alt=\"触摸板\"><br>可能会出现以下情况，触摸板可以正常用，比如双指滑动，但是可能不能点击，设置中还是没有找到触摸板。<br>我遇到这种情况在装上电源驱动，打上<code>dsdt</code>补丁后就又正常显示了。</li>\n<li>修改<code>ApplePS2SmartTouchPad.kext</code>，定制自己的手势。<br>驱动触摸板后发现一些双指和三指的手势并没有效果，这时候就需要修改源文件了。<br>在<code>ApplePS2SmartTouchPad.kext/Resources</code>目录下有一个说明文档，给出了手势相对应的编号，我的版本是v 4.6.8,<br>需要注意的是，有些编号已经失效，如3对应的启动器已失效，<code>f13-f24</code> 应对应<code>21-32</code>，33应为右键。<br><img src=\"/images/finger_gesture.png\" alt=\"\"><br>修改思路：修改<code>ApplePS2SmartTouchPad.kext/info.plist</code>中的<code>preferences</code>相应手势对应动作编号,如果需要绑定其它快捷键，可以先在电脑中设置好快捷键，再修改<br><code>ApplePS2SmartTouchPad.kext/plugins</code>中的<code>ApplePS2Keyboard.kext</code>,将<code>f13-f24</code>定义为你设置的快捷键，再修改<code>ApplePS2SmartTouchPad.kext/info.plist</code>中手势对应<code>f13-f24</code>相应的编号。<br>修改后手势功能如下：<br><strong>双指：</strong></li>\n</ul>\n<ol>\n<li>点击———右键</li>\n<li>左边缘往右—-切换到左空间</li>\n<li>有边缘往左—-切换到右空间<br><strong>三指：</strong></li>\n<li>点击—–启动器（系统设置启动器快捷键为ALT CMD L）</li>\n<li>向上—–桌面</li>\n<li>向下—–调度器</li>\n<li>向左—–后退</li>\n<li>向右—–前进<br><strong>四指：</strong></li>\n<li>点击—–全屏</li>\n<li>向上—–关闭应用</li>\n<li>向下—–最小化应用<br>发现问题：不知道什么原因，手势不能映射为锁屏快捷键。</li>\n</ol>\n<h2 id=\"其它问题\"><a href=\"#其它问题\" class=\"headerlink\" title=\"其它问题\"></a>其它问题</h2><ul>\n<li><p>开机启动后8个苹果，登陆界面分裂花屏，按一下睡眠后唤醒又显示正常（对于1920<em>1080屏）。<br>解决方案有两种：<br>1、进入bios将<code>csm</code>设置为<code>enable</code>.<br>2、将clover的分辨率设置为`1280</em>1024`,这种方式开机会由大苹果变成小苹果</p>\n</li>\n<li><p><code>appstore</code>不能登录问题，如果你有appleid但是没有进过App Store那很可能不能登录。最快也是最方便的方法是，使用iPhone登录一下你的账号完善信息就OK。</p>\n</li>\n</ul>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>   感谢论坛、博客的各位大佬提供的资源及各种问题的解决方案。每个人的机型都不一样，它人的设置只能是当作参考，切勿生搬硬套。<br>   <strong>配置文件可到github <a href=\"https://github.com/fishrong/ASUS-FL5500L-EFI\" target=\"_blank\" rel=\"noopener\">下载</a>。</strong><br>   **原版镜像安装可参考简书文章<a href=\"https://www.jianshu.com/p/5a8d07821cc0\" target=\"_blank\" rel=\"noopener\">黑苹果折腾系列(一)原版镜像Mojave 10.14安装全过程记录</a></p>"},{"title":"Android初体验(二)常用布局","date":"2018-11-28T11:36:06.000Z","_content":"  安卓中布局管理器有很多种，这里主要记录常用的线性布局、相对布局。\n# 线性布局\n也即`LinearLayout` ，使用这种布局也就意味着在`LinearLayout`标签中的组件（如按钮、文本框等）要么水平排列（默认）、要么垂直排列（设置`android:orientation=\"vertical\"`）。  \n常用属性：\n* `id`：组件的id，新建id语法：`android:id=\"@+id/ll_1\"`，斜杠前为固定写法。\n<!--more-->\n* `orientation`：设置子组件的排列方式，默认水平排列。\n* `gravity`：子组件显示位置，如居中、居右等。右下：`android:gravity=\"right|bottom\"`。\n* `layout_weight`：分配父元素的剩余空间。如：父元素下只有两个组件，两组件的`layout_weight`均\n设为1；则两组件的宽度会变为：`原来宽度`+`1/2父空间剩余宽度`。\n* `padding`：内边距，`父元素属性`，设置子元素与父元素距离。\n* `margin`：外边距，设置同一级元素距离。\n* `width`/`height`：宽度或高度可设的值为以下三个值：\n`match_parent`：匹配父空间，即父空间有多宽它就有多宽。  \n`wrap_content`：与内容宽度一致。  \n`自定义大小`：如`100dp`，单位使用`dp`可以解决多种分辨率适配问题。\n\n# 相对布局\n即`RelativeLayout`，在可以根据相对位置放置组件时使用。默认组件放置在左上角，重叠将覆盖。  \n常用属性：  \n* `gravity`：与线性布局一样。\n* `ignoreGravity`：设置不受`gravity`影响的子组件，如：`android:ignoreGravity=\"@id/ll_1\"`id为ll_1的组件不受`gravity`属性影响。\n* `组件相对于参考组件位置`：如：位于组件id为`ll_2`的右边`android:layout_toRightOf=\"@id/ll_2\"`。\n* `组件与父容器对齐方式`：如：与父容器底部对齐，`android:layout_alignParentBottom=\"true\"`\n* `组件与其它元素的边界对齐`：如：与组件id为`ll_2`的底部对齐，`android:layout_alignBottom=\"@id/ll_2\"`\n* `组件位于父容器的位置`：如：位于父容器中间`android:layout_alignBottom=\"@id/ll_2\"`\n","source":"_posts/2018/2018-11-28-Android初体验-二-常用布局.md","raw":"---\ntitle: Android初体验(二)常用布局\ndate: 2018-11-28 19:36:06\ntags:\n    - Android\n---\n  安卓中布局管理器有很多种，这里主要记录常用的线性布局、相对布局。\n# 线性布局\n也即`LinearLayout` ，使用这种布局也就意味着在`LinearLayout`标签中的组件（如按钮、文本框等）要么水平排列（默认）、要么垂直排列（设置`android:orientation=\"vertical\"`）。  \n常用属性：\n* `id`：组件的id，新建id语法：`android:id=\"@+id/ll_1\"`，斜杠前为固定写法。\n<!--more-->\n* `orientation`：设置子组件的排列方式，默认水平排列。\n* `gravity`：子组件显示位置，如居中、居右等。右下：`android:gravity=\"right|bottom\"`。\n* `layout_weight`：分配父元素的剩余空间。如：父元素下只有两个组件，两组件的`layout_weight`均\n设为1；则两组件的宽度会变为：`原来宽度`+`1/2父空间剩余宽度`。\n* `padding`：内边距，`父元素属性`，设置子元素与父元素距离。\n* `margin`：外边距，设置同一级元素距离。\n* `width`/`height`：宽度或高度可设的值为以下三个值：\n`match_parent`：匹配父空间，即父空间有多宽它就有多宽。  \n`wrap_content`：与内容宽度一致。  \n`自定义大小`：如`100dp`，单位使用`dp`可以解决多种分辨率适配问题。\n\n# 相对布局\n即`RelativeLayout`，在可以根据相对位置放置组件时使用。默认组件放置在左上角，重叠将覆盖。  \n常用属性：  \n* `gravity`：与线性布局一样。\n* `ignoreGravity`：设置不受`gravity`影响的子组件，如：`android:ignoreGravity=\"@id/ll_1\"`id为ll_1的组件不受`gravity`属性影响。\n* `组件相对于参考组件位置`：如：位于组件id为`ll_2`的右边`android:layout_toRightOf=\"@id/ll_2\"`。\n* `组件与父容器对齐方式`：如：与父容器底部对齐，`android:layout_alignParentBottom=\"true\"`\n* `组件与其它元素的边界对齐`：如：与组件id为`ll_2`的底部对齐，`android:layout_alignBottom=\"@id/ll_2\"`\n* `组件位于父容器的位置`：如：位于父容器中间`android:layout_alignBottom=\"@id/ll_2\"`\n","slug":"2018-2018-11-28-Android初体验-二-常用布局","published":1,"updated":"2018-11-28T13:41:41.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp191uah002qd3fot9o5nd2s","content":"<p>  安卓中布局管理器有很多种，这里主要记录常用的线性布局、相对布局。</p>\n<h1 id=\"线性布局\"><a href=\"#线性布局\" class=\"headerlink\" title=\"线性布局\"></a>线性布局</h1><p>也即<code>LinearLayout</code> ，使用这种布局也就意味着在<code>LinearLayout</code>标签中的组件（如按钮、文本框等）要么水平排列（默认）、要么垂直排列（设置<code>android:orientation=&quot;vertical&quot;</code>）。<br>常用属性：</p>\n<ul>\n<li><code>id</code>：组件的id，新建id语法：<code>android:id=&quot;@+id/ll_1&quot;</code>，斜杠前为固定写法。<a id=\"more\"></a></li>\n<li><code>orientation</code>：设置子组件的排列方式，默认水平排列。</li>\n<li><code>gravity</code>：子组件显示位置，如居中、居右等。右下：<code>android:gravity=&quot;right|bottom&quot;</code>。</li>\n<li><code>layout_weight</code>：分配父元素的剩余空间。如：父元素下只有两个组件，两组件的<code>layout_weight</code>均<br>设为1；则两组件的宽度会变为：<code>原来宽度</code>+<code>1/2父空间剩余宽度</code>。</li>\n<li><code>padding</code>：内边距，<code>父元素属性</code>，设置子元素与父元素距离。</li>\n<li><code>margin</code>：外边距，设置同一级元素距离。</li>\n<li><code>width</code>/<code>height</code>：宽度或高度可设的值为以下三个值：<br><code>match_parent</code>：匹配父空间，即父空间有多宽它就有多宽。<br><code>wrap_content</code>：与内容宽度一致。<br><code>自定义大小</code>：如<code>100dp</code>，单位使用<code>dp</code>可以解决多种分辨率适配问题。</li>\n</ul>\n<h1 id=\"相对布局\"><a href=\"#相对布局\" class=\"headerlink\" title=\"相对布局\"></a>相对布局</h1><p>即<code>RelativeLayout</code>，在可以根据相对位置放置组件时使用。默认组件放置在左上角，重叠将覆盖。<br>常用属性：  </p>\n<ul>\n<li><code>gravity</code>：与线性布局一样。</li>\n<li><code>ignoreGravity</code>：设置不受<code>gravity</code>影响的子组件，如：<code>android:ignoreGravity=&quot;@id/ll_1&quot;</code>id为ll_1的组件不受<code>gravity</code>属性影响。</li>\n<li><code>组件相对于参考组件位置</code>：如：位于组件id为<code>ll_2</code>的右边<code>android:layout_toRightOf=&quot;@id/ll_2&quot;</code>。</li>\n<li><code>组件与父容器对齐方式</code>：如：与父容器底部对齐，<code>android:layout_alignParentBottom=&quot;true&quot;</code></li>\n<li><code>组件与其它元素的边界对齐</code>：如：与组件id为<code>ll_2</code>的底部对齐，<code>android:layout_alignBottom=&quot;@id/ll_2&quot;</code></li>\n<li><code>组件位于父容器的位置</code>：如：位于父容器中间<code>android:layout_alignBottom=&quot;@id/ll_2&quot;</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>  安卓中布局管理器有很多种，这里主要记录常用的线性布局、相对布局。</p>\n<h1 id=\"线性布局\"><a href=\"#线性布局\" class=\"headerlink\" title=\"线性布局\"></a>线性布局</h1><p>也即<code>LinearLayout</code> ，使用这种布局也就意味着在<code>LinearLayout</code>标签中的组件（如按钮、文本框等）要么水平排列（默认）、要么垂直排列（设置<code>android:orientation=&quot;vertical&quot;</code>）。<br>常用属性：</p>\n<ul>\n<li><code>id</code>：组件的id，新建id语法：<code>android:id=&quot;@+id/ll_1&quot;</code>，斜杠前为固定写法。","more":"</li>\n<li><code>orientation</code>：设置子组件的排列方式，默认水平排列。</li>\n<li><code>gravity</code>：子组件显示位置，如居中、居右等。右下：<code>android:gravity=&quot;right|bottom&quot;</code>。</li>\n<li><code>layout_weight</code>：分配父元素的剩余空间。如：父元素下只有两个组件，两组件的<code>layout_weight</code>均<br>设为1；则两组件的宽度会变为：<code>原来宽度</code>+<code>1/2父空间剩余宽度</code>。</li>\n<li><code>padding</code>：内边距，<code>父元素属性</code>，设置子元素与父元素距离。</li>\n<li><code>margin</code>：外边距，设置同一级元素距离。</li>\n<li><code>width</code>/<code>height</code>：宽度或高度可设的值为以下三个值：<br><code>match_parent</code>：匹配父空间，即父空间有多宽它就有多宽。<br><code>wrap_content</code>：与内容宽度一致。<br><code>自定义大小</code>：如<code>100dp</code>，单位使用<code>dp</code>可以解决多种分辨率适配问题。</li>\n</ul>\n<h1 id=\"相对布局\"><a href=\"#相对布局\" class=\"headerlink\" title=\"相对布局\"></a>相对布局</h1><p>即<code>RelativeLayout</code>，在可以根据相对位置放置组件时使用。默认组件放置在左上角，重叠将覆盖。<br>常用属性：  </p>\n<ul>\n<li><code>gravity</code>：与线性布局一样。</li>\n<li><code>ignoreGravity</code>：设置不受<code>gravity</code>影响的子组件，如：<code>android:ignoreGravity=&quot;@id/ll_1&quot;</code>id为ll_1的组件不受<code>gravity</code>属性影响。</li>\n<li><code>组件相对于参考组件位置</code>：如：位于组件id为<code>ll_2</code>的右边<code>android:layout_toRightOf=&quot;@id/ll_2&quot;</code>。</li>\n<li><code>组件与父容器对齐方式</code>：如：与父容器底部对齐，<code>android:layout_alignParentBottom=&quot;true&quot;</code></li>\n<li><code>组件与其它元素的边界对齐</code>：如：与组件id为<code>ll_2</code>的底部对齐，<code>android:layout_alignBottom=&quot;@id/ll_2&quot;</code></li>\n<li><code>组件位于父容器的位置</code>：如：位于父容器中间<code>android:layout_alignBottom=&quot;@id/ll_2&quot;</code></li>\n</ul>"},{"layout":"post","title":"2018-11-28-test","date":"2018-11-28T14:17:00.000Z","_content":"\n### hh\n","source":"_posts/2018/2018-11-28-test.md","raw":"layout: post\ntitle: 2018-11-28-test\ndate: '2018-11-28 22:17'\n---\n\n### hh\n","slug":"2018-2018-11-28-test","published":1,"updated":"2018-11-28T14:17:28.836Z","comments":1,"photos":[],"link":"","_id":"cjp199uc30000edfo2i9j7vw1","content":"<h3 id=\"hh\"><a href=\"#hh\" class=\"headerlink\" title=\"hh\"></a>hh</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"hh\"><a href=\"#hh\" class=\"headerlink\" title=\"hh\"></a>hh</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjp191u8t0000d3fo2clcz7l0","category_id":"cjp17j8g7000831foqbmkoeer","_id":"cjp191u960006d3foowb1ra2z"},{"post_id":"cjp191u8x0001d3fokxlfkudc","category_id":"cjp17j8g1000331fo72v8gprd","_id":"cjp191u990009d3fo2e9zg1kg"},{"post_id":"cjp191u900003d3fofo1u8hgr","category_id":"cjp17j8ga000e31fo41r545fe","_id":"cjp191u9c000cd3fovsz956ji"},{"post_id":"cjp191u950005d3fo04nw4k1y","category_id":"cjp17j8gj000p31fo83pzalbt","_id":"cjp191u9e000fd3focesa2ntu"},{"post_id":"cjp191u960008d3fokuoihscz","category_id":"cjp17j8gz001g31foojik1ix3","_id":"cjp191u9f000id3fo9i24owpq"},{"post_id":"cjp191u9a000bd3foocol3696","category_id":"cjp17j8ge000k31fooe14e9mv","_id":"cjp191u9g000ld3fo6to5ad66"},{"post_id":"cjp191u9d000ed3fo99d4tpxj","category_id":"cjp17j8gn000x31fod0lus1xp","_id":"cjp191u9h000od3fozah7ogsw"},{"post_id":"cjp191u9f000hd3foob7ol8og","category_id":"cjp17j8gn000x31fod0lus1xp","_id":"cjp191u9j000rd3folfx8zv4c"},{"post_id":"cjp191u9g000kd3fojr9avv56","category_id":"cjp17j8g1000331fo72v8gprd","_id":"cjp191u9k000ud3fobnystx3x"},{"post_id":"cjp191u9h000nd3fo73n54mct","category_id":"cjp17j8gn000x31fod0lus1xp","_id":"cjp191u9m000xd3fo8sxq3m7e"},{"post_id":"cjp191u9i000qd3fos7tejrwx","category_id":"cjp17j8gn000x31fod0lus1xp","_id":"cjp191u9n0010d3fod2wad6i3"},{"post_id":"cjp191u9j000td3foodtro93c","category_id":"cjp17j8gn000x31fod0lus1xp","_id":"cjp191u9p0013d3fovvukorg0"},{"post_id":"cjp191u9l000wd3fovli4chvh","category_id":"cjp17j8h6001v31folp7jlcyu","_id":"cjp191u9q0016d3fo7tz3gggs"},{"post_id":"cjp191u9m000zd3fosplv30ag","category_id":"cjp17j8ga000e31fo41r545fe","_id":"cjp191u9r0019d3fo3eul4uek"},{"post_id":"cjp191u9o0012d3foyn1hkl4s","category_id":"cjp17j8ge000k31fooe14e9mv","_id":"cjp191u9u001cd3fort3hsbp4"},{"post_id":"cjp191u9p0015d3fo8yozk9ia","category_id":"cjp17j8ga000e31fo41r545fe","_id":"cjp191u9v001fd3fot24d28yl"},{"post_id":"cjp191u9r0018d3foi2t1tij2","category_id":"cjp17j8h6001v31folp7jlcyu","_id":"cjp191u9x001id3foyn7wqift"},{"post_id":"cjp191u9s001bd3fo6n36kkjb","category_id":"cjp17j8ge000k31fooe14e9mv","_id":"cjp191u9y001ld3fofu57jdtz"},{"post_id":"cjp191u9u001ed3foobxu8t1m","category_id":"cjp17j8g7000831foqbmkoeer","_id":"cjp191ua0001od3foknq4oou7"},{"post_id":"cjp191u9w001hd3fo02hpco09","category_id":"cjp17j8ge000k31fooe14e9mv","_id":"cjp191ua1001rd3fofhu3g1zv"},{"post_id":"cjp191u9x001kd3fotq0morjn","category_id":"cjp17j8h6001v31folp7jlcyu","_id":"cjp191ua3001ud3fot52fy3f4"},{"post_id":"cjp191u9z001nd3fowhknlcov","category_id":"cjp17j8gn000x31fod0lus1xp","_id":"cjp191ua4001xd3focuqz70sz"},{"post_id":"cjp191ua0001qd3fozszjmm0m","category_id":"cjp17j8ge000k31fooe14e9mv","_id":"cjp191ua50020d3fo7jrk5pwj"},{"post_id":"cjp191ua2001td3foozeqzjk0","category_id":"cjp17j8i4002n31foxbhnq79t","_id":"cjp191ua70023d3foew397pmz"},{"post_id":"cjp191ua3001wd3fojfiqa50i","category_id":"cjp17j8i4002n31foxbhnq79t","_id":"cjp191ua80026d3fo863nk82n"},{"post_id":"cjp191ua4001zd3fozk3dg3vh","category_id":"cjp17j8i4002n31foxbhnq79t","_id":"cjp191uaa0029d3fohv5mdygy"},{"post_id":"cjp191ua60022d3fouymn42co","category_id":"cjp17j8i4002n31foxbhnq79t","_id":"cjp191uac002cd3foyoxacvh0"},{"post_id":"cjp191ua70025d3fo4n4ohd00","category_id":"cjp17j8gn000x31fod0lus1xp","_id":"cjp191uad002fd3foxwwf7gx1"},{"post_id":"cjp191ua90028d3foh1hoqn8d","category_id":"cjp17j8i4002n31foxbhnq79t","_id":"cjp191uae002id3fo8fbjsjyb"},{"post_id":"cjp191uab002bd3foe6zk5mle","category_id":"cjp17j8ie003b31fo01of0inx","_id":"cjp191uaf002ld3fotfo3oujn"},{"post_id":"cjp191uac002ed3fomnu9sz3k","category_id":"cjp17j8i4002n31foxbhnq79t","_id":"cjp191uag002od3fouu3y97ah"},{"post_id":"cjp191uag002nd3fo78c7a7p3","category_id":"cjp17j8ie003f31fomjuy76zo","_id":"cjp191uai002td3fo43e4biyv"}],"PostTag":[{"post_id":"cjp191u8t0000d3fo2clcz7l0","tag_id":"cjp17j8g7000931foe0k2bv2t","_id":"cjp191u900002d3foma5gnu55"},{"post_id":"cjp191u8x0001d3fokxlfkudc","tag_id":"cjp17j8g3000431fow1innzfc","_id":"cjp191u940004d3fo3ml8anuj"},{"post_id":"cjp191u900003d3fofo1u8hgr","tag_id":"cjp17j8ga000f31fo9pnd1i3m","_id":"cjp191u960007d3fo2pacjosf"},{"post_id":"cjp191u900003d3fofo1u8hgr","tag_id":"cjp17j8gf000l31fo8u2wo2pm","_id":"cjp191u9a000ad3fo74daeh4s"},{"post_id":"cjp191u950005d3fo04nw4k1y","tag_id":"cjp17j8gu001a31fo52k1uxp4","_id":"cjp191u9d000dd3fov5ssjpbr"},{"post_id":"cjp191u950005d3fo04nw4k1y","tag_id":"cjp17j8gz001i31fomcd8a1zt","_id":"cjp191u9e000gd3fod328dno3"},{"post_id":"cjp191u960008d3fokuoihscz","tag_id":"cjp17j8i3002m31foch2o27zm","_id":"cjp191u9f000jd3fova0u9wjb"},{"post_id":"cjp191u960008d3fokuoihscz","tag_id":"cjp17j8i6002s31foihvc3e11","_id":"cjp191u9g000md3fo0r36jcvq"},{"post_id":"cjp191u9a000bd3foocol3696","tag_id":"cjp17j8gk000q31fo2x5wyo3e","_id":"cjp191u9h000pd3foqn08ckrv"},{"post_id":"cjp191u9a000bd3foocol3696","tag_id":"cjp17j8gn000y31fo10enhblp","_id":"cjp191u9j000sd3fookgewc3w"},{"post_id":"cjp191u9a000bd3foocol3696","tag_id":"cjp17j8gp001431fohhupwh0l","_id":"cjp191u9l000vd3fogdjmz0po"},{"post_id":"cjp191u9d000ed3fo99d4tpxj","tag_id":"cjp17j8h4001r31fob5hlmzbu","_id":"cjp191u9m000yd3foqo8c1cmq"},{"post_id":"cjp191u9f000hd3foob7ol8og","tag_id":"cjp17j8hj002c31fohqx2u87r","_id":"cjp191u9o0011d3fo415aoa6c"},{"post_id":"cjp191u9g000kd3fojr9avv56","tag_id":"cjp17j8ie003e31foszzwwsc2","_id":"cjp191u9p0014d3fovfbsrjr6"},{"post_id":"cjp191u9h000nd3fo73n54mct","tag_id":"cjp17j8h7001z31fo5jei0h6c","_id":"cjp191u9q0017d3fouhrvz53g"},{"post_id":"cjp191u9h000nd3fo73n54mct","tag_id":"cjp17j8hf002631fo1qg81h9e","_id":"cjp191u9s001ad3fo906cibtn"},{"post_id":"cjp191u9i000qd3fos7tejrwx","tag_id":"cjp17j8hj002c31fohqx2u87r","_id":"cjp191u9u001dd3focfrqyged"},{"post_id":"cjp191u9i000qd3fos7tejrwx","tag_id":"cjp17j8ib003231fomy2iuban","_id":"cjp191u9w001gd3fo3fy4v44b"},{"post_id":"cjp191u9j000td3foodtro93c","tag_id":"cjp17j8hj002c31fohqx2u87r","_id":"cjp191u9x001jd3fo4w8hwz4f"},{"post_id":"cjp191u9j000td3foodtro93c","tag_id":"cjp17j8if003l31foqtx63pq2","_id":"cjp191u9y001md3fod079muog"},{"post_id":"cjp191u9l000wd3fovli4chvh","tag_id":"cjp17j8h7001z31fo5jei0h6c","_id":"cjp191ua0001pd3fohrngpepy"},{"post_id":"cjp191u9l000wd3fovli4chvh","tag_id":"cjp17j8id003a31fon9ic4zbc","_id":"cjp191ua1001sd3fo76j3zlgk"},{"post_id":"cjp191u9m000zd3fosplv30ag","tag_id":"cjp17j8hj002c31fohqx2u87r","_id":"cjp191ua3001vd3fox96pm7r1"},{"post_id":"cjp191u9m000zd3fosplv30ag","tag_id":"cjp17j8ih003u31fo3f5v968c","_id":"cjp191ua4001yd3fohp5s9871"},{"post_id":"cjp191u9o0012d3foyn1hkl4s","tag_id":"cjp17j8ih003v31fotbvrgx2q","_id":"cjp191ua60021d3folupgdy33"},{"post_id":"cjp191u9o0012d3foyn1hkl4s","tag_id":"cjp17j8ig003n31fo4ibxfean","_id":"cjp191ua70024d3forg7smjaq"},{"post_id":"cjp191u9p0015d3fo8yozk9ia","tag_id":"cjp17j8ig003n31fo4ibxfean","_id":"cjp191ua80027d3fogn4cp931"},{"post_id":"cjp191u9p0015d3fo8yozk9ia","tag_id":"cjp17j8ig003q31fo2zfbt1sj","_id":"cjp191uab002ad3foq3qaxdcv"},{"post_id":"cjp191u9r0018d3foi2t1tij2","tag_id":"cjp17j8ij004231fof8cvg6pi","_id":"cjp191uac002dd3foe3enodrt"},{"post_id":"cjp191u9r0018d3foi2t1tij2","tag_id":"cjp17j8h7001z31fo5jei0h6c","_id":"cjp191uad002gd3focribqpm6"},{"post_id":"cjp191u9s001bd3fo6n36kkjb","tag_id":"cjp17j8ii003z31fo2sa6aujp","_id":"cjp191uaf002jd3fob97vrnhi"},{"post_id":"cjp191u9u001ed3foobxu8t1m","tag_id":"cjp17j8im004g31fo6dv8kr4s","_id":"cjp191uag002md3fo2pw34624"},{"post_id":"cjp191u9u001ed3foobxu8t1m","tag_id":"cjp17j8in004i31fotb1ujj5s","_id":"cjp191uah002pd3fo9wrmh2mu"},{"post_id":"cjp191u9w001hd3fo02hpco09","tag_id":"cjp17j8ii003z31fo2sa6aujp","_id":"cjp191uah002rd3fodsw1udan"},{"post_id":"cjp191u9x001kd3fotq0morjn","tag_id":"cjp17j8im004d31foacvg4mki","_id":"cjp191uai002sd3foiaynrd7w"},{"post_id":"cjp191u9z001nd3fowhknlcov","tag_id":"cjp17j8hj002c31fohqx2u87r","_id":"cjp191uai002ud3foj97fmfvi"},{"post_id":"cjp191u9z001nd3fowhknlcov","tag_id":"cjp17j8il004831foolfcfbio","_id":"cjp191uai002vd3fohom3sdn6"},{"post_id":"cjp191ua0001qd3fozszjmm0m","tag_id":"cjp17j8ig003n31fo4ibxfean","_id":"cjp191uai002wd3fo8syp5xdu"},{"post_id":"cjp191ua0001qd3fozszjmm0m","tag_id":"cjp17j8im004c31foawuat914","_id":"cjp191uai002xd3fom2zbs3q2"},{"post_id":"cjp191ua2001td3foozeqzjk0","tag_id":"cjp17j8in004m31foxoclu7ld","_id":"cjp191uai002yd3foe0j8s2cu"},{"post_id":"cjp191ua2001td3foozeqzjk0","tag_id":"cjp17j8is004y31foldqiu1e4","_id":"cjp191uai002zd3foq2a53c14"},{"post_id":"cjp191ua3001wd3fojfiqa50i","tag_id":"cjp17j8in004m31foxoclu7ld","_id":"cjp191uai0030d3fojxtt4fmt"},{"post_id":"cjp191ua3001wd3fojfiqa50i","tag_id":"cjp17j8ip004s31fotgoqonto","_id":"cjp191uai0031d3fotu1hbowd"},{"post_id":"cjp191ua4001zd3fozk3dg3vh","tag_id":"cjp17j8in004m31foxoclu7ld","_id":"cjp191uai0032d3fo2ehnsgk5"},{"post_id":"cjp191ua60022d3fouymn42co","tag_id":"cjp17j8in004m31foxoclu7ld","_id":"cjp191uaj0033d3fo89ygol0e"},{"post_id":"cjp191ua60022d3fouymn42co","tag_id":"cjp17j8io004o31fopiy8f76l","_id":"cjp191uaj0034d3fomnn92wvr"},{"post_id":"cjp191ua70025d3fo4n4ohd00","tag_id":"cjp17j8hj002c31fohqx2u87r","_id":"cjp191uaj0035d3fozmoqebs8"},{"post_id":"cjp191ua70025d3fo4n4ohd00","tag_id":"cjp17j8it005231fosd2f3ral","_id":"cjp191uaj0036d3fonruflutr"},{"post_id":"cjp191ua90028d3foh1hoqn8d","tag_id":"cjp17j8in004m31foxoclu7ld","_id":"cjp191uaj0037d3foc51nky1k"},{"post_id":"cjp191ua90028d3foh1hoqn8d","tag_id":"cjp17j8iu005631fo25wbecqf","_id":"cjp191uaj0038d3fo4k6ekfr3"},{"post_id":"cjp191uab002bd3foe6zk5mle","tag_id":"cjp17j8iu005731fon7p3az4y","_id":"cjp191uaj0039d3foyd9qyb1t"},{"post_id":"cjp191uab002bd3foe6zk5mle","tag_id":"cjp17j8gf000l31fo8u2wo2pm","_id":"cjp191uaj003ad3fovdt6e1cg"},{"post_id":"cjp191uac002ed3fomnu9sz3k","tag_id":"cjp17j8h7001z31fo5jei0h6c","_id":"cjp191uaj003bd3for10sqbwr"},{"post_id":"cjp191uac002ed3fomnu9sz3k","tag_id":"cjp17j8iw005j31fou1j4c84d","_id":"cjp191uaj003cd3fox3s3c6jr"},{"post_id":"cjp191uae002hd3fo3fc4htiu","tag_id":"cjp17j8ie003e31foszzwwsc2","_id":"cjp191uaj003dd3fohbgu4hhq"},{"post_id":"cjp191uaf002kd3foc1k1hg7d","tag_id":"cjp17j8iv005a31foayqej7lo","_id":"cjp191uaj003ed3focyywm2qa"},{"post_id":"cjp191uag002nd3fo78c7a7p3","tag_id":"cjp17j8iv005d31fogzjsgc27","_id":"cjp191uaj003fd3foveberplm"},{"post_id":"cjp191uah002qd3fot9o5nd2s","tag_id":"cjp17j8iv005a31foayqej7lo","_id":"cjp191uaj003gd3fovpk5eyr0"}],"Tag":[{"name":"Jekyll安装","_id":"cjp17j8g3000431fow1innzfc"},{"name":"Markdown","_id":"cjp17j8g7000931foe0k2bv2t"},{"name":"Jekyll","_id":"cjp17j8ga000f31fo9pnd1i3m"},{"name":"搭建博客","_id":"cjp17j8gf000l31fo8u2wo2pm"},{"name":"java","_id":"cjp17j8gk000q31fo2x5wyo3e"},{"name":"JDBC","_id":"cjp17j8gn000y31fo10enhblp"},{"name":"SQLserver","_id":"cjp17j8gp001431fohhupwh0l"},{"name":"JS","_id":"cjp17j8gu001a31fo52k1uxp4"},{"name":"CS","_id":"cjp17j8gz001i31fomcd8a1zt"},{"name":"爬虫","_id":"cjp17j8h4001r31fob5hlmzbu"},{"name":"Linux","_id":"cjp17j8h7001z31fo5jei0h6c"},{"name":"python虚拟环境","_id":"cjp17j8hf002631fo1qg81h9e"},{"name":"python","_id":"cjp17j8hj002c31fohqx2u87r"},{"name":"php","_id":"cjp17j8i3002m31foch2o27zm"},{"name":"数据库","_id":"cjp17j8i6002s31foihvc3e11"},{"name":"matplot","_id":"cjp17j8ib003231fomy2iuban"},{"name":"MONGODB","_id":"cjp17j8id003a31fon9ic4zbc"},{"name":"git","_id":"cjp17j8ie003e31foszzwwsc2"},{"name":"selenium","_id":"cjp17j8if003l31foqtx63pq2"},{"name":"Java","_id":"cjp17j8ig003n31fo4ibxfean"},{"name":"字符画","_id":"cjp17j8ig003q31fo2zfbt1sj"},{"name":"词频","_id":"cjp17j8ih003u31fo3f5v968c"},{"name":"MySQL","_id":"cjp17j8ih003v31fotbvrgx2q"},{"name":"hibernate","_id":"cjp17j8ii003z31fo2sa6aujp"},{"name":"SSH","_id":"cjp17j8ij004231fof8cvg6pi"},{"name":"openpyxl","_id":"cjp17j8il004831foolfcfbio"},{"name":"struts2","_id":"cjp17j8im004c31foawuat914"},{"name":"Liunx","_id":"cjp17j8im004d31foacvg4mki"},{"name":"重装系统","_id":"cjp17j8im004g31fo6dv8kr4s"},{"name":"常用软件","_id":"cjp17j8in004i31fotb1ujj5s"},{"name":"树莓派","_id":"cjp17j8in004m31foxoclu7ld"},{"name":"chromium-chromedriver","_id":"cjp17j8io004o31fopiy8f76l"},{"name":"网线直连树莓派","_id":"cjp17j8ip004s31fotgoqonto"},{"name":"WiFi热点","_id":"cjp17j8is004y31foldqiu1e4"},{"name":"Django","_id":"cjp17j8it005231fosd2f3ral"},{"name":"热词唤醒","_id":"cjp17j8iu005631fo25wbecqf"},{"name":"博客","_id":"cjp17j8iu005731fon7p3az4y"},{"name":"Android","_id":"cjp17j8iv005a31foayqej7lo"},{"name":"hackintosh","_id":"cjp17j8iv005d31fogzjsgc27"},{"name":"双网卡","_id":"cjp17j8iw005j31fou1j4c84d"}]}}